
BME280_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0e0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  0800a2b0  0800a2b0  0001a2b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7e4  0800a7e4  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800a7e4  0800a7e4  0001a7e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7ec  0800a7ec  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7ec  0800a7ec  0001a7ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7f0  0800a7f0  0001a7f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800a7f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  200001ec  0800a9e0  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  0800a9e0  00020380  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011add  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002197  00000000  00000000  00031cf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd0  00000000  00000000  00033e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f10  00000000  00000000  00034e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000234fd  00000000  00000000  00035d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001332b  00000000  00000000  0005926d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5b3f  00000000  00000000  0006c598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001420d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059b8  00000000  00000000  00142128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a298 	.word	0x0800a298

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f0 	.word	0x200001f0
 800020c:	0800a298 	.word	0x0800a298

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9f5 	b.w	80010d4 <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9aa 	b.w	80010d4 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9d08      	ldr	r5, [sp, #32]
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	468e      	mov	lr, r1
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d14d      	bne.n	8000eae <__udivmoddi4+0xaa>
 8000e12:	428a      	cmp	r2, r1
 8000e14:	4694      	mov	ip, r2
 8000e16:	d969      	bls.n	8000eec <__udivmoddi4+0xe8>
 8000e18:	fab2 f282 	clz	r2, r2
 8000e1c:	b152      	cbz	r2, 8000e34 <__udivmoddi4+0x30>
 8000e1e:	fa01 f302 	lsl.w	r3, r1, r2
 8000e22:	f1c2 0120 	rsb	r1, r2, #32
 8000e26:	fa20 f101 	lsr.w	r1, r0, r1
 8000e2a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2e:	ea41 0e03 	orr.w	lr, r1, r3
 8000e32:	4094      	lsls	r4, r2
 8000e34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e38:	0c21      	lsrs	r1, r4, #16
 8000e3a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e3e:	fa1f f78c 	uxth.w	r7, ip
 8000e42:	fb08 e316 	mls	r3, r8, r6, lr
 8000e46:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e4a:	fb06 f107 	mul.w	r1, r6, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d90a      	bls.n	8000e68 <__udivmoddi4+0x64>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e5a:	f080 811f 	bcs.w	800109c <__udivmoddi4+0x298>
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	f240 811c 	bls.w	800109c <__udivmoddi4+0x298>
 8000e64:	3e02      	subs	r6, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1a5b      	subs	r3, r3, r1
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e78:	fb00 f707 	mul.w	r7, r0, r7
 8000e7c:	42a7      	cmp	r7, r4
 8000e7e:	d90a      	bls.n	8000e96 <__udivmoddi4+0x92>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	f080 810a 	bcs.w	80010a0 <__udivmoddi4+0x29c>
 8000e8c:	42a7      	cmp	r7, r4
 8000e8e:	f240 8107 	bls.w	80010a0 <__udivmoddi4+0x29c>
 8000e92:	4464      	add	r4, ip
 8000e94:	3802      	subs	r0, #2
 8000e96:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e9a:	1be4      	subs	r4, r4, r7
 8000e9c:	2600      	movs	r6, #0
 8000e9e:	b11d      	cbz	r5, 8000ea8 <__udivmoddi4+0xa4>
 8000ea0:	40d4      	lsrs	r4, r2
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ea8:	4631      	mov	r1, r6
 8000eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d909      	bls.n	8000ec6 <__udivmoddi4+0xc2>
 8000eb2:	2d00      	cmp	r5, #0
 8000eb4:	f000 80ef 	beq.w	8001096 <__udivmoddi4+0x292>
 8000eb8:	2600      	movs	r6, #0
 8000eba:	e9c5 0100 	strd	r0, r1, [r5]
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	4631      	mov	r1, r6
 8000ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec6:	fab3 f683 	clz	r6, r3
 8000eca:	2e00      	cmp	r6, #0
 8000ecc:	d14a      	bne.n	8000f64 <__udivmoddi4+0x160>
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	d302      	bcc.n	8000ed8 <__udivmoddi4+0xd4>
 8000ed2:	4282      	cmp	r2, r0
 8000ed4:	f200 80f9 	bhi.w	80010ca <__udivmoddi4+0x2c6>
 8000ed8:	1a84      	subs	r4, r0, r2
 8000eda:	eb61 0303 	sbc.w	r3, r1, r3
 8000ede:	2001      	movs	r0, #1
 8000ee0:	469e      	mov	lr, r3
 8000ee2:	2d00      	cmp	r5, #0
 8000ee4:	d0e0      	beq.n	8000ea8 <__udivmoddi4+0xa4>
 8000ee6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eea:	e7dd      	b.n	8000ea8 <__udivmoddi4+0xa4>
 8000eec:	b902      	cbnz	r2, 8000ef0 <__udivmoddi4+0xec>
 8000eee:	deff      	udf	#255	; 0xff
 8000ef0:	fab2 f282 	clz	r2, r2
 8000ef4:	2a00      	cmp	r2, #0
 8000ef6:	f040 8092 	bne.w	800101e <__udivmoddi4+0x21a>
 8000efa:	eba1 010c 	sub.w	r1, r1, ip
 8000efe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f02:	fa1f fe8c 	uxth.w	lr, ip
 8000f06:	2601      	movs	r6, #1
 8000f08:	0c20      	lsrs	r0, r4, #16
 8000f0a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000f0e:	fb07 1113 	mls	r1, r7, r3, r1
 8000f12:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f16:	fb0e f003 	mul.w	r0, lr, r3
 8000f1a:	4288      	cmp	r0, r1
 8000f1c:	d908      	bls.n	8000f30 <__udivmoddi4+0x12c>
 8000f1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f22:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f26:	d202      	bcs.n	8000f2e <__udivmoddi4+0x12a>
 8000f28:	4288      	cmp	r0, r1
 8000f2a:	f200 80cb 	bhi.w	80010c4 <__udivmoddi4+0x2c0>
 8000f2e:	4643      	mov	r3, r8
 8000f30:	1a09      	subs	r1, r1, r0
 8000f32:	b2a4      	uxth	r4, r4
 8000f34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f38:	fb07 1110 	mls	r1, r7, r0, r1
 8000f3c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f40:	fb0e fe00 	mul.w	lr, lr, r0
 8000f44:	45a6      	cmp	lr, r4
 8000f46:	d908      	bls.n	8000f5a <__udivmoddi4+0x156>
 8000f48:	eb1c 0404 	adds.w	r4, ip, r4
 8000f4c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f50:	d202      	bcs.n	8000f58 <__udivmoddi4+0x154>
 8000f52:	45a6      	cmp	lr, r4
 8000f54:	f200 80bb 	bhi.w	80010ce <__udivmoddi4+0x2ca>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	eba4 040e 	sub.w	r4, r4, lr
 8000f5e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f62:	e79c      	b.n	8000e9e <__udivmoddi4+0x9a>
 8000f64:	f1c6 0720 	rsb	r7, r6, #32
 8000f68:	40b3      	lsls	r3, r6
 8000f6a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f6e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f72:	fa20 f407 	lsr.w	r4, r0, r7
 8000f76:	fa01 f306 	lsl.w	r3, r1, r6
 8000f7a:	431c      	orrs	r4, r3
 8000f7c:	40f9      	lsrs	r1, r7
 8000f7e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f82:	fa00 f306 	lsl.w	r3, r0, r6
 8000f86:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f8a:	0c20      	lsrs	r0, r4, #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fb09 1118 	mls	r1, r9, r8, r1
 8000f94:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f98:	fb08 f00e 	mul.w	r0, r8, lr
 8000f9c:	4288      	cmp	r0, r1
 8000f9e:	fa02 f206 	lsl.w	r2, r2, r6
 8000fa2:	d90b      	bls.n	8000fbc <__udivmoddi4+0x1b8>
 8000fa4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fac:	f080 8088 	bcs.w	80010c0 <__udivmoddi4+0x2bc>
 8000fb0:	4288      	cmp	r0, r1
 8000fb2:	f240 8085 	bls.w	80010c0 <__udivmoddi4+0x2bc>
 8000fb6:	f1a8 0802 	sub.w	r8, r8, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1a09      	subs	r1, r1, r0
 8000fbe:	b2a4      	uxth	r4, r4
 8000fc0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fc4:	fb09 1110 	mls	r1, r9, r0, r1
 8000fc8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fcc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fd0:	458e      	cmp	lr, r1
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x1e2>
 8000fd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fdc:	d26c      	bcs.n	80010b8 <__udivmoddi4+0x2b4>
 8000fde:	458e      	cmp	lr, r1
 8000fe0:	d96a      	bls.n	80010b8 <__udivmoddi4+0x2b4>
 8000fe2:	3802      	subs	r0, #2
 8000fe4:	4461      	add	r1, ip
 8000fe6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fea:	fba0 9402 	umull	r9, r4, r0, r2
 8000fee:	eba1 010e 	sub.w	r1, r1, lr
 8000ff2:	42a1      	cmp	r1, r4
 8000ff4:	46c8      	mov	r8, r9
 8000ff6:	46a6      	mov	lr, r4
 8000ff8:	d356      	bcc.n	80010a8 <__udivmoddi4+0x2a4>
 8000ffa:	d053      	beq.n	80010a4 <__udivmoddi4+0x2a0>
 8000ffc:	b15d      	cbz	r5, 8001016 <__udivmoddi4+0x212>
 8000ffe:	ebb3 0208 	subs.w	r2, r3, r8
 8001002:	eb61 010e 	sbc.w	r1, r1, lr
 8001006:	fa01 f707 	lsl.w	r7, r1, r7
 800100a:	fa22 f306 	lsr.w	r3, r2, r6
 800100e:	40f1      	lsrs	r1, r6
 8001010:	431f      	orrs	r7, r3
 8001012:	e9c5 7100 	strd	r7, r1, [r5]
 8001016:	2600      	movs	r6, #0
 8001018:	4631      	mov	r1, r6
 800101a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101e:	f1c2 0320 	rsb	r3, r2, #32
 8001022:	40d8      	lsrs	r0, r3
 8001024:	fa0c fc02 	lsl.w	ip, ip, r2
 8001028:	fa21 f303 	lsr.w	r3, r1, r3
 800102c:	4091      	lsls	r1, r2
 800102e:	4301      	orrs	r1, r0
 8001030:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001034:	fa1f fe8c 	uxth.w	lr, ip
 8001038:	fbb3 f0f7 	udiv	r0, r3, r7
 800103c:	fb07 3610 	mls	r6, r7, r0, r3
 8001040:	0c0b      	lsrs	r3, r1, #16
 8001042:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001046:	fb00 f60e 	mul.w	r6, r0, lr
 800104a:	429e      	cmp	r6, r3
 800104c:	fa04 f402 	lsl.w	r4, r4, r2
 8001050:	d908      	bls.n	8001064 <__udivmoddi4+0x260>
 8001052:	eb1c 0303 	adds.w	r3, ip, r3
 8001056:	f100 38ff 	add.w	r8, r0, #4294967295
 800105a:	d22f      	bcs.n	80010bc <__udivmoddi4+0x2b8>
 800105c:	429e      	cmp	r6, r3
 800105e:	d92d      	bls.n	80010bc <__udivmoddi4+0x2b8>
 8001060:	3802      	subs	r0, #2
 8001062:	4463      	add	r3, ip
 8001064:	1b9b      	subs	r3, r3, r6
 8001066:	b289      	uxth	r1, r1
 8001068:	fbb3 f6f7 	udiv	r6, r3, r7
 800106c:	fb07 3316 	mls	r3, r7, r6, r3
 8001070:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001074:	fb06 f30e 	mul.w	r3, r6, lr
 8001078:	428b      	cmp	r3, r1
 800107a:	d908      	bls.n	800108e <__udivmoddi4+0x28a>
 800107c:	eb1c 0101 	adds.w	r1, ip, r1
 8001080:	f106 38ff 	add.w	r8, r6, #4294967295
 8001084:	d216      	bcs.n	80010b4 <__udivmoddi4+0x2b0>
 8001086:	428b      	cmp	r3, r1
 8001088:	d914      	bls.n	80010b4 <__udivmoddi4+0x2b0>
 800108a:	3e02      	subs	r6, #2
 800108c:	4461      	add	r1, ip
 800108e:	1ac9      	subs	r1, r1, r3
 8001090:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001094:	e738      	b.n	8000f08 <__udivmoddi4+0x104>
 8001096:	462e      	mov	r6, r5
 8001098:	4628      	mov	r0, r5
 800109a:	e705      	b.n	8000ea8 <__udivmoddi4+0xa4>
 800109c:	4606      	mov	r6, r0
 800109e:	e6e3      	b.n	8000e68 <__udivmoddi4+0x64>
 80010a0:	4618      	mov	r0, r3
 80010a2:	e6f8      	b.n	8000e96 <__udivmoddi4+0x92>
 80010a4:	454b      	cmp	r3, r9
 80010a6:	d2a9      	bcs.n	8000ffc <__udivmoddi4+0x1f8>
 80010a8:	ebb9 0802 	subs.w	r8, r9, r2
 80010ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80010b0:	3801      	subs	r0, #1
 80010b2:	e7a3      	b.n	8000ffc <__udivmoddi4+0x1f8>
 80010b4:	4646      	mov	r6, r8
 80010b6:	e7ea      	b.n	800108e <__udivmoddi4+0x28a>
 80010b8:	4620      	mov	r0, r4
 80010ba:	e794      	b.n	8000fe6 <__udivmoddi4+0x1e2>
 80010bc:	4640      	mov	r0, r8
 80010be:	e7d1      	b.n	8001064 <__udivmoddi4+0x260>
 80010c0:	46d0      	mov	r8, sl
 80010c2:	e77b      	b.n	8000fbc <__udivmoddi4+0x1b8>
 80010c4:	3b02      	subs	r3, #2
 80010c6:	4461      	add	r1, ip
 80010c8:	e732      	b.n	8000f30 <__udivmoddi4+0x12c>
 80010ca:	4630      	mov	r0, r6
 80010cc:	e709      	b.n	8000ee2 <__udivmoddi4+0xde>
 80010ce:	4464      	add	r4, ip
 80010d0:	3802      	subs	r0, #2
 80010d2:	e742      	b.n	8000f5a <__udivmoddi4+0x156>

080010d4 <__aeabi_idiv0>:
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop

080010d8 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	if (htim == &htim9)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a14      	ldr	r2, [pc, #80]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d121      	bne.n	800112c <HAL_TIM_PeriodElapsedCallback+0x54>
	{
		g_ui16CounterTimer++;
 80010e8:	4b13      	ldr	r3, [pc, #76]	; (8001138 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80010ea:	881b      	ldrh	r3, [r3, #0]
 80010ec:	3301      	adds	r3, #1
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80010f2:	801a      	strh	r2, [r3, #0]

		if (g_eBme280CommStatus == NOK)
 80010f4:	4b11      	ldr	r3, [pc, #68]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x64>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d108      	bne.n	800110e <HAL_TIM_PeriodElapsedCallback+0x36>
		{
			g_eBme280CommStatus = bme280Init(&hi2c1, &g_sBme280Device);
 80010fc:	4910      	ldr	r1, [pc, #64]	; (8001140 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80010fe:	4811      	ldr	r0, [pc, #68]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001100:	f003 fcec 	bl	8004adc <bme280Init>
 8001104:	4603      	mov	r3, r0
 8001106:	461a      	mov	r2, r3
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x64>)
 800110a:	701a      	strb	r2, [r3, #0]
			return;
 800110c:	e00e      	b.n	800112c <HAL_TIM_PeriodElapsedCallback+0x54>
		}

		if (bme280GetStatus(&hi2c1, &g_sBme280Device) == AVAILABLE)
 800110e:	490c      	ldr	r1, [pc, #48]	; (8001140 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001110:	480c      	ldr	r0, [pc, #48]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001112:	f003 ff5f 	bl	8004fd4 <bme280GetStatus>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d107      	bne.n	800112c <HAL_TIM_PeriodElapsedCallback+0x54>
		{
			bme280ReadPressure(&hi2c1, &g_sBme280Device);
 800111c:	4908      	ldr	r1, [pc, #32]	; (8001140 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800111e:	4809      	ldr	r0, [pc, #36]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001120:	f004 f846 	bl	80051b0 <bme280ReadPressure>
			bme280ReadHumidity(&hi2c1, &g_sBme280Device);
 8001124:	4906      	ldr	r1, [pc, #24]	; (8001140 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001126:	4807      	ldr	r0, [pc, #28]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001128:	f004 fb70 	bl	800580c <bme280ReadHumidity>
		}
	}
}
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	2000025c 	.word	0x2000025c
 8001138:	20000350 	.word	0x20000350
 800113c:	20000324 	.word	0x20000324
 8001140:	200002e8 	.word	0x200002e8
 8001144:	20000208 	.word	0x20000208

08001148 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800114c:	f000 fbc0 	bl	80018d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001150:	f000 f888 	bl	8001264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001154:	f000 f978 	bl	8001448 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001158:	f000 f8e4 	bl	8001324 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800115c:	f000 f94a 	bl	80013f4 <MX_USART2_UART_Init>
  MX_TIM9_Init();
 8001160:	f000 f90e 	bl	8001380 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  g_eBme280CommStatus = bme280Init(&hi2c1, &g_sBme280Device);
 8001164:	4932      	ldr	r1, [pc, #200]	; (8001230 <main+0xe8>)
 8001166:	4833      	ldr	r0, [pc, #204]	; (8001234 <main+0xec>)
 8001168:	f003 fcb8 	bl	8004adc <bme280Init>
 800116c:	4603      	mov	r3, r0
 800116e:	461a      	mov	r2, r3
 8001170:	4b31      	ldr	r3, [pc, #196]	; (8001238 <main+0xf0>)
 8001172:	701a      	strb	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim9);
 8001174:	4831      	ldr	r0, [pc, #196]	; (800123c <main+0xf4>)
 8001176:	f002 fd39 	bl	8003bec <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (g_ui16CounterTimer >= g_ui8Delay2s)
 800117a:	4b31      	ldr	r3, [pc, #196]	; (8001240 <main+0xf8>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	b29a      	uxth	r2, r3
 8001180:	4b30      	ldr	r3, [pc, #192]	; (8001244 <main+0xfc>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	429a      	cmp	r2, r3
 8001186:	d8f8      	bhi.n	800117a <main+0x32>
	  {
		  sprintf(g_cMessage, "Temperature = %.2f Celsius degree\r\n", (((float) g_sBme280Device.i32Temperature) / 100));
 8001188:	4b29      	ldr	r3, [pc, #164]	; (8001230 <main+0xe8>)
 800118a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118c:	ee07 3a90 	vmov	s15, r3
 8001190:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001194:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001248 <main+0x100>
 8001198:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800119c:	ee16 0a90 	vmov	r0, s13
 80011a0:	f7ff f9f2 	bl	8000588 <__aeabi_f2d>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4928      	ldr	r1, [pc, #160]	; (800124c <main+0x104>)
 80011aa:	4829      	ldr	r0, [pc, #164]	; (8001250 <main+0x108>)
 80011ac:	f005 fa84 	bl	80066b8 <siprintf>
		  HAL_UART_Transmit(&huart2, ((uint8_t *) g_cMessage), strlen(g_cMessage), g_ui32TimeoutUart);
 80011b0:	4827      	ldr	r0, [pc, #156]	; (8001250 <main+0x108>)
 80011b2:	f7ff f82d 	bl	8000210 <strlen>
 80011b6:	4603      	mov	r3, r0
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	4b26      	ldr	r3, [pc, #152]	; (8001254 <main+0x10c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4924      	ldr	r1, [pc, #144]	; (8001250 <main+0x108>)
 80011c0:	4825      	ldr	r0, [pc, #148]	; (8001258 <main+0x110>)
 80011c2:	f003 f916 	bl	80043f2 <HAL_UART_Transmit>

		  sprintf(g_cMessage, "Pressure    = %"PRIu32" Pascal\r\n", g_sBme280Device.ui32Pressure);
 80011c6:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <main+0xe8>)
 80011c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ca:	461a      	mov	r2, r3
 80011cc:	4923      	ldr	r1, [pc, #140]	; (800125c <main+0x114>)
 80011ce:	4820      	ldr	r0, [pc, #128]	; (8001250 <main+0x108>)
 80011d0:	f005 fa72 	bl	80066b8 <siprintf>
		  HAL_UART_Transmit(&huart2, ((uint8_t *) g_cMessage), strlen(g_cMessage), g_ui32TimeoutUart);
 80011d4:	481e      	ldr	r0, [pc, #120]	; (8001250 <main+0x108>)
 80011d6:	f7ff f81b 	bl	8000210 <strlen>
 80011da:	4603      	mov	r3, r0
 80011dc:	b29a      	uxth	r2, r3
 80011de:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <main+0x10c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	491b      	ldr	r1, [pc, #108]	; (8001250 <main+0x108>)
 80011e4:	481c      	ldr	r0, [pc, #112]	; (8001258 <main+0x110>)
 80011e6:	f003 f904 	bl	80043f2 <HAL_UART_Transmit>

		  sprintf(g_cMessage, "Humidity    = %.2f%%\r\n\r\n", (((float) g_sBme280Device.ui32Humidity) /10));
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <main+0xe8>)
 80011ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ee:	ee07 3a90 	vmov	s15, r3
 80011f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011f6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80011fa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80011fe:	ee16 0a90 	vmov	r0, s13
 8001202:	f7ff f9c1 	bl	8000588 <__aeabi_f2d>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4915      	ldr	r1, [pc, #84]	; (8001260 <main+0x118>)
 800120c:	4810      	ldr	r0, [pc, #64]	; (8001250 <main+0x108>)
 800120e:	f005 fa53 	bl	80066b8 <siprintf>
		  HAL_UART_Transmit(&huart2, ((uint8_t *) g_cMessage), strlen(g_cMessage), g_ui32TimeoutUart);
 8001212:	480f      	ldr	r0, [pc, #60]	; (8001250 <main+0x108>)
 8001214:	f7fe fffc 	bl	8000210 <strlen>
 8001218:	4603      	mov	r3, r0
 800121a:	b29a      	uxth	r2, r3
 800121c:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <main+0x10c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	490b      	ldr	r1, [pc, #44]	; (8001250 <main+0x108>)
 8001222:	480d      	ldr	r0, [pc, #52]	; (8001258 <main+0x110>)
 8001224:	f003 f8e5 	bl	80043f2 <HAL_UART_Transmit>

		  g_ui16CounterTimer = 0;
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <main+0xfc>)
 800122a:	2200      	movs	r2, #0
 800122c:	801a      	strh	r2, [r3, #0]
	  if (g_ui16CounterTimer >= g_ui8Delay2s)
 800122e:	e7a4      	b.n	800117a <main+0x32>
 8001230:	200002e8 	.word	0x200002e8
 8001234:	20000208 	.word	0x20000208
 8001238:	20000324 	.word	0x20000324
 800123c:	2000025c 	.word	0x2000025c
 8001240:	20000004 	.word	0x20000004
 8001244:	20000350 	.word	0x20000350
 8001248:	42c80000 	.word	0x42c80000
 800124c:	0800a2b0 	.word	0x0800a2b0
 8001250:	20000328 	.word	0x20000328
 8001254:	20000000 	.word	0x20000000
 8001258:	200002a4 	.word	0x200002a4
 800125c:	0800a2d4 	.word	0x0800a2d4
 8001260:	0800a2f0 	.word	0x0800a2f0

08001264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b094      	sub	sp, #80	; 0x50
 8001268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800126a:	f107 031c 	add.w	r3, r7, #28
 800126e:	2234      	movs	r2, #52	; 0x34
 8001270:	2100      	movs	r1, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f004 fb98 	bl	80059a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001278:	f107 0308 	add.w	r3, r7, #8
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001288:	2300      	movs	r3, #0
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	4b23      	ldr	r3, [pc, #140]	; (800131c <SystemClock_Config+0xb8>)
 800128e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001290:	4a22      	ldr	r2, [pc, #136]	; (800131c <SystemClock_Config+0xb8>)
 8001292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001296:	6413      	str	r3, [r2, #64]	; 0x40
 8001298:	4b20      	ldr	r3, [pc, #128]	; (800131c <SystemClock_Config+0xb8>)
 800129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012a4:	2300      	movs	r3, #0
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	4b1d      	ldr	r3, [pc, #116]	; (8001320 <SystemClock_Config+0xbc>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012b0:	4a1b      	ldr	r2, [pc, #108]	; (8001320 <SystemClock_Config+0xbc>)
 80012b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b6:	6013      	str	r3, [r2, #0]
 80012b8:	4b19      	ldr	r3, [pc, #100]	; (8001320 <SystemClock_Config+0xbc>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012c0:	603b      	str	r3, [r7, #0]
 80012c2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012c4:	2302      	movs	r3, #2
 80012c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012c8:	2301      	movs	r3, #1
 80012ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012cc:	2310      	movs	r3, #16
 80012ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d4:	f107 031c 	add.w	r3, r7, #28
 80012d8:	4618      	mov	r0, r3
 80012da:	f002 f999 	bl	8003610 <HAL_RCC_OscConfig>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80012e4:	f000 f8d8 	bl	8001498 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e8:	230f      	movs	r3, #15
 80012ea:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f0:	2300      	movs	r3, #0
 80012f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012fc:	f107 0308 	add.w	r3, r7, #8
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f001 fec0 	bl	8003088 <HAL_RCC_ClockConfig>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800130e:	f000 f8c3 	bl	8001498 <Error_Handler>
  }
}
 8001312:	bf00      	nop
 8001314:	3750      	adds	r7, #80	; 0x50
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40023800 	.word	0x40023800
 8001320:	40007000 	.word	0x40007000

08001324 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <MX_I2C1_Init+0x50>)
 800132a:	4a13      	ldr	r2, [pc, #76]	; (8001378 <MX_I2C1_Init+0x54>)
 800132c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <MX_I2C1_Init+0x50>)
 8001330:	4a12      	ldr	r2, [pc, #72]	; (800137c <MX_I2C1_Init+0x58>)
 8001332:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <MX_I2C1_Init+0x50>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <MX_I2C1_Init+0x50>)
 800133c:	2200      	movs	r2, #0
 800133e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <MX_I2C1_Init+0x50>)
 8001342:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001346:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001348:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <MX_I2C1_Init+0x50>)
 800134a:	2200      	movs	r2, #0
 800134c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <MX_I2C1_Init+0x50>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001354:	4b07      	ldr	r3, [pc, #28]	; (8001374 <MX_I2C1_Init+0x50>)
 8001356:	2200      	movs	r2, #0
 8001358:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <MX_I2C1_Init+0x50>)
 800135c:	2200      	movs	r2, #0
 800135e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001360:	4804      	ldr	r0, [pc, #16]	; (8001374 <MX_I2C1_Init+0x50>)
 8001362:	f000 fdcd 	bl	8001f00 <HAL_I2C_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800136c:	f000 f894 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000208 	.word	0x20000208
 8001378:	40005400 	.word	0x40005400
 800137c:	000186a0 	.word	0x000186a0

08001380 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001386:	463b      	mov	r3, r7
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001392:	4b16      	ldr	r3, [pc, #88]	; (80013ec <MX_TIM9_Init+0x6c>)
 8001394:	4a16      	ldr	r2, [pc, #88]	; (80013f0 <MX_TIM9_Init+0x70>)
 8001396:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 16000-1;
 8001398:	4b14      	ldr	r3, [pc, #80]	; (80013ec <MX_TIM9_Init+0x6c>)
 800139a:	f643 627f 	movw	r2, #15999	; 0x3e7f
 800139e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <MX_TIM9_Init+0x6c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 100-1;
 80013a6:	4b11      	ldr	r3, [pc, #68]	; (80013ec <MX_TIM9_Init+0x6c>)
 80013a8:	2263      	movs	r2, #99	; 0x63
 80013aa:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <MX_TIM9_Init+0x6c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <MX_TIM9_Init+0x6c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80013b8:	480c      	ldr	r0, [pc, #48]	; (80013ec <MX_TIM9_Init+0x6c>)
 80013ba:	f002 fbc7 	bl	8003b4c <HAL_TIM_Base_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 80013c4:	f000 f868 	bl	8001498 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013cc:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80013ce:	463b      	mov	r3, r7
 80013d0:	4619      	mov	r1, r3
 80013d2:	4806      	ldr	r0, [pc, #24]	; (80013ec <MX_TIM9_Init+0x6c>)
 80013d4:	f002 fd82 	bl	8003edc <HAL_TIM_ConfigClockSource>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 80013de:	f000 f85b 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80013e2:	bf00      	nop
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	2000025c 	.word	0x2000025c
 80013f0:	40014000 	.word	0x40014000

080013f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013f8:	4b11      	ldr	r3, [pc, #68]	; (8001440 <MX_USART2_UART_Init+0x4c>)
 80013fa:	4a12      	ldr	r2, [pc, #72]	; (8001444 <MX_USART2_UART_Init+0x50>)
 80013fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013fe:	4b10      	ldr	r3, [pc, #64]	; (8001440 <MX_USART2_UART_Init+0x4c>)
 8001400:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001404:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <MX_USART2_UART_Init+0x4c>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <MX_USART2_UART_Init+0x4c>)
 800140e:	2200      	movs	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <MX_USART2_UART_Init+0x4c>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001418:	4b09      	ldr	r3, [pc, #36]	; (8001440 <MX_USART2_UART_Init+0x4c>)
 800141a:	220c      	movs	r2, #12
 800141c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <MX_USART2_UART_Init+0x4c>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <MX_USART2_UART_Init+0x4c>)
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800142a:	4805      	ldr	r0, [pc, #20]	; (8001440 <MX_USART2_UART_Init+0x4c>)
 800142c:	f002 ff94 	bl	8004358 <HAL_UART_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001436:	f000 f82f 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200002a4 	.word	0x200002a4
 8001444:	40004400 	.word	0x40004400

08001448 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	4b10      	ldr	r3, [pc, #64]	; (8001494 <MX_GPIO_Init+0x4c>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a0f      	ldr	r2, [pc, #60]	; (8001494 <MX_GPIO_Init+0x4c>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b0d      	ldr	r3, [pc, #52]	; (8001494 <MX_GPIO_Init+0x4c>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	603b      	str	r3, [r7, #0]
 800146e:	4b09      	ldr	r3, [pc, #36]	; (8001494 <MX_GPIO_Init+0x4c>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a08      	ldr	r2, [pc, #32]	; (8001494 <MX_GPIO_Init+0x4c>)
 8001474:	f043 0302 	orr.w	r3, r3, #2
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b06      	ldr	r3, [pc, #24]	; (8001494 <MX_GPIO_Init+0x4c>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	603b      	str	r3, [r7, #0]
 8001484:	683b      	ldr	r3, [r7, #0]

}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	40023800 	.word	0x40023800

08001498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800149c:	b672      	cpsid	i
}
 800149e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <Error_Handler+0x8>
	...

080014a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <HAL_MspInit+0x4c>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	4a0f      	ldr	r2, [pc, #60]	; (80014f0 <HAL_MspInit+0x4c>)
 80014b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ba:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <HAL_MspInit+0x4c>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	603b      	str	r3, [r7, #0]
 80014ca:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <HAL_MspInit+0x4c>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	4a08      	ldr	r2, [pc, #32]	; (80014f0 <HAL_MspInit+0x4c>)
 80014d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d4:	6413      	str	r3, [r2, #64]	; 0x40
 80014d6:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_MspInit+0x4c>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	40023800 	.word	0x40023800

080014f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	; 0x28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a19      	ldr	r2, [pc, #100]	; (8001578 <HAL_I2C_MspInit+0x84>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d12c      	bne.n	8001570 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	4b18      	ldr	r3, [pc, #96]	; (800157c <HAL_I2C_MspInit+0x88>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a17      	ldr	r2, [pc, #92]	; (800157c <HAL_I2C_MspInit+0x88>)
 8001520:	f043 0302 	orr.w	r3, r3, #2
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <HAL_I2C_MspInit+0x88>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001532:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001538:	2312      	movs	r3, #18
 800153a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001540:	2303      	movs	r3, #3
 8001542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001544:	2304      	movs	r3, #4
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	4619      	mov	r1, r3
 800154e:	480c      	ldr	r0, [pc, #48]	; (8001580 <HAL_I2C_MspInit+0x8c>)
 8001550:	f000 fb42 	bl	8001bd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	4b08      	ldr	r3, [pc, #32]	; (800157c <HAL_I2C_MspInit+0x88>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	4a07      	ldr	r2, [pc, #28]	; (800157c <HAL_I2C_MspInit+0x88>)
 800155e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001562:	6413      	str	r3, [r2, #64]	; 0x40
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <HAL_I2C_MspInit+0x88>)
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001570:	bf00      	nop
 8001572:	3728      	adds	r7, #40	; 0x28
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40005400 	.word	0x40005400
 800157c:	40023800 	.word	0x40023800
 8001580:	40020400 	.word	0x40020400

08001584 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a0e      	ldr	r2, [pc, #56]	; (80015cc <HAL_TIM_Base_MspInit+0x48>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d115      	bne.n	80015c2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <HAL_TIM_Base_MspInit+0x4c>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159e:	4a0c      	ldr	r2, [pc, #48]	; (80015d0 <HAL_TIM_Base_MspInit+0x4c>)
 80015a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a4:	6453      	str	r3, [r2, #68]	; 0x44
 80015a6:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <HAL_TIM_Base_MspInit+0x4c>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2100      	movs	r1, #0
 80015b6:	2018      	movs	r0, #24
 80015b8:	f000 fad7 	bl	8001b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80015bc:	2018      	movs	r0, #24
 80015be:	f000 faf0 	bl	8001ba2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80015c2:	bf00      	nop
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40014000 	.word	0x40014000
 80015d0:	40023800 	.word	0x40023800

080015d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	; 0x28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a19      	ldr	r2, [pc, #100]	; (8001658 <HAL_UART_MspInit+0x84>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d12b      	bne.n	800164e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	4b18      	ldr	r3, [pc, #96]	; (800165c <HAL_UART_MspInit+0x88>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	4a17      	ldr	r2, [pc, #92]	; (800165c <HAL_UART_MspInit+0x88>)
 8001600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001604:	6413      	str	r3, [r2, #64]	; 0x40
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <HAL_UART_MspInit+0x88>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	4b11      	ldr	r3, [pc, #68]	; (800165c <HAL_UART_MspInit+0x88>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a10      	ldr	r2, [pc, #64]	; (800165c <HAL_UART_MspInit+0x88>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b0e      	ldr	r3, [pc, #56]	; (800165c <HAL_UART_MspInit+0x88>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800162e:	230c      	movs	r3, #12
 8001630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	2302      	movs	r3, #2
 8001634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163a:	2303      	movs	r3, #3
 800163c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800163e:	2307      	movs	r3, #7
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001642:	f107 0314 	add.w	r3, r7, #20
 8001646:	4619      	mov	r1, r3
 8001648:	4805      	ldr	r0, [pc, #20]	; (8001660 <HAL_UART_MspInit+0x8c>)
 800164a:	f000 fac5 	bl	8001bd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800164e:	bf00      	nop
 8001650:	3728      	adds	r7, #40	; 0x28
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40004400 	.word	0x40004400
 800165c:	40023800 	.word	0x40023800
 8001660:	40020000 	.word	0x40020000

08001664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <NMI_Handler+0x4>

0800166a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800166e:	e7fe      	b.n	800166e <HardFault_Handler+0x4>

08001670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001674:	e7fe      	b.n	8001674 <MemManage_Handler+0x4>

08001676 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800167a:	e7fe      	b.n	800167a <BusFault_Handler+0x4>

0800167c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001680:	e7fe      	b.n	8001680 <UsageFault_Handler+0x4>

08001682 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016b0:	f000 f960 	bl	8001974 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80016bc:	4802      	ldr	r0, [pc, #8]	; (80016c8 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80016be:	f002 fb05 	bl	8003ccc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	2000025c 	.word	0x2000025c

080016cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
	return 1;
 80016d0:	2301      	movs	r3, #1
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <_kill>:

int _kill(int pid, int sig)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016e6:	f004 f935 	bl	8005954 <__errno>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2216      	movs	r2, #22
 80016ee:	601a      	str	r2, [r3, #0]
	return -1;
 80016f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <_exit>:

void _exit (int status)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001704:	f04f 31ff 	mov.w	r1, #4294967295
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff ffe7 	bl	80016dc <_kill>
	while (1) {}		/* Make sure we hang here */
 800170e:	e7fe      	b.n	800170e <_exit+0x12>

08001710 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
 8001720:	e00a      	b.n	8001738 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001722:	f3af 8000 	nop.w
 8001726:	4601      	mov	r1, r0
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	60ba      	str	r2, [r7, #8]
 800172e:	b2ca      	uxtb	r2, r1
 8001730:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	3301      	adds	r3, #1
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	697a      	ldr	r2, [r7, #20]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	429a      	cmp	r2, r3
 800173e:	dbf0      	blt.n	8001722 <_read+0x12>
	}

return len;
 8001740:	687b      	ldr	r3, [r7, #4]
}
 8001742:	4618      	mov	r0, r3
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b086      	sub	sp, #24
 800174e:	af00      	add	r7, sp, #0
 8001750:	60f8      	str	r0, [r7, #12]
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	e009      	b.n	8001770 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	1c5a      	adds	r2, r3, #1
 8001760:	60ba      	str	r2, [r7, #8]
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	3301      	adds	r3, #1
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	429a      	cmp	r2, r3
 8001776:	dbf1      	blt.n	800175c <_write+0x12>
	}
	return len;
 8001778:	687b      	ldr	r3, [r7, #4]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <_close>:

int _close(int file)
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
	return -1;
 800178a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800178e:	4618      	mov	r0, r3
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
 80017a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017aa:	605a      	str	r2, [r3, #4]
	return 0;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <_isatty>:

int _isatty(int file)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
	return 1;
 80017c2:	2301      	movs	r3, #1
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
	return 0;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017f4:	4a14      	ldr	r2, [pc, #80]	; (8001848 <_sbrk+0x5c>)
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <_sbrk+0x60>)
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001800:	4b13      	ldr	r3, [pc, #76]	; (8001850 <_sbrk+0x64>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d102      	bne.n	800180e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001808:	4b11      	ldr	r3, [pc, #68]	; (8001850 <_sbrk+0x64>)
 800180a:	4a12      	ldr	r2, [pc, #72]	; (8001854 <_sbrk+0x68>)
 800180c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800180e:	4b10      	ldr	r3, [pc, #64]	; (8001850 <_sbrk+0x64>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4413      	add	r3, r2
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	429a      	cmp	r2, r3
 800181a:	d207      	bcs.n	800182c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800181c:	f004 f89a 	bl	8005954 <__errno>
 8001820:	4603      	mov	r3, r0
 8001822:	220c      	movs	r2, #12
 8001824:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001826:	f04f 33ff 	mov.w	r3, #4294967295
 800182a:	e009      	b.n	8001840 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800182c:	4b08      	ldr	r3, [pc, #32]	; (8001850 <_sbrk+0x64>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001832:	4b07      	ldr	r3, [pc, #28]	; (8001850 <_sbrk+0x64>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	4a05      	ldr	r2, [pc, #20]	; (8001850 <_sbrk+0x64>)
 800183c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800183e:	68fb      	ldr	r3, [r7, #12]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20020000 	.word	0x20020000
 800184c:	00000400 	.word	0x00000400
 8001850:	20000354 	.word	0x20000354
 8001854:	20000380 	.word	0x20000380

08001858 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <SystemInit+0x20>)
 800185e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001862:	4a05      	ldr	r2, [pc, #20]	; (8001878 <SystemInit+0x20>)
 8001864:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001868:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800187c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001880:	480d      	ldr	r0, [pc, #52]	; (80018b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001882:	490e      	ldr	r1, [pc, #56]	; (80018bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001884:	4a0e      	ldr	r2, [pc, #56]	; (80018c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001888:	e002      	b.n	8001890 <LoopCopyDataInit>

0800188a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800188a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800188c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800188e:	3304      	adds	r3, #4

08001890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001894:	d3f9      	bcc.n	800188a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001896:	4a0b      	ldr	r2, [pc, #44]	; (80018c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001898:	4c0b      	ldr	r4, [pc, #44]	; (80018c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800189a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800189c:	e001      	b.n	80018a2 <LoopFillZerobss>

0800189e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800189e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a0:	3204      	adds	r2, #4

080018a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a4:	d3fb      	bcc.n	800189e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018a6:	f7ff ffd7 	bl	8001858 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018aa:	f004 f859 	bl	8005960 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ae:	f7ff fc4b 	bl	8001148 <main>
  bx  lr    
 80018b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018bc:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80018c0:	0800a7f4 	.word	0x0800a7f4
  ldr r2, =_sbss
 80018c4:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80018c8:	20000380 	.word	0x20000380

080018cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018cc:	e7fe      	b.n	80018cc <ADC_IRQHandler>
	...

080018d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018d4:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <HAL_Init+0x40>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a0d      	ldr	r2, [pc, #52]	; (8001910 <HAL_Init+0x40>)
 80018da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018e0:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <HAL_Init+0x40>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a0a      	ldr	r2, [pc, #40]	; (8001910 <HAL_Init+0x40>)
 80018e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018ec:	4b08      	ldr	r3, [pc, #32]	; (8001910 <HAL_Init+0x40>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a07      	ldr	r2, [pc, #28]	; (8001910 <HAL_Init+0x40>)
 80018f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018f8:	2003      	movs	r0, #3
 80018fa:	f000 f92b 	bl	8001b54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018fe:	200f      	movs	r0, #15
 8001900:	f000 f808 	bl	8001914 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001904:	f7ff fdce 	bl	80014a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40023c00 	.word	0x40023c00

08001914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800191c:	4b12      	ldr	r3, [pc, #72]	; (8001968 <HAL_InitTick+0x54>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	4b12      	ldr	r3, [pc, #72]	; (800196c <HAL_InitTick+0x58>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	4619      	mov	r1, r3
 8001926:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800192a:	fbb3 f3f1 	udiv	r3, r3, r1
 800192e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001932:	4618      	mov	r0, r3
 8001934:	f000 f943 	bl	8001bbe <HAL_SYSTICK_Config>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e00e      	b.n	8001960 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b0f      	cmp	r3, #15
 8001946:	d80a      	bhi.n	800195e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001948:	2200      	movs	r2, #0
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	f04f 30ff 	mov.w	r0, #4294967295
 8001950:	f000 f90b 	bl	8001b6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001954:	4a06      	ldr	r2, [pc, #24]	; (8001970 <HAL_InitTick+0x5c>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800195a:	2300      	movs	r3, #0
 800195c:	e000      	b.n	8001960 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
}
 8001960:	4618      	mov	r0, r3
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	20000008 	.word	0x20000008
 800196c:	20000010 	.word	0x20000010
 8001970:	2000000c 	.word	0x2000000c

08001974 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <HAL_IncTick+0x20>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	461a      	mov	r2, r3
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_IncTick+0x24>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4413      	add	r3, r2
 8001984:	4a04      	ldr	r2, [pc, #16]	; (8001998 <HAL_IncTick+0x24>)
 8001986:	6013      	str	r3, [r2, #0]
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	20000010 	.word	0x20000010
 8001998:	20000358 	.word	0x20000358

0800199c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return uwTick;
 80019a0:	4b03      	ldr	r3, [pc, #12]	; (80019b0 <HAL_GetTick+0x14>)
 80019a2:	681b      	ldr	r3, [r3, #0]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	20000358 	.word	0x20000358

080019b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <__NVIC_SetPriorityGrouping+0x44>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ca:	68ba      	ldr	r2, [r7, #8]
 80019cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019d0:	4013      	ands	r3, r2
 80019d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019e6:	4a04      	ldr	r2, [pc, #16]	; (80019f8 <__NVIC_SetPriorityGrouping+0x44>)
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	60d3      	str	r3, [r2, #12]
}
 80019ec:	bf00      	nop
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a00:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <__NVIC_GetPriorityGrouping+0x18>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	0a1b      	lsrs	r3, r3, #8
 8001a06:	f003 0307 	and.w	r3, r3, #7
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	db0b      	blt.n	8001a42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a2a:	79fb      	ldrb	r3, [r7, #7]
 8001a2c:	f003 021f 	and.w	r2, r3, #31
 8001a30:	4907      	ldr	r1, [pc, #28]	; (8001a50 <__NVIC_EnableIRQ+0x38>)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	095b      	lsrs	r3, r3, #5
 8001a38:	2001      	movs	r0, #1
 8001a3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	e000e100 	.word	0xe000e100

08001a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	6039      	str	r1, [r7, #0]
 8001a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	db0a      	blt.n	8001a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	490c      	ldr	r1, [pc, #48]	; (8001aa0 <__NVIC_SetPriority+0x4c>)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	0112      	lsls	r2, r2, #4
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	440b      	add	r3, r1
 8001a78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a7c:	e00a      	b.n	8001a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	4908      	ldr	r1, [pc, #32]	; (8001aa4 <__NVIC_SetPriority+0x50>)
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	3b04      	subs	r3, #4
 8001a8c:	0112      	lsls	r2, r2, #4
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	440b      	add	r3, r1
 8001a92:	761a      	strb	r2, [r3, #24]
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e000e100 	.word	0xe000e100
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b089      	sub	sp, #36	; 0x24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f1c3 0307 	rsb	r3, r3, #7
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	bf28      	it	cs
 8001ac6:	2304      	movcs	r3, #4
 8001ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3304      	adds	r3, #4
 8001ace:	2b06      	cmp	r3, #6
 8001ad0:	d902      	bls.n	8001ad8 <NVIC_EncodePriority+0x30>
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3b03      	subs	r3, #3
 8001ad6:	e000      	b.n	8001ada <NVIC_EncodePriority+0x32>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001adc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43da      	mvns	r2, r3
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	401a      	ands	r2, r3
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af0:	f04f 31ff 	mov.w	r1, #4294967295
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	fa01 f303 	lsl.w	r3, r1, r3
 8001afa:	43d9      	mvns	r1, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b00:	4313      	orrs	r3, r2
         );
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3724      	adds	r7, #36	; 0x24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
	...

08001b10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b20:	d301      	bcc.n	8001b26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b22:	2301      	movs	r3, #1
 8001b24:	e00f      	b.n	8001b46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b26:	4a0a      	ldr	r2, [pc, #40]	; (8001b50 <SysTick_Config+0x40>)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b2e:	210f      	movs	r1, #15
 8001b30:	f04f 30ff 	mov.w	r0, #4294967295
 8001b34:	f7ff ff8e 	bl	8001a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b38:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <SysTick_Config+0x40>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b3e:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <SysTick_Config+0x40>)
 8001b40:	2207      	movs	r2, #7
 8001b42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	e000e010 	.word	0xe000e010

08001b54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff ff29 	bl	80019b4 <__NVIC_SetPriorityGrouping>
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b086      	sub	sp, #24
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	4603      	mov	r3, r0
 8001b72:	60b9      	str	r1, [r7, #8]
 8001b74:	607a      	str	r2, [r7, #4]
 8001b76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b7c:	f7ff ff3e 	bl	80019fc <__NVIC_GetPriorityGrouping>
 8001b80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	68b9      	ldr	r1, [r7, #8]
 8001b86:	6978      	ldr	r0, [r7, #20]
 8001b88:	f7ff ff8e 	bl	8001aa8 <NVIC_EncodePriority>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b92:	4611      	mov	r1, r2
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ff5d 	bl	8001a54 <__NVIC_SetPriority>
}
 8001b9a:	bf00      	nop
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	4603      	mov	r3, r0
 8001baa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ff31 	bl	8001a18 <__NVIC_EnableIRQ>
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff ffa2 	bl	8001b10 <SysTick_Config>
 8001bcc:	4603      	mov	r3, r0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b089      	sub	sp, #36	; 0x24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61fb      	str	r3, [r7, #28]
 8001bf2:	e165      	b.n	8001ec0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	697a      	ldr	r2, [r7, #20]
 8001c04:	4013      	ands	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	f040 8154 	bne.w	8001eba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d005      	beq.n	8001c2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d130      	bne.n	8001c8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	2203      	movs	r2, #3
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	68da      	ldr	r2, [r3, #12]
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c60:	2201      	movs	r2, #1
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	091b      	lsrs	r3, r3, #4
 8001c76:	f003 0201 	and.w	r2, r3, #1
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	2b03      	cmp	r3, #3
 8001c96:	d017      	beq.n	8001cc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	2203      	movs	r2, #3
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d123      	bne.n	8001d1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	08da      	lsrs	r2, r3, #3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3208      	adds	r2, #8
 8001cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	220f      	movs	r2, #15
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	691a      	ldr	r2, [r3, #16]
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	08da      	lsrs	r2, r3, #3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	3208      	adds	r2, #8
 8001d16:	69b9      	ldr	r1, [r7, #24]
 8001d18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	2203      	movs	r2, #3
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4013      	ands	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f003 0203 	and.w	r2, r3, #3
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f000 80ae 	beq.w	8001eba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	4b5d      	ldr	r3, [pc, #372]	; (8001ed8 <HAL_GPIO_Init+0x300>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	4a5c      	ldr	r2, [pc, #368]	; (8001ed8 <HAL_GPIO_Init+0x300>)
 8001d68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d6e:	4b5a      	ldr	r3, [pc, #360]	; (8001ed8 <HAL_GPIO_Init+0x300>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d7a:	4a58      	ldr	r2, [pc, #352]	; (8001edc <HAL_GPIO_Init+0x304>)
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	089b      	lsrs	r3, r3, #2
 8001d80:	3302      	adds	r3, #2
 8001d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	220f      	movs	r2, #15
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43db      	mvns	r3, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a4f      	ldr	r2, [pc, #316]	; (8001ee0 <HAL_GPIO_Init+0x308>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d025      	beq.n	8001df2 <HAL_GPIO_Init+0x21a>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a4e      	ldr	r2, [pc, #312]	; (8001ee4 <HAL_GPIO_Init+0x30c>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d01f      	beq.n	8001dee <HAL_GPIO_Init+0x216>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a4d      	ldr	r2, [pc, #308]	; (8001ee8 <HAL_GPIO_Init+0x310>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d019      	beq.n	8001dea <HAL_GPIO_Init+0x212>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a4c      	ldr	r2, [pc, #304]	; (8001eec <HAL_GPIO_Init+0x314>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d013      	beq.n	8001de6 <HAL_GPIO_Init+0x20e>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a4b      	ldr	r2, [pc, #300]	; (8001ef0 <HAL_GPIO_Init+0x318>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d00d      	beq.n	8001de2 <HAL_GPIO_Init+0x20a>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a4a      	ldr	r2, [pc, #296]	; (8001ef4 <HAL_GPIO_Init+0x31c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d007      	beq.n	8001dde <HAL_GPIO_Init+0x206>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a49      	ldr	r2, [pc, #292]	; (8001ef8 <HAL_GPIO_Init+0x320>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d101      	bne.n	8001dda <HAL_GPIO_Init+0x202>
 8001dd6:	2306      	movs	r3, #6
 8001dd8:	e00c      	b.n	8001df4 <HAL_GPIO_Init+0x21c>
 8001dda:	2307      	movs	r3, #7
 8001ddc:	e00a      	b.n	8001df4 <HAL_GPIO_Init+0x21c>
 8001dde:	2305      	movs	r3, #5
 8001de0:	e008      	b.n	8001df4 <HAL_GPIO_Init+0x21c>
 8001de2:	2304      	movs	r3, #4
 8001de4:	e006      	b.n	8001df4 <HAL_GPIO_Init+0x21c>
 8001de6:	2303      	movs	r3, #3
 8001de8:	e004      	b.n	8001df4 <HAL_GPIO_Init+0x21c>
 8001dea:	2302      	movs	r3, #2
 8001dec:	e002      	b.n	8001df4 <HAL_GPIO_Init+0x21c>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <HAL_GPIO_Init+0x21c>
 8001df2:	2300      	movs	r3, #0
 8001df4:	69fa      	ldr	r2, [r7, #28]
 8001df6:	f002 0203 	and.w	r2, r2, #3
 8001dfa:	0092      	lsls	r2, r2, #2
 8001dfc:	4093      	lsls	r3, r2
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e04:	4935      	ldr	r1, [pc, #212]	; (8001edc <HAL_GPIO_Init+0x304>)
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	089b      	lsrs	r3, r3, #2
 8001e0a:	3302      	adds	r3, #2
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e12:	4b3a      	ldr	r3, [pc, #232]	; (8001efc <HAL_GPIO_Init+0x324>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e36:	4a31      	ldr	r2, [pc, #196]	; (8001efc <HAL_GPIO_Init+0x324>)
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e3c:	4b2f      	ldr	r3, [pc, #188]	; (8001efc <HAL_GPIO_Init+0x324>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d003      	beq.n	8001e60 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e60:	4a26      	ldr	r2, [pc, #152]	; (8001efc <HAL_GPIO_Init+0x324>)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e66:	4b25      	ldr	r3, [pc, #148]	; (8001efc <HAL_GPIO_Init+0x324>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4013      	ands	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e8a:	4a1c      	ldr	r2, [pc, #112]	; (8001efc <HAL_GPIO_Init+0x324>)
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e90:	4b1a      	ldr	r3, [pc, #104]	; (8001efc <HAL_GPIO_Init+0x324>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eb4:	4a11      	ldr	r2, [pc, #68]	; (8001efc <HAL_GPIO_Init+0x324>)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	61fb      	str	r3, [r7, #28]
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	2b0f      	cmp	r3, #15
 8001ec4:	f67f ae96 	bls.w	8001bf4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ec8:	bf00      	nop
 8001eca:	bf00      	nop
 8001ecc:	3724      	adds	r7, #36	; 0x24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40013800 	.word	0x40013800
 8001ee0:	40020000 	.word	0x40020000
 8001ee4:	40020400 	.word	0x40020400
 8001ee8:	40020800 	.word	0x40020800
 8001eec:	40020c00 	.word	0x40020c00
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40021400 	.word	0x40021400
 8001ef8:	40021800 	.word	0x40021800
 8001efc:	40013c00 	.word	0x40013c00

08001f00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e12b      	b.n	800216a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d106      	bne.n	8001f2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff fae4 	bl	80014f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2224      	movs	r2, #36	; 0x24
 8001f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f022 0201 	bic.w	r2, r2, #1
 8001f42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f64:	f001 f982 	bl	800326c <HAL_RCC_GetPCLK1Freq>
 8001f68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	4a81      	ldr	r2, [pc, #516]	; (8002174 <HAL_I2C_Init+0x274>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d807      	bhi.n	8001f84 <HAL_I2C_Init+0x84>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4a80      	ldr	r2, [pc, #512]	; (8002178 <HAL_I2C_Init+0x278>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	bf94      	ite	ls
 8001f7c:	2301      	movls	r3, #1
 8001f7e:	2300      	movhi	r3, #0
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	e006      	b.n	8001f92 <HAL_I2C_Init+0x92>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4a7d      	ldr	r2, [pc, #500]	; (800217c <HAL_I2C_Init+0x27c>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	bf94      	ite	ls
 8001f8c:	2301      	movls	r3, #1
 8001f8e:	2300      	movhi	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e0e7      	b.n	800216a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	4a78      	ldr	r2, [pc, #480]	; (8002180 <HAL_I2C_Init+0x280>)
 8001f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa2:	0c9b      	lsrs	r3, r3, #18
 8001fa4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68ba      	ldr	r2, [r7, #8]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	4a6a      	ldr	r2, [pc, #424]	; (8002174 <HAL_I2C_Init+0x274>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d802      	bhi.n	8001fd4 <HAL_I2C_Init+0xd4>
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	e009      	b.n	8001fe8 <HAL_I2C_Init+0xe8>
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001fda:	fb02 f303 	mul.w	r3, r2, r3
 8001fde:	4a69      	ldr	r2, [pc, #420]	; (8002184 <HAL_I2C_Init+0x284>)
 8001fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe4:	099b      	lsrs	r3, r3, #6
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	6812      	ldr	r2, [r2, #0]
 8001fec:	430b      	orrs	r3, r1
 8001fee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ffa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	495c      	ldr	r1, [pc, #368]	; (8002174 <HAL_I2C_Init+0x274>)
 8002004:	428b      	cmp	r3, r1
 8002006:	d819      	bhi.n	800203c <HAL_I2C_Init+0x13c>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	1e59      	subs	r1, r3, #1
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	fbb1 f3f3 	udiv	r3, r1, r3
 8002016:	1c59      	adds	r1, r3, #1
 8002018:	f640 73fc 	movw	r3, #4092	; 0xffc
 800201c:	400b      	ands	r3, r1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00a      	beq.n	8002038 <HAL_I2C_Init+0x138>
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	1e59      	subs	r1, r3, #1
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002030:	3301      	adds	r3, #1
 8002032:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002036:	e051      	b.n	80020dc <HAL_I2C_Init+0x1dc>
 8002038:	2304      	movs	r3, #4
 800203a:	e04f      	b.n	80020dc <HAL_I2C_Init+0x1dc>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d111      	bne.n	8002068 <HAL_I2C_Init+0x168>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	1e58      	subs	r0, r3, #1
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6859      	ldr	r1, [r3, #4]
 800204c:	460b      	mov	r3, r1
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	440b      	add	r3, r1
 8002052:	fbb0 f3f3 	udiv	r3, r0, r3
 8002056:	3301      	adds	r3, #1
 8002058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800205c:	2b00      	cmp	r3, #0
 800205e:	bf0c      	ite	eq
 8002060:	2301      	moveq	r3, #1
 8002062:	2300      	movne	r3, #0
 8002064:	b2db      	uxtb	r3, r3
 8002066:	e012      	b.n	800208e <HAL_I2C_Init+0x18e>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	1e58      	subs	r0, r3, #1
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6859      	ldr	r1, [r3, #4]
 8002070:	460b      	mov	r3, r1
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	440b      	add	r3, r1
 8002076:	0099      	lsls	r1, r3, #2
 8002078:	440b      	add	r3, r1
 800207a:	fbb0 f3f3 	udiv	r3, r0, r3
 800207e:	3301      	adds	r3, #1
 8002080:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002084:	2b00      	cmp	r3, #0
 8002086:	bf0c      	ite	eq
 8002088:	2301      	moveq	r3, #1
 800208a:	2300      	movne	r3, #0
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_I2C_Init+0x196>
 8002092:	2301      	movs	r3, #1
 8002094:	e022      	b.n	80020dc <HAL_I2C_Init+0x1dc>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10e      	bne.n	80020bc <HAL_I2C_Init+0x1bc>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	1e58      	subs	r0, r3, #1
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6859      	ldr	r1, [r3, #4]
 80020a6:	460b      	mov	r3, r1
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	440b      	add	r3, r1
 80020ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80020b0:	3301      	adds	r3, #1
 80020b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020ba:	e00f      	b.n	80020dc <HAL_I2C_Init+0x1dc>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	1e58      	subs	r0, r3, #1
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6859      	ldr	r1, [r3, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	0099      	lsls	r1, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80020d2:	3301      	adds	r3, #1
 80020d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	6809      	ldr	r1, [r1, #0]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69da      	ldr	r2, [r3, #28]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800210a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	6911      	ldr	r1, [r2, #16]
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	68d2      	ldr	r2, [r2, #12]
 8002116:	4311      	orrs	r1, r2
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6812      	ldr	r2, [r2, #0]
 800211c:	430b      	orrs	r3, r1
 800211e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	695a      	ldr	r2, [r3, #20]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 0201 	orr.w	r2, r2, #1
 800214a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2220      	movs	r2, #32
 8002156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	000186a0 	.word	0x000186a0
 8002178:	001e847f 	.word	0x001e847f
 800217c:	003d08ff 	.word	0x003d08ff
 8002180:	431bde83 	.word	0x431bde83
 8002184:	10624dd3 	.word	0x10624dd3

08002188 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b088      	sub	sp, #32
 800218c:	af02      	add	r7, sp, #8
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	607a      	str	r2, [r7, #4]
 8002192:	461a      	mov	r2, r3
 8002194:	460b      	mov	r3, r1
 8002196:	817b      	strh	r3, [r7, #10]
 8002198:	4613      	mov	r3, r2
 800219a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800219c:	f7ff fbfe 	bl	800199c <HAL_GetTick>
 80021a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b20      	cmp	r3, #32
 80021ac:	f040 80e0 	bne.w	8002370 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	2319      	movs	r3, #25
 80021b6:	2201      	movs	r2, #1
 80021b8:	4970      	ldr	r1, [pc, #448]	; (800237c <HAL_I2C_Master_Transmit+0x1f4>)
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f000 fd86 	bl	8002ccc <I2C_WaitOnFlagUntilTimeout>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80021c6:	2302      	movs	r3, #2
 80021c8:	e0d3      	b.n	8002372 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d101      	bne.n	80021d8 <HAL_I2C_Master_Transmit+0x50>
 80021d4:	2302      	movs	r3, #2
 80021d6:	e0cc      	b.n	8002372 <HAL_I2C_Master_Transmit+0x1ea>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d007      	beq.n	80021fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f042 0201 	orr.w	r2, r2, #1
 80021fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800220c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2221      	movs	r2, #33	; 0x21
 8002212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2210      	movs	r2, #16
 800221a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	893a      	ldrh	r2, [r7, #8]
 800222e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002234:	b29a      	uxth	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4a50      	ldr	r2, [pc, #320]	; (8002380 <HAL_I2C_Master_Transmit+0x1f8>)
 800223e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002240:	8979      	ldrh	r1, [r7, #10]
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	6a3a      	ldr	r2, [r7, #32]
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f000 fbf0 	bl	8002a2c <I2C_MasterRequestWrite>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e08d      	b.n	8002372 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002256:	2300      	movs	r3, #0
 8002258:	613b      	str	r3, [r7, #16]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800226c:	e066      	b.n	800233c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	6a39      	ldr	r1, [r7, #32]
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f000 fe00 	bl	8002e78 <I2C_WaitOnTXEFlagUntilTimeout>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00d      	beq.n	800229a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	2b04      	cmp	r3, #4
 8002284:	d107      	bne.n	8002296 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002294:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e06b      	b.n	8002372 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229e:	781a      	ldrb	r2, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	3b01      	subs	r3, #1
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c2:	3b01      	subs	r3, #1
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d11b      	bne.n	8002310 <HAL_I2C_Master_Transmit+0x188>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d017      	beq.n	8002310 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	781a      	ldrb	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	1c5a      	adds	r2, r3, #1
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	3b01      	subs	r3, #1
 80022fe:	b29a      	uxth	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002308:	3b01      	subs	r3, #1
 800230a:	b29a      	uxth	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	6a39      	ldr	r1, [r7, #32]
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f000 fdf0 	bl	8002efa <I2C_WaitOnBTFFlagUntilTimeout>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00d      	beq.n	800233c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	2b04      	cmp	r3, #4
 8002326:	d107      	bne.n	8002338 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002336:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e01a      	b.n	8002372 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002340:	2b00      	cmp	r3, #0
 8002342:	d194      	bne.n	800226e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002352:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2220      	movs	r2, #32
 8002358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800236c:	2300      	movs	r3, #0
 800236e:	e000      	b.n	8002372 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002370:	2302      	movs	r3, #2
  }
}
 8002372:	4618      	mov	r0, r3
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	00100002 	.word	0x00100002
 8002380:	ffff0000 	.word	0xffff0000

08002384 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b08c      	sub	sp, #48	; 0x30
 8002388:	af02      	add	r7, sp, #8
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	607a      	str	r2, [r7, #4]
 800238e:	461a      	mov	r2, r3
 8002390:	460b      	mov	r3, r1
 8002392:	817b      	strh	r3, [r7, #10]
 8002394:	4613      	mov	r3, r2
 8002396:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002398:	f7ff fb00 	bl	800199c <HAL_GetTick>
 800239c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b20      	cmp	r3, #32
 80023a8:	f040 820b 	bne.w	80027c2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	2319      	movs	r3, #25
 80023b2:	2201      	movs	r2, #1
 80023b4:	497c      	ldr	r1, [pc, #496]	; (80025a8 <HAL_I2C_Master_Receive+0x224>)
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 fc88 	bl	8002ccc <I2C_WaitOnFlagUntilTimeout>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80023c2:	2302      	movs	r3, #2
 80023c4:	e1fe      	b.n	80027c4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d101      	bne.n	80023d4 <HAL_I2C_Master_Receive+0x50>
 80023d0:	2302      	movs	r3, #2
 80023d2:	e1f7      	b.n	80027c4 <HAL_I2C_Master_Receive+0x440>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d007      	beq.n	80023fa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f042 0201 	orr.w	r2, r2, #1
 80023f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002408:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2222      	movs	r2, #34	; 0x22
 800240e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2210      	movs	r2, #16
 8002416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	893a      	ldrh	r2, [r7, #8]
 800242a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002430:	b29a      	uxth	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	4a5c      	ldr	r2, [pc, #368]	; (80025ac <HAL_I2C_Master_Receive+0x228>)
 800243a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800243c:	8979      	ldrh	r1, [r7, #10]
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f000 fb74 	bl	8002b30 <I2C_MasterRequestRead>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e1b8      	b.n	80027c4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002456:	2b00      	cmp	r3, #0
 8002458:	d113      	bne.n	8002482 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800245a:	2300      	movs	r3, #0
 800245c:	623b      	str	r3, [r7, #32]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	623b      	str	r3, [r7, #32]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	623b      	str	r3, [r7, #32]
 800246e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	e18c      	b.n	800279c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002486:	2b01      	cmp	r3, #1
 8002488:	d11b      	bne.n	80024c2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002498:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	61fb      	str	r3, [r7, #28]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	61fb      	str	r3, [r7, #28]
 80024ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	e16c      	b.n	800279c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d11b      	bne.n	8002502 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024d8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ea:	2300      	movs	r3, #0
 80024ec:	61bb      	str	r3, [r7, #24]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	61bb      	str	r3, [r7, #24]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	61bb      	str	r3, [r7, #24]
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	e14c      	b.n	800279c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002510:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	617b      	str	r3, [r7, #20]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	617b      	str	r3, [r7, #20]
 8002526:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002528:	e138      	b.n	800279c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252e:	2b03      	cmp	r3, #3
 8002530:	f200 80f1 	bhi.w	8002716 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002538:	2b01      	cmp	r3, #1
 800253a:	d123      	bne.n	8002584 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800253c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800253e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f000 fd1b 	bl	8002f7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e139      	b.n	80027c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	691a      	ldr	r2, [r3, #16]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	1c5a      	adds	r2, r3, #1
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800256c:	3b01      	subs	r3, #1
 800256e:	b29a      	uxth	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002578:	b29b      	uxth	r3, r3
 800257a:	3b01      	subs	r3, #1
 800257c:	b29a      	uxth	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002582:	e10b      	b.n	800279c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002588:	2b02      	cmp	r3, #2
 800258a:	d14e      	bne.n	800262a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002592:	2200      	movs	r2, #0
 8002594:	4906      	ldr	r1, [pc, #24]	; (80025b0 <HAL_I2C_Master_Receive+0x22c>)
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f000 fb98 	bl	8002ccc <I2C_WaitOnFlagUntilTimeout>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d008      	beq.n	80025b4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e10e      	b.n	80027c4 <HAL_I2C_Master_Receive+0x440>
 80025a6:	bf00      	nop
 80025a8:	00100002 	.word	0x00100002
 80025ac:	ffff0000 	.word	0xffff0000
 80025b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	691a      	ldr	r2, [r3, #16]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	1c5a      	adds	r2, r3, #1
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e0:	3b01      	subs	r3, #1
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	691a      	ldr	r2, [r3, #16]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	1c5a      	adds	r2, r3, #1
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002612:	3b01      	subs	r3, #1
 8002614:	b29a      	uxth	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261e:	b29b      	uxth	r3, r3
 8002620:	3b01      	subs	r3, #1
 8002622:	b29a      	uxth	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002628:	e0b8      	b.n	800279c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002630:	2200      	movs	r2, #0
 8002632:	4966      	ldr	r1, [pc, #408]	; (80027cc <HAL_I2C_Master_Receive+0x448>)
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 fb49 	bl	8002ccc <I2C_WaitOnFlagUntilTimeout>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e0bf      	b.n	80027c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002652:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	691a      	ldr	r2, [r3, #16]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002666:	1c5a      	adds	r2, r3, #1
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002670:	3b01      	subs	r3, #1
 8002672:	b29a      	uxth	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267c:	b29b      	uxth	r3, r3
 800267e:	3b01      	subs	r3, #1
 8002680:	b29a      	uxth	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268c:	2200      	movs	r2, #0
 800268e:	494f      	ldr	r1, [pc, #316]	; (80027cc <HAL_I2C_Master_Receive+0x448>)
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 fb1b 	bl	8002ccc <I2C_WaitOnFlagUntilTimeout>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e091      	b.n	80027c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	691a      	ldr	r2, [r3, #16]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c2:	1c5a      	adds	r2, r3, #1
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026cc:	3b01      	subs	r3, #1
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d8:	b29b      	uxth	r3, r3
 80026da:	3b01      	subs	r3, #1
 80026dc:	b29a      	uxth	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	691a      	ldr	r2, [r3, #16]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ec:	b2d2      	uxtb	r2, r2
 80026ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f4:	1c5a      	adds	r2, r3, #1
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fe:	3b01      	subs	r3, #1
 8002700:	b29a      	uxth	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270a:	b29b      	uxth	r3, r3
 800270c:	3b01      	subs	r3, #1
 800270e:	b29a      	uxth	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002714:	e042      	b.n	800279c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002718:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 fc2e 	bl	8002f7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e04c      	b.n	80027c4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	691a      	ldr	r2, [r3, #16]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273c:	1c5a      	adds	r2, r3, #1
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002746:	3b01      	subs	r3, #1
 8002748:	b29a      	uxth	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002752:	b29b      	uxth	r3, r3
 8002754:	3b01      	subs	r3, #1
 8002756:	b29a      	uxth	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	f003 0304 	and.w	r3, r3, #4
 8002766:	2b04      	cmp	r3, #4
 8002768:	d118      	bne.n	800279c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	691a      	ldr	r2, [r3, #16]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	b2d2      	uxtb	r2, r2
 8002776:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277c:	1c5a      	adds	r2, r3, #1
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002786:	3b01      	subs	r3, #1
 8002788:	b29a      	uxth	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002792:	b29b      	uxth	r3, r3
 8002794:	3b01      	subs	r3, #1
 8002796:	b29a      	uxth	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f47f aec2 	bne.w	800252a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2220      	movs	r2, #32
 80027aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027be:	2300      	movs	r3, #0
 80027c0:	e000      	b.n	80027c4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80027c2:	2302      	movs	r3, #2
  }
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3728      	adds	r7, #40	; 0x28
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	00010004 	.word	0x00010004

080027d0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08a      	sub	sp, #40	; 0x28
 80027d4:	af02      	add	r7, sp, #8
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	607a      	str	r2, [r7, #4]
 80027da:	603b      	str	r3, [r7, #0]
 80027dc:	460b      	mov	r3, r1
 80027de:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80027e0:	f7ff f8dc 	bl	800199c <HAL_GetTick>
 80027e4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b20      	cmp	r3, #32
 80027f4:	f040 8111 	bne.w	8002a1a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	2319      	movs	r3, #25
 80027fe:	2201      	movs	r2, #1
 8002800:	4988      	ldr	r1, [pc, #544]	; (8002a24 <HAL_I2C_IsDeviceReady+0x254>)
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f000 fa62 	bl	8002ccc <I2C_WaitOnFlagUntilTimeout>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800280e:	2302      	movs	r3, #2
 8002810:	e104      	b.n	8002a1c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002818:	2b01      	cmp	r3, #1
 800281a:	d101      	bne.n	8002820 <HAL_I2C_IsDeviceReady+0x50>
 800281c:	2302      	movs	r3, #2
 800281e:	e0fd      	b.n	8002a1c <HAL_I2C_IsDeviceReady+0x24c>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b01      	cmp	r3, #1
 8002834:	d007      	beq.n	8002846 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f042 0201 	orr.w	r2, r2, #1
 8002844:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002854:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2224      	movs	r2, #36	; 0x24
 800285a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	4a70      	ldr	r2, [pc, #448]	; (8002a28 <HAL_I2C_IsDeviceReady+0x258>)
 8002868:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002878:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	2200      	movs	r2, #0
 8002882:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 fa20 	bl	8002ccc <I2C_WaitOnFlagUntilTimeout>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00d      	beq.n	80028ae <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028a0:	d103      	bne.n	80028aa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028a8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e0b6      	b.n	8002a1c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028ae:	897b      	ldrh	r3, [r7, #10]
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	461a      	mov	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028bc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80028be:	f7ff f86d 	bl	800199c <HAL_GetTick>
 80028c2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	bf0c      	ite	eq
 80028d2:	2301      	moveq	r3, #1
 80028d4:	2300      	movne	r3, #0
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028e8:	bf0c      	ite	eq
 80028ea:	2301      	moveq	r3, #1
 80028ec:	2300      	movne	r3, #0
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80028f2:	e025      	b.n	8002940 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028f4:	f7ff f852 	bl	800199c <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	429a      	cmp	r2, r3
 8002902:	d302      	bcc.n	800290a <HAL_I2C_IsDeviceReady+0x13a>
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d103      	bne.n	8002912 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	22a0      	movs	r2, #160	; 0xa0
 800290e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b02      	cmp	r3, #2
 800291e:	bf0c      	ite	eq
 8002920:	2301      	moveq	r3, #1
 8002922:	2300      	movne	r3, #0
 8002924:	b2db      	uxtb	r3, r3
 8002926:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002936:	bf0c      	ite	eq
 8002938:	2301      	moveq	r3, #1
 800293a:	2300      	movne	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2ba0      	cmp	r3, #160	; 0xa0
 800294a:	d005      	beq.n	8002958 <HAL_I2C_IsDeviceReady+0x188>
 800294c:	7dfb      	ldrb	r3, [r7, #23]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d102      	bne.n	8002958 <HAL_I2C_IsDeviceReady+0x188>
 8002952:	7dbb      	ldrb	r3, [r7, #22]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0cd      	beq.n	80028f4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2220      	movs	r2, #32
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b02      	cmp	r3, #2
 800296c:	d129      	bne.n	80029c2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800297c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800297e:	2300      	movs	r3, #0
 8002980:	613b      	str	r3, [r7, #16]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	613b      	str	r3, [r7, #16]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	613b      	str	r3, [r7, #16]
 8002992:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	2319      	movs	r3, #25
 800299a:	2201      	movs	r2, #1
 800299c:	4921      	ldr	r1, [pc, #132]	; (8002a24 <HAL_I2C_IsDeviceReady+0x254>)
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 f994 	bl	8002ccc <I2C_WaitOnFlagUntilTimeout>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e036      	b.n	8002a1c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2220      	movs	r2, #32
 80029b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80029be:	2300      	movs	r3, #0
 80029c0:	e02c      	b.n	8002a1c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029d0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029da:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	2319      	movs	r3, #25
 80029e2:	2201      	movs	r2, #1
 80029e4:	490f      	ldr	r1, [pc, #60]	; (8002a24 <HAL_I2C_IsDeviceReady+0x254>)
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f000 f970 	bl	8002ccc <I2C_WaitOnFlagUntilTimeout>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e012      	b.n	8002a1c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	3301      	adds	r3, #1
 80029fa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	f4ff af32 	bcc.w	800286a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2220      	movs	r2, #32
 8002a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002a1a:	2302      	movs	r3, #2
  }
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3720      	adds	r7, #32
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	00100002 	.word	0x00100002
 8002a28:	ffff0000 	.word	0xffff0000

08002a2c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b088      	sub	sp, #32
 8002a30:	af02      	add	r7, sp, #8
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	607a      	str	r2, [r7, #4]
 8002a36:	603b      	str	r3, [r7, #0]
 8002a38:	460b      	mov	r3, r1
 8002a3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a40:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	d006      	beq.n	8002a56 <I2C_MasterRequestWrite+0x2a>
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d003      	beq.n	8002a56 <I2C_MasterRequestWrite+0x2a>
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a54:	d108      	bne.n	8002a68 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	e00b      	b.n	8002a80 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6c:	2b12      	cmp	r3, #18
 8002a6e:	d107      	bne.n	8002a80 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f000 f91d 	bl	8002ccc <I2C_WaitOnFlagUntilTimeout>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00d      	beq.n	8002ab4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aa6:	d103      	bne.n	8002ab0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e035      	b.n	8002b20 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002abc:	d108      	bne.n	8002ad0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002abe:	897b      	ldrh	r3, [r7, #10]
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002acc:	611a      	str	r2, [r3, #16]
 8002ace:	e01b      	b.n	8002b08 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ad0:	897b      	ldrh	r3, [r7, #10]
 8002ad2:	11db      	asrs	r3, r3, #7
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	f003 0306 	and.w	r3, r3, #6
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	f063 030f 	orn	r3, r3, #15
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	490e      	ldr	r1, [pc, #56]	; (8002b28 <I2C_MasterRequestWrite+0xfc>)
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 f943 	bl	8002d7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e010      	b.n	8002b20 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002afe:	897b      	ldrh	r3, [r7, #10]
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	4907      	ldr	r1, [pc, #28]	; (8002b2c <I2C_MasterRequestWrite+0x100>)
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 f933 	bl	8002d7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	00010008 	.word	0x00010008
 8002b2c:	00010002 	.word	0x00010002

08002b30 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b088      	sub	sp, #32
 8002b34:	af02      	add	r7, sp, #8
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	607a      	str	r2, [r7, #4]
 8002b3a:	603b      	str	r3, [r7, #0]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b44:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b54:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	2b08      	cmp	r3, #8
 8002b5a:	d006      	beq.n	8002b6a <I2C_MasterRequestRead+0x3a>
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d003      	beq.n	8002b6a <I2C_MasterRequestRead+0x3a>
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b68:	d108      	bne.n	8002b7c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	e00b      	b.n	8002b94 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b80:	2b11      	cmp	r3, #17
 8002b82:	d107      	bne.n	8002b94 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f000 f893 	bl	8002ccc <I2C_WaitOnFlagUntilTimeout>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00d      	beq.n	8002bc8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bba:	d103      	bne.n	8002bc4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e079      	b.n	8002cbc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bd0:	d108      	bne.n	8002be4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002bd2:	897b      	ldrh	r3, [r7, #10]
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	f043 0301 	orr.w	r3, r3, #1
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	611a      	str	r2, [r3, #16]
 8002be2:	e05f      	b.n	8002ca4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002be4:	897b      	ldrh	r3, [r7, #10]
 8002be6:	11db      	asrs	r3, r3, #7
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	f003 0306 	and.w	r3, r3, #6
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	f063 030f 	orn	r3, r3, #15
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	4930      	ldr	r1, [pc, #192]	; (8002cc4 <I2C_MasterRequestRead+0x194>)
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 f8b9 	bl	8002d7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e054      	b.n	8002cbc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c12:	897b      	ldrh	r3, [r7, #10]
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	4929      	ldr	r1, [pc, #164]	; (8002cc8 <I2C_MasterRequestRead+0x198>)
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 f8a9 	bl	8002d7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e044      	b.n	8002cbc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c32:	2300      	movs	r3, #0
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	613b      	str	r3, [r7, #16]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	613b      	str	r3, [r7, #16]
 8002c46:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c56:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f000 f831 	bl	8002ccc <I2C_WaitOnFlagUntilTimeout>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00d      	beq.n	8002c8c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c7e:	d103      	bne.n	8002c88 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c86:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e017      	b.n	8002cbc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002c8c:	897b      	ldrh	r3, [r7, #10]
 8002c8e:	11db      	asrs	r3, r3, #7
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	f003 0306 	and.w	r3, r3, #6
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	f063 030e 	orn	r3, r3, #14
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	4907      	ldr	r1, [pc, #28]	; (8002cc8 <I2C_MasterRequestRead+0x198>)
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 f865 	bl	8002d7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	00010008 	.word	0x00010008
 8002cc8:	00010002 	.word	0x00010002

08002ccc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	603b      	str	r3, [r7, #0]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cdc:	e025      	b.n	8002d2a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce4:	d021      	beq.n	8002d2a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ce6:	f7fe fe59 	bl	800199c <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d302      	bcc.n	8002cfc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d116      	bne.n	8002d2a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2220      	movs	r2, #32
 8002d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	f043 0220 	orr.w	r2, r3, #32
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e023      	b.n	8002d72 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	0c1b      	lsrs	r3, r3, #16
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d10d      	bne.n	8002d50 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	43da      	mvns	r2, r3
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	bf0c      	ite	eq
 8002d46:	2301      	moveq	r3, #1
 8002d48:	2300      	movne	r3, #0
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	e00c      	b.n	8002d6a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	43da      	mvns	r2, r3
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	bf0c      	ite	eq
 8002d62:	2301      	moveq	r3, #1
 8002d64:	2300      	movne	r3, #0
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	461a      	mov	r2, r3
 8002d6a:	79fb      	ldrb	r3, [r7, #7]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d0b6      	beq.n	8002cde <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b084      	sub	sp, #16
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	60f8      	str	r0, [r7, #12]
 8002d82:	60b9      	str	r1, [r7, #8]
 8002d84:	607a      	str	r2, [r7, #4]
 8002d86:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d88:	e051      	b.n	8002e2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d98:	d123      	bne.n	8002de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002da8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002db2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	f043 0204 	orr.w	r2, r3, #4
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e046      	b.n	8002e70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de8:	d021      	beq.n	8002e2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dea:	f7fe fdd7 	bl	800199c <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d302      	bcc.n	8002e00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d116      	bne.n	8002e2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2220      	movs	r2, #32
 8002e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	f043 0220 	orr.w	r2, r3, #32
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e020      	b.n	8002e70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	0c1b      	lsrs	r3, r3, #16
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d10c      	bne.n	8002e52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	43da      	mvns	r2, r3
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	4013      	ands	r3, r2
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	bf14      	ite	ne
 8002e4a:	2301      	movne	r3, #1
 8002e4c:	2300      	moveq	r3, #0
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	e00b      	b.n	8002e6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	43da      	mvns	r2, r3
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	bf14      	ite	ne
 8002e64:	2301      	movne	r3, #1
 8002e66:	2300      	moveq	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d18d      	bne.n	8002d8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e84:	e02d      	b.n	8002ee2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 f8ce 	bl	8003028 <I2C_IsAcknowledgeFailed>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e02d      	b.n	8002ef2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9c:	d021      	beq.n	8002ee2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e9e:	f7fe fd7d 	bl	800199c <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	68ba      	ldr	r2, [r7, #8]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d302      	bcc.n	8002eb4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d116      	bne.n	8002ee2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f043 0220 	orr.w	r2, r3, #32
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e007      	b.n	8002ef2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eec:	2b80      	cmp	r3, #128	; 0x80
 8002eee:	d1ca      	bne.n	8002e86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b084      	sub	sp, #16
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	60f8      	str	r0, [r7, #12]
 8002f02:	60b9      	str	r1, [r7, #8]
 8002f04:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f06:	e02d      	b.n	8002f64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f000 f88d 	bl	8003028 <I2C_IsAcknowledgeFailed>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e02d      	b.n	8002f74 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1e:	d021      	beq.n	8002f64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f20:	f7fe fd3c 	bl	800199c <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d302      	bcc.n	8002f36 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d116      	bne.n	8002f64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f50:	f043 0220 	orr.w	r2, r3, #32
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e007      	b.n	8002f74 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	f003 0304 	and.w	r3, r3, #4
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d1ca      	bne.n	8002f08 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f88:	e042      	b.n	8003010 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	f003 0310 	and.w	r3, r3, #16
 8002f94:	2b10      	cmp	r3, #16
 8002f96:	d119      	bne.n	8002fcc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f06f 0210 	mvn.w	r2, #16
 8002fa0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2220      	movs	r2, #32
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e029      	b.n	8003020 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fcc:	f7fe fce6 	bl	800199c <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d302      	bcc.n	8002fe2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d116      	bne.n	8003010 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2220      	movs	r2, #32
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffc:	f043 0220 	orr.w	r2, r3, #32
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e007      	b.n	8003020 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301a:	2b40      	cmp	r3, #64	; 0x40
 800301c:	d1b5      	bne.n	8002f8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800303a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800303e:	d11b      	bne.n	8003078 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003048:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003064:	f043 0204 	orr.w	r2, r3, #4
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e000      	b.n	800307a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
	...

08003088 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e0cc      	b.n	8003236 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800309c:	4b68      	ldr	r3, [pc, #416]	; (8003240 <HAL_RCC_ClockConfig+0x1b8>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 030f 	and.w	r3, r3, #15
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d90c      	bls.n	80030c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030aa:	4b65      	ldr	r3, [pc, #404]	; (8003240 <HAL_RCC_ClockConfig+0x1b8>)
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b2:	4b63      	ldr	r3, [pc, #396]	; (8003240 <HAL_RCC_ClockConfig+0x1b8>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d001      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e0b8      	b.n	8003236 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d020      	beq.n	8003112 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d005      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030dc:	4b59      	ldr	r3, [pc, #356]	; (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	4a58      	ldr	r2, [pc, #352]	; (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 80030e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0308 	and.w	r3, r3, #8
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d005      	beq.n	8003100 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030f4:	4b53      	ldr	r3, [pc, #332]	; (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	4a52      	ldr	r2, [pc, #328]	; (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 80030fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003100:	4b50      	ldr	r3, [pc, #320]	; (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	494d      	ldr	r1, [pc, #308]	; (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	4313      	orrs	r3, r2
 8003110:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b00      	cmp	r3, #0
 800311c:	d044      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d107      	bne.n	8003136 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003126:	4b47      	ldr	r3, [pc, #284]	; (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d119      	bne.n	8003166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e07f      	b.n	8003236 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b02      	cmp	r3, #2
 800313c:	d003      	beq.n	8003146 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003142:	2b03      	cmp	r3, #3
 8003144:	d107      	bne.n	8003156 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003146:	4b3f      	ldr	r3, [pc, #252]	; (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d109      	bne.n	8003166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e06f      	b.n	8003236 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003156:	4b3b      	ldr	r3, [pc, #236]	; (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e067      	b.n	8003236 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003166:	4b37      	ldr	r3, [pc, #220]	; (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f023 0203 	bic.w	r2, r3, #3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	4934      	ldr	r1, [pc, #208]	; (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 8003174:	4313      	orrs	r3, r2
 8003176:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003178:	f7fe fc10 	bl	800199c <HAL_GetTick>
 800317c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317e:	e00a      	b.n	8003196 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003180:	f7fe fc0c 	bl	800199c <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	f241 3288 	movw	r2, #5000	; 0x1388
 800318e:	4293      	cmp	r3, r2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e04f      	b.n	8003236 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003196:	4b2b      	ldr	r3, [pc, #172]	; (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 020c 	and.w	r2, r3, #12
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d1eb      	bne.n	8003180 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031a8:	4b25      	ldr	r3, [pc, #148]	; (8003240 <HAL_RCC_ClockConfig+0x1b8>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 030f 	and.w	r3, r3, #15
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d20c      	bcs.n	80031d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b6:	4b22      	ldr	r3, [pc, #136]	; (8003240 <HAL_RCC_ClockConfig+0x1b8>)
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031be:	4b20      	ldr	r3, [pc, #128]	; (8003240 <HAL_RCC_ClockConfig+0x1b8>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d001      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e032      	b.n	8003236 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d008      	beq.n	80031ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031dc:	4b19      	ldr	r3, [pc, #100]	; (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	4916      	ldr	r1, [pc, #88]	; (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0308 	and.w	r3, r3, #8
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d009      	beq.n	800320e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031fa:	4b12      	ldr	r3, [pc, #72]	; (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	490e      	ldr	r1, [pc, #56]	; (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 800320a:	4313      	orrs	r3, r2
 800320c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800320e:	f000 f855 	bl	80032bc <HAL_RCC_GetSysClockFreq>
 8003212:	4602      	mov	r2, r0
 8003214:	4b0b      	ldr	r3, [pc, #44]	; (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	091b      	lsrs	r3, r3, #4
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	490a      	ldr	r1, [pc, #40]	; (8003248 <HAL_RCC_ClockConfig+0x1c0>)
 8003220:	5ccb      	ldrb	r3, [r1, r3]
 8003222:	fa22 f303 	lsr.w	r3, r2, r3
 8003226:	4a09      	ldr	r2, [pc, #36]	; (800324c <HAL_RCC_ClockConfig+0x1c4>)
 8003228:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800322a:	4b09      	ldr	r3, [pc, #36]	; (8003250 <HAL_RCC_ClockConfig+0x1c8>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f7fe fb70 	bl	8001914 <HAL_InitTick>

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40023c00 	.word	0x40023c00
 8003244:	40023800 	.word	0x40023800
 8003248:	0800a324 	.word	0x0800a324
 800324c:	20000008 	.word	0x20000008
 8003250:	2000000c 	.word	0x2000000c

08003254 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003258:	4b03      	ldr	r3, [pc, #12]	; (8003268 <HAL_RCC_GetHCLKFreq+0x14>)
 800325a:	681b      	ldr	r3, [r3, #0]
}
 800325c:	4618      	mov	r0, r3
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	20000008 	.word	0x20000008

0800326c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003270:	f7ff fff0 	bl	8003254 <HAL_RCC_GetHCLKFreq>
 8003274:	4602      	mov	r2, r0
 8003276:	4b05      	ldr	r3, [pc, #20]	; (800328c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	0a9b      	lsrs	r3, r3, #10
 800327c:	f003 0307 	and.w	r3, r3, #7
 8003280:	4903      	ldr	r1, [pc, #12]	; (8003290 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003282:	5ccb      	ldrb	r3, [r1, r3]
 8003284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003288:	4618      	mov	r0, r3
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40023800 	.word	0x40023800
 8003290:	0800a334 	.word	0x0800a334

08003294 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003298:	f7ff ffdc 	bl	8003254 <HAL_RCC_GetHCLKFreq>
 800329c:	4602      	mov	r2, r0
 800329e:	4b05      	ldr	r3, [pc, #20]	; (80032b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	0b5b      	lsrs	r3, r3, #13
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	4903      	ldr	r1, [pc, #12]	; (80032b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032aa:	5ccb      	ldrb	r3, [r1, r3]
 80032ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40023800 	.word	0x40023800
 80032b8:	0800a334 	.word	0x0800a334

080032bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032c0:	b0a6      	sub	sp, #152	; 0x98
 80032c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80032c4:	2300      	movs	r3, #0
 80032c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80032d0:	2300      	movs	r3, #0
 80032d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80032dc:	2300      	movs	r3, #0
 80032de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032e2:	4bc8      	ldr	r3, [pc, #800]	; (8003604 <HAL_RCC_GetSysClockFreq+0x348>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 030c 	and.w	r3, r3, #12
 80032ea:	2b0c      	cmp	r3, #12
 80032ec:	f200 817e 	bhi.w	80035ec <HAL_RCC_GetSysClockFreq+0x330>
 80032f0:	a201      	add	r2, pc, #4	; (adr r2, 80032f8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80032f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f6:	bf00      	nop
 80032f8:	0800332d 	.word	0x0800332d
 80032fc:	080035ed 	.word	0x080035ed
 8003300:	080035ed 	.word	0x080035ed
 8003304:	080035ed 	.word	0x080035ed
 8003308:	08003335 	.word	0x08003335
 800330c:	080035ed 	.word	0x080035ed
 8003310:	080035ed 	.word	0x080035ed
 8003314:	080035ed 	.word	0x080035ed
 8003318:	0800333d 	.word	0x0800333d
 800331c:	080035ed 	.word	0x080035ed
 8003320:	080035ed 	.word	0x080035ed
 8003324:	080035ed 	.word	0x080035ed
 8003328:	080034a7 	.word	0x080034a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800332c:	4bb6      	ldr	r3, [pc, #728]	; (8003608 <HAL_RCC_GetSysClockFreq+0x34c>)
 800332e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8003332:	e15f      	b.n	80035f4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003334:	4bb5      	ldr	r3, [pc, #724]	; (800360c <HAL_RCC_GetSysClockFreq+0x350>)
 8003336:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800333a:	e15b      	b.n	80035f4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800333c:	4bb1      	ldr	r3, [pc, #708]	; (8003604 <HAL_RCC_GetSysClockFreq+0x348>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003344:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003348:	4bae      	ldr	r3, [pc, #696]	; (8003604 <HAL_RCC_GetSysClockFreq+0x348>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d031      	beq.n	80033b8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003354:	4bab      	ldr	r3, [pc, #684]	; (8003604 <HAL_RCC_GetSysClockFreq+0x348>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	099b      	lsrs	r3, r3, #6
 800335a:	2200      	movs	r2, #0
 800335c:	66bb      	str	r3, [r7, #104]	; 0x68
 800335e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003360:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003366:	663b      	str	r3, [r7, #96]	; 0x60
 8003368:	2300      	movs	r3, #0
 800336a:	667b      	str	r3, [r7, #100]	; 0x64
 800336c:	4ba7      	ldr	r3, [pc, #668]	; (800360c <HAL_RCC_GetSysClockFreq+0x350>)
 800336e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003372:	462a      	mov	r2, r5
 8003374:	fb03 f202 	mul.w	r2, r3, r2
 8003378:	2300      	movs	r3, #0
 800337a:	4621      	mov	r1, r4
 800337c:	fb01 f303 	mul.w	r3, r1, r3
 8003380:	4413      	add	r3, r2
 8003382:	4aa2      	ldr	r2, [pc, #648]	; (800360c <HAL_RCC_GetSysClockFreq+0x350>)
 8003384:	4621      	mov	r1, r4
 8003386:	fba1 1202 	umull	r1, r2, r1, r2
 800338a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800338c:	460a      	mov	r2, r1
 800338e:	67ba      	str	r2, [r7, #120]	; 0x78
 8003390:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003392:	4413      	add	r3, r2
 8003394:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003396:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800339a:	2200      	movs	r2, #0
 800339c:	65bb      	str	r3, [r7, #88]	; 0x58
 800339e:	65fa      	str	r2, [r7, #92]	; 0x5c
 80033a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80033a4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80033a8:	f7fd fcde 	bl	8000d68 <__aeabi_uldivmod>
 80033ac:	4602      	mov	r2, r0
 80033ae:	460b      	mov	r3, r1
 80033b0:	4613      	mov	r3, r2
 80033b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80033b6:	e064      	b.n	8003482 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033b8:	4b92      	ldr	r3, [pc, #584]	; (8003604 <HAL_RCC_GetSysClockFreq+0x348>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	099b      	lsrs	r3, r3, #6
 80033be:	2200      	movs	r2, #0
 80033c0:	653b      	str	r3, [r7, #80]	; 0x50
 80033c2:	657a      	str	r2, [r7, #84]	; 0x54
 80033c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80033cc:	2300      	movs	r3, #0
 80033ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033d0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80033d4:	4622      	mov	r2, r4
 80033d6:	462b      	mov	r3, r5
 80033d8:	f04f 0000 	mov.w	r0, #0
 80033dc:	f04f 0100 	mov.w	r1, #0
 80033e0:	0159      	lsls	r1, r3, #5
 80033e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033e6:	0150      	lsls	r0, r2, #5
 80033e8:	4602      	mov	r2, r0
 80033ea:	460b      	mov	r3, r1
 80033ec:	4621      	mov	r1, r4
 80033ee:	1a51      	subs	r1, r2, r1
 80033f0:	6139      	str	r1, [r7, #16]
 80033f2:	4629      	mov	r1, r5
 80033f4:	eb63 0301 	sbc.w	r3, r3, r1
 80033f8:	617b      	str	r3, [r7, #20]
 80033fa:	f04f 0200 	mov.w	r2, #0
 80033fe:	f04f 0300 	mov.w	r3, #0
 8003402:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003406:	4659      	mov	r1, fp
 8003408:	018b      	lsls	r3, r1, #6
 800340a:	4651      	mov	r1, sl
 800340c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003410:	4651      	mov	r1, sl
 8003412:	018a      	lsls	r2, r1, #6
 8003414:	4651      	mov	r1, sl
 8003416:	ebb2 0801 	subs.w	r8, r2, r1
 800341a:	4659      	mov	r1, fp
 800341c:	eb63 0901 	sbc.w	r9, r3, r1
 8003420:	f04f 0200 	mov.w	r2, #0
 8003424:	f04f 0300 	mov.w	r3, #0
 8003428:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800342c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003430:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003434:	4690      	mov	r8, r2
 8003436:	4699      	mov	r9, r3
 8003438:	4623      	mov	r3, r4
 800343a:	eb18 0303 	adds.w	r3, r8, r3
 800343e:	60bb      	str	r3, [r7, #8]
 8003440:	462b      	mov	r3, r5
 8003442:	eb49 0303 	adc.w	r3, r9, r3
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	f04f 0200 	mov.w	r2, #0
 800344c:	f04f 0300 	mov.w	r3, #0
 8003450:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003454:	4629      	mov	r1, r5
 8003456:	028b      	lsls	r3, r1, #10
 8003458:	4621      	mov	r1, r4
 800345a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800345e:	4621      	mov	r1, r4
 8003460:	028a      	lsls	r2, r1, #10
 8003462:	4610      	mov	r0, r2
 8003464:	4619      	mov	r1, r3
 8003466:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800346a:	2200      	movs	r2, #0
 800346c:	643b      	str	r3, [r7, #64]	; 0x40
 800346e:	647a      	str	r2, [r7, #68]	; 0x44
 8003470:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003474:	f7fd fc78 	bl	8000d68 <__aeabi_uldivmod>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	4613      	mov	r3, r2
 800347e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003482:	4b60      	ldr	r3, [pc, #384]	; (8003604 <HAL_RCC_GetSysClockFreq+0x348>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	0c1b      	lsrs	r3, r3, #16
 8003488:	f003 0303 	and.w	r3, r3, #3
 800348c:	3301      	adds	r3, #1
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8003494:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003498:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800349c:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80034a4:	e0a6      	b.n	80035f4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034a6:	4b57      	ldr	r3, [pc, #348]	; (8003604 <HAL_RCC_GetSysClockFreq+0x348>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034b2:	4b54      	ldr	r3, [pc, #336]	; (8003604 <HAL_RCC_GetSysClockFreq+0x348>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d02a      	beq.n	8003514 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034be:	4b51      	ldr	r3, [pc, #324]	; (8003604 <HAL_RCC_GetSysClockFreq+0x348>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	099b      	lsrs	r3, r3, #6
 80034c4:	2200      	movs	r2, #0
 80034c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80034c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80034ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80034d0:	2100      	movs	r1, #0
 80034d2:	4b4e      	ldr	r3, [pc, #312]	; (800360c <HAL_RCC_GetSysClockFreq+0x350>)
 80034d4:	fb03 f201 	mul.w	r2, r3, r1
 80034d8:	2300      	movs	r3, #0
 80034da:	fb00 f303 	mul.w	r3, r0, r3
 80034de:	4413      	add	r3, r2
 80034e0:	4a4a      	ldr	r2, [pc, #296]	; (800360c <HAL_RCC_GetSysClockFreq+0x350>)
 80034e2:	fba0 1202 	umull	r1, r2, r0, r2
 80034e6:	677a      	str	r2, [r7, #116]	; 0x74
 80034e8:	460a      	mov	r2, r1
 80034ea:	673a      	str	r2, [r7, #112]	; 0x70
 80034ec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80034ee:	4413      	add	r3, r2
 80034f0:	677b      	str	r3, [r7, #116]	; 0x74
 80034f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034f6:	2200      	movs	r2, #0
 80034f8:	633b      	str	r3, [r7, #48]	; 0x30
 80034fa:	637a      	str	r2, [r7, #52]	; 0x34
 80034fc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003500:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003504:	f7fd fc30 	bl	8000d68 <__aeabi_uldivmod>
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	4613      	mov	r3, r2
 800350e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003512:	e05b      	b.n	80035cc <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003514:	4b3b      	ldr	r3, [pc, #236]	; (8003604 <HAL_RCC_GetSysClockFreq+0x348>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	099b      	lsrs	r3, r3, #6
 800351a:	2200      	movs	r2, #0
 800351c:	62bb      	str	r3, [r7, #40]	; 0x28
 800351e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003526:	623b      	str	r3, [r7, #32]
 8003528:	2300      	movs	r3, #0
 800352a:	627b      	str	r3, [r7, #36]	; 0x24
 800352c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003530:	4642      	mov	r2, r8
 8003532:	464b      	mov	r3, r9
 8003534:	f04f 0000 	mov.w	r0, #0
 8003538:	f04f 0100 	mov.w	r1, #0
 800353c:	0159      	lsls	r1, r3, #5
 800353e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003542:	0150      	lsls	r0, r2, #5
 8003544:	4602      	mov	r2, r0
 8003546:	460b      	mov	r3, r1
 8003548:	4641      	mov	r1, r8
 800354a:	ebb2 0a01 	subs.w	sl, r2, r1
 800354e:	4649      	mov	r1, r9
 8003550:	eb63 0b01 	sbc.w	fp, r3, r1
 8003554:	f04f 0200 	mov.w	r2, #0
 8003558:	f04f 0300 	mov.w	r3, #0
 800355c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003560:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003564:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003568:	ebb2 040a 	subs.w	r4, r2, sl
 800356c:	eb63 050b 	sbc.w	r5, r3, fp
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	00eb      	lsls	r3, r5, #3
 800357a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800357e:	00e2      	lsls	r2, r4, #3
 8003580:	4614      	mov	r4, r2
 8003582:	461d      	mov	r5, r3
 8003584:	4643      	mov	r3, r8
 8003586:	18e3      	adds	r3, r4, r3
 8003588:	603b      	str	r3, [r7, #0]
 800358a:	464b      	mov	r3, r9
 800358c:	eb45 0303 	adc.w	r3, r5, r3
 8003590:	607b      	str	r3, [r7, #4]
 8003592:	f04f 0200 	mov.w	r2, #0
 8003596:	f04f 0300 	mov.w	r3, #0
 800359a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800359e:	4629      	mov	r1, r5
 80035a0:	028b      	lsls	r3, r1, #10
 80035a2:	4621      	mov	r1, r4
 80035a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035a8:	4621      	mov	r1, r4
 80035aa:	028a      	lsls	r2, r1, #10
 80035ac:	4610      	mov	r0, r2
 80035ae:	4619      	mov	r1, r3
 80035b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035b4:	2200      	movs	r2, #0
 80035b6:	61bb      	str	r3, [r7, #24]
 80035b8:	61fa      	str	r2, [r7, #28]
 80035ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035be:	f7fd fbd3 	bl	8000d68 <__aeabi_uldivmod>
 80035c2:	4602      	mov	r2, r0
 80035c4:	460b      	mov	r3, r1
 80035c6:	4613      	mov	r3, r2
 80035c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80035cc:	4b0d      	ldr	r3, [pc, #52]	; (8003604 <HAL_RCC_GetSysClockFreq+0x348>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	0f1b      	lsrs	r3, r3, #28
 80035d2:	f003 0307 	and.w	r3, r3, #7
 80035d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80035da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80035de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80035e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80035ea:	e003      	b.n	80035f4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035ec:	4b06      	ldr	r3, [pc, #24]	; (8003608 <HAL_RCC_GetSysClockFreq+0x34c>)
 80035ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80035f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3798      	adds	r7, #152	; 0x98
 80035fc:	46bd      	mov	sp, r7
 80035fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003602:	bf00      	nop
 8003604:	40023800 	.word	0x40023800
 8003608:	00f42400 	.word	0x00f42400
 800360c:	017d7840 	.word	0x017d7840

08003610 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e28d      	b.n	8003b3e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	f000 8083 	beq.w	8003736 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003630:	4b94      	ldr	r3, [pc, #592]	; (8003884 <HAL_RCC_OscConfig+0x274>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f003 030c 	and.w	r3, r3, #12
 8003638:	2b04      	cmp	r3, #4
 800363a:	d019      	beq.n	8003670 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800363c:	4b91      	ldr	r3, [pc, #580]	; (8003884 <HAL_RCC_OscConfig+0x274>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003644:	2b08      	cmp	r3, #8
 8003646:	d106      	bne.n	8003656 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003648:	4b8e      	ldr	r3, [pc, #568]	; (8003884 <HAL_RCC_OscConfig+0x274>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003650:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003654:	d00c      	beq.n	8003670 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003656:	4b8b      	ldr	r3, [pc, #556]	; (8003884 <HAL_RCC_OscConfig+0x274>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800365e:	2b0c      	cmp	r3, #12
 8003660:	d112      	bne.n	8003688 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003662:	4b88      	ldr	r3, [pc, #544]	; (8003884 <HAL_RCC_OscConfig+0x274>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800366a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800366e:	d10b      	bne.n	8003688 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003670:	4b84      	ldr	r3, [pc, #528]	; (8003884 <HAL_RCC_OscConfig+0x274>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d05b      	beq.n	8003734 <HAL_RCC_OscConfig+0x124>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d157      	bne.n	8003734 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e25a      	b.n	8003b3e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003690:	d106      	bne.n	80036a0 <HAL_RCC_OscConfig+0x90>
 8003692:	4b7c      	ldr	r3, [pc, #496]	; (8003884 <HAL_RCC_OscConfig+0x274>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a7b      	ldr	r2, [pc, #492]	; (8003884 <HAL_RCC_OscConfig+0x274>)
 8003698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	e01d      	b.n	80036dc <HAL_RCC_OscConfig+0xcc>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036a8:	d10c      	bne.n	80036c4 <HAL_RCC_OscConfig+0xb4>
 80036aa:	4b76      	ldr	r3, [pc, #472]	; (8003884 <HAL_RCC_OscConfig+0x274>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a75      	ldr	r2, [pc, #468]	; (8003884 <HAL_RCC_OscConfig+0x274>)
 80036b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	4b73      	ldr	r3, [pc, #460]	; (8003884 <HAL_RCC_OscConfig+0x274>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a72      	ldr	r2, [pc, #456]	; (8003884 <HAL_RCC_OscConfig+0x274>)
 80036bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	e00b      	b.n	80036dc <HAL_RCC_OscConfig+0xcc>
 80036c4:	4b6f      	ldr	r3, [pc, #444]	; (8003884 <HAL_RCC_OscConfig+0x274>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a6e      	ldr	r2, [pc, #440]	; (8003884 <HAL_RCC_OscConfig+0x274>)
 80036ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ce:	6013      	str	r3, [r2, #0]
 80036d0:	4b6c      	ldr	r3, [pc, #432]	; (8003884 <HAL_RCC_OscConfig+0x274>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a6b      	ldr	r2, [pc, #428]	; (8003884 <HAL_RCC_OscConfig+0x274>)
 80036d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d013      	beq.n	800370c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e4:	f7fe f95a 	bl	800199c <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036ec:	f7fe f956 	bl	800199c <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b64      	cmp	r3, #100	; 0x64
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e21f      	b.n	8003b3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036fe:	4b61      	ldr	r3, [pc, #388]	; (8003884 <HAL_RCC_OscConfig+0x274>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0f0      	beq.n	80036ec <HAL_RCC_OscConfig+0xdc>
 800370a:	e014      	b.n	8003736 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370c:	f7fe f946 	bl	800199c <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003714:	f7fe f942 	bl	800199c <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b64      	cmp	r3, #100	; 0x64
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e20b      	b.n	8003b3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003726:	4b57      	ldr	r3, [pc, #348]	; (8003884 <HAL_RCC_OscConfig+0x274>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f0      	bne.n	8003714 <HAL_RCC_OscConfig+0x104>
 8003732:	e000      	b.n	8003736 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d06f      	beq.n	8003822 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003742:	4b50      	ldr	r3, [pc, #320]	; (8003884 <HAL_RCC_OscConfig+0x274>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 030c 	and.w	r3, r3, #12
 800374a:	2b00      	cmp	r3, #0
 800374c:	d017      	beq.n	800377e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800374e:	4b4d      	ldr	r3, [pc, #308]	; (8003884 <HAL_RCC_OscConfig+0x274>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003756:	2b08      	cmp	r3, #8
 8003758:	d105      	bne.n	8003766 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800375a:	4b4a      	ldr	r3, [pc, #296]	; (8003884 <HAL_RCC_OscConfig+0x274>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00b      	beq.n	800377e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003766:	4b47      	ldr	r3, [pc, #284]	; (8003884 <HAL_RCC_OscConfig+0x274>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800376e:	2b0c      	cmp	r3, #12
 8003770:	d11c      	bne.n	80037ac <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003772:	4b44      	ldr	r3, [pc, #272]	; (8003884 <HAL_RCC_OscConfig+0x274>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d116      	bne.n	80037ac <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800377e:	4b41      	ldr	r3, [pc, #260]	; (8003884 <HAL_RCC_OscConfig+0x274>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d005      	beq.n	8003796 <HAL_RCC_OscConfig+0x186>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d001      	beq.n	8003796 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e1d3      	b.n	8003b3e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003796:	4b3b      	ldr	r3, [pc, #236]	; (8003884 <HAL_RCC_OscConfig+0x274>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	4937      	ldr	r1, [pc, #220]	; (8003884 <HAL_RCC_OscConfig+0x274>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037aa:	e03a      	b.n	8003822 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d020      	beq.n	80037f6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037b4:	4b34      	ldr	r3, [pc, #208]	; (8003888 <HAL_RCC_OscConfig+0x278>)
 80037b6:	2201      	movs	r2, #1
 80037b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ba:	f7fe f8ef 	bl	800199c <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037c2:	f7fe f8eb 	bl	800199c <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e1b4      	b.n	8003b3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d4:	4b2b      	ldr	r3, [pc, #172]	; (8003884 <HAL_RCC_OscConfig+0x274>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0f0      	beq.n	80037c2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e0:	4b28      	ldr	r3, [pc, #160]	; (8003884 <HAL_RCC_OscConfig+0x274>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	4925      	ldr	r1, [pc, #148]	; (8003884 <HAL_RCC_OscConfig+0x274>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	600b      	str	r3, [r1, #0]
 80037f4:	e015      	b.n	8003822 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037f6:	4b24      	ldr	r3, [pc, #144]	; (8003888 <HAL_RCC_OscConfig+0x278>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fc:	f7fe f8ce 	bl	800199c <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003804:	f7fe f8ca 	bl	800199c <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e193      	b.n	8003b3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003816:	4b1b      	ldr	r3, [pc, #108]	; (8003884 <HAL_RCC_OscConfig+0x274>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1f0      	bne.n	8003804 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0308 	and.w	r3, r3, #8
 800382a:	2b00      	cmp	r3, #0
 800382c:	d036      	beq.n	800389c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d016      	beq.n	8003864 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003836:	4b15      	ldr	r3, [pc, #84]	; (800388c <HAL_RCC_OscConfig+0x27c>)
 8003838:	2201      	movs	r2, #1
 800383a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800383c:	f7fe f8ae 	bl	800199c <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003844:	f7fe f8aa 	bl	800199c <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e173      	b.n	8003b3e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003856:	4b0b      	ldr	r3, [pc, #44]	; (8003884 <HAL_RCC_OscConfig+0x274>)
 8003858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0f0      	beq.n	8003844 <HAL_RCC_OscConfig+0x234>
 8003862:	e01b      	b.n	800389c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003864:	4b09      	ldr	r3, [pc, #36]	; (800388c <HAL_RCC_OscConfig+0x27c>)
 8003866:	2200      	movs	r2, #0
 8003868:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386a:	f7fe f897 	bl	800199c <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003870:	e00e      	b.n	8003890 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003872:	f7fe f893 	bl	800199c <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d907      	bls.n	8003890 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e15c      	b.n	8003b3e <HAL_RCC_OscConfig+0x52e>
 8003884:	40023800 	.word	0x40023800
 8003888:	42470000 	.word	0x42470000
 800388c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003890:	4b8a      	ldr	r3, [pc, #552]	; (8003abc <HAL_RCC_OscConfig+0x4ac>)
 8003892:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1ea      	bne.n	8003872 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f000 8097 	beq.w	80039d8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038aa:	2300      	movs	r3, #0
 80038ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ae:	4b83      	ldr	r3, [pc, #524]	; (8003abc <HAL_RCC_OscConfig+0x4ac>)
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10f      	bne.n	80038da <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ba:	2300      	movs	r3, #0
 80038bc:	60bb      	str	r3, [r7, #8]
 80038be:	4b7f      	ldr	r3, [pc, #508]	; (8003abc <HAL_RCC_OscConfig+0x4ac>)
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	4a7e      	ldr	r2, [pc, #504]	; (8003abc <HAL_RCC_OscConfig+0x4ac>)
 80038c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038c8:	6413      	str	r3, [r2, #64]	; 0x40
 80038ca:	4b7c      	ldr	r3, [pc, #496]	; (8003abc <HAL_RCC_OscConfig+0x4ac>)
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d2:	60bb      	str	r3, [r7, #8]
 80038d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038d6:	2301      	movs	r3, #1
 80038d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038da:	4b79      	ldr	r3, [pc, #484]	; (8003ac0 <HAL_RCC_OscConfig+0x4b0>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d118      	bne.n	8003918 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038e6:	4b76      	ldr	r3, [pc, #472]	; (8003ac0 <HAL_RCC_OscConfig+0x4b0>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a75      	ldr	r2, [pc, #468]	; (8003ac0 <HAL_RCC_OscConfig+0x4b0>)
 80038ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038f2:	f7fe f853 	bl	800199c <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f8:	e008      	b.n	800390c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038fa:	f7fe f84f 	bl	800199c <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e118      	b.n	8003b3e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800390c:	4b6c      	ldr	r3, [pc, #432]	; (8003ac0 <HAL_RCC_OscConfig+0x4b0>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003914:	2b00      	cmp	r3, #0
 8003916:	d0f0      	beq.n	80038fa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d106      	bne.n	800392e <HAL_RCC_OscConfig+0x31e>
 8003920:	4b66      	ldr	r3, [pc, #408]	; (8003abc <HAL_RCC_OscConfig+0x4ac>)
 8003922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003924:	4a65      	ldr	r2, [pc, #404]	; (8003abc <HAL_RCC_OscConfig+0x4ac>)
 8003926:	f043 0301 	orr.w	r3, r3, #1
 800392a:	6713      	str	r3, [r2, #112]	; 0x70
 800392c:	e01c      	b.n	8003968 <HAL_RCC_OscConfig+0x358>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	2b05      	cmp	r3, #5
 8003934:	d10c      	bne.n	8003950 <HAL_RCC_OscConfig+0x340>
 8003936:	4b61      	ldr	r3, [pc, #388]	; (8003abc <HAL_RCC_OscConfig+0x4ac>)
 8003938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393a:	4a60      	ldr	r2, [pc, #384]	; (8003abc <HAL_RCC_OscConfig+0x4ac>)
 800393c:	f043 0304 	orr.w	r3, r3, #4
 8003940:	6713      	str	r3, [r2, #112]	; 0x70
 8003942:	4b5e      	ldr	r3, [pc, #376]	; (8003abc <HAL_RCC_OscConfig+0x4ac>)
 8003944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003946:	4a5d      	ldr	r2, [pc, #372]	; (8003abc <HAL_RCC_OscConfig+0x4ac>)
 8003948:	f043 0301 	orr.w	r3, r3, #1
 800394c:	6713      	str	r3, [r2, #112]	; 0x70
 800394e:	e00b      	b.n	8003968 <HAL_RCC_OscConfig+0x358>
 8003950:	4b5a      	ldr	r3, [pc, #360]	; (8003abc <HAL_RCC_OscConfig+0x4ac>)
 8003952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003954:	4a59      	ldr	r2, [pc, #356]	; (8003abc <HAL_RCC_OscConfig+0x4ac>)
 8003956:	f023 0301 	bic.w	r3, r3, #1
 800395a:	6713      	str	r3, [r2, #112]	; 0x70
 800395c:	4b57      	ldr	r3, [pc, #348]	; (8003abc <HAL_RCC_OscConfig+0x4ac>)
 800395e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003960:	4a56      	ldr	r2, [pc, #344]	; (8003abc <HAL_RCC_OscConfig+0x4ac>)
 8003962:	f023 0304 	bic.w	r3, r3, #4
 8003966:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d015      	beq.n	800399c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003970:	f7fe f814 	bl	800199c <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003976:	e00a      	b.n	800398e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003978:	f7fe f810 	bl	800199c <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	f241 3288 	movw	r2, #5000	; 0x1388
 8003986:	4293      	cmp	r3, r2
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e0d7      	b.n	8003b3e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800398e:	4b4b      	ldr	r3, [pc, #300]	; (8003abc <HAL_RCC_OscConfig+0x4ac>)
 8003990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d0ee      	beq.n	8003978 <HAL_RCC_OscConfig+0x368>
 800399a:	e014      	b.n	80039c6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800399c:	f7fd fffe 	bl	800199c <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039a2:	e00a      	b.n	80039ba <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039a4:	f7fd fffa 	bl	800199c <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e0c1      	b.n	8003b3e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ba:	4b40      	ldr	r3, [pc, #256]	; (8003abc <HAL_RCC_OscConfig+0x4ac>)
 80039bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1ee      	bne.n	80039a4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039c6:	7dfb      	ldrb	r3, [r7, #23]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d105      	bne.n	80039d8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039cc:	4b3b      	ldr	r3, [pc, #236]	; (8003abc <HAL_RCC_OscConfig+0x4ac>)
 80039ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d0:	4a3a      	ldr	r2, [pc, #232]	; (8003abc <HAL_RCC_OscConfig+0x4ac>)
 80039d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 80ad 	beq.w	8003b3c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039e2:	4b36      	ldr	r3, [pc, #216]	; (8003abc <HAL_RCC_OscConfig+0x4ac>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 030c 	and.w	r3, r3, #12
 80039ea:	2b08      	cmp	r3, #8
 80039ec:	d060      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d145      	bne.n	8003a82 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039f6:	4b33      	ldr	r3, [pc, #204]	; (8003ac4 <HAL_RCC_OscConfig+0x4b4>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fc:	f7fd ffce 	bl	800199c <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a04:	f7fd ffca 	bl	800199c <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e093      	b.n	8003b3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a16:	4b29      	ldr	r3, [pc, #164]	; (8003abc <HAL_RCC_OscConfig+0x4ac>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1f0      	bne.n	8003a04 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	69da      	ldr	r2, [r3, #28]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	019b      	lsls	r3, r3, #6
 8003a32:	431a      	orrs	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a38:	085b      	lsrs	r3, r3, #1
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	041b      	lsls	r3, r3, #16
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a44:	061b      	lsls	r3, r3, #24
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4c:	071b      	lsls	r3, r3, #28
 8003a4e:	491b      	ldr	r1, [pc, #108]	; (8003abc <HAL_RCC_OscConfig+0x4ac>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a54:	4b1b      	ldr	r3, [pc, #108]	; (8003ac4 <HAL_RCC_OscConfig+0x4b4>)
 8003a56:	2201      	movs	r2, #1
 8003a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5a:	f7fd ff9f 	bl	800199c <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a60:	e008      	b.n	8003a74 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a62:	f7fd ff9b 	bl	800199c <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e064      	b.n	8003b3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a74:	4b11      	ldr	r3, [pc, #68]	; (8003abc <HAL_RCC_OscConfig+0x4ac>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0f0      	beq.n	8003a62 <HAL_RCC_OscConfig+0x452>
 8003a80:	e05c      	b.n	8003b3c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a82:	4b10      	ldr	r3, [pc, #64]	; (8003ac4 <HAL_RCC_OscConfig+0x4b4>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a88:	f7fd ff88 	bl	800199c <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a90:	f7fd ff84 	bl	800199c <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e04d      	b.n	8003b3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aa2:	4b06      	ldr	r3, [pc, #24]	; (8003abc <HAL_RCC_OscConfig+0x4ac>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1f0      	bne.n	8003a90 <HAL_RCC_OscConfig+0x480>
 8003aae:	e045      	b.n	8003b3c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d107      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e040      	b.n	8003b3e <HAL_RCC_OscConfig+0x52e>
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	40007000 	.word	0x40007000
 8003ac4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ac8:	4b1f      	ldr	r3, [pc, #124]	; (8003b48 <HAL_RCC_OscConfig+0x538>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d030      	beq.n	8003b38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d129      	bne.n	8003b38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d122      	bne.n	8003b38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003af8:	4013      	ands	r3, r2
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003afe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d119      	bne.n	8003b38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0e:	085b      	lsrs	r3, r3, #1
 8003b10:	3b01      	subs	r3, #1
 8003b12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d10f      	bne.n	8003b38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d107      	bne.n	8003b38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b32:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d001      	beq.n	8003b3c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e000      	b.n	8003b3e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3718      	adds	r7, #24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	40023800 	.word	0x40023800

08003b4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e041      	b.n	8003be2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d106      	bne.n	8003b78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7fd fd06 	bl	8001584 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	3304      	adds	r3, #4
 8003b88:	4619      	mov	r1, r3
 8003b8a:	4610      	mov	r0, r2
 8003b8c:	f000 fa96 	bl	80040bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
	...

08003bec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d001      	beq.n	8003c04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e04e      	b.n	8003ca2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2202      	movs	r2, #2
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68da      	ldr	r2, [r3, #12]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f042 0201 	orr.w	r2, r2, #1
 8003c1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a23      	ldr	r2, [pc, #140]	; (8003cb0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d022      	beq.n	8003c6c <HAL_TIM_Base_Start_IT+0x80>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c2e:	d01d      	beq.n	8003c6c <HAL_TIM_Base_Start_IT+0x80>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a1f      	ldr	r2, [pc, #124]	; (8003cb4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d018      	beq.n	8003c6c <HAL_TIM_Base_Start_IT+0x80>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a1e      	ldr	r2, [pc, #120]	; (8003cb8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d013      	beq.n	8003c6c <HAL_TIM_Base_Start_IT+0x80>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a1c      	ldr	r2, [pc, #112]	; (8003cbc <HAL_TIM_Base_Start_IT+0xd0>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d00e      	beq.n	8003c6c <HAL_TIM_Base_Start_IT+0x80>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a1b      	ldr	r2, [pc, #108]	; (8003cc0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d009      	beq.n	8003c6c <HAL_TIM_Base_Start_IT+0x80>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a19      	ldr	r2, [pc, #100]	; (8003cc4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d004      	beq.n	8003c6c <HAL_TIM_Base_Start_IT+0x80>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a18      	ldr	r2, [pc, #96]	; (8003cc8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d111      	bne.n	8003c90 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f003 0307 	and.w	r3, r3, #7
 8003c76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2b06      	cmp	r3, #6
 8003c7c:	d010      	beq.n	8003ca0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f042 0201 	orr.w	r2, r2, #1
 8003c8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c8e:	e007      	b.n	8003ca0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0201 	orr.w	r2, r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	40010000 	.word	0x40010000
 8003cb4:	40000400 	.word	0x40000400
 8003cb8:	40000800 	.word	0x40000800
 8003cbc:	40000c00 	.word	0x40000c00
 8003cc0:	40010400 	.word	0x40010400
 8003cc4:	40014000 	.word	0x40014000
 8003cc8:	40001800 	.word	0x40001800

08003ccc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d122      	bne.n	8003d28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d11b      	bne.n	8003d28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f06f 0202 	mvn.w	r2, #2
 8003cf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	f003 0303 	and.w	r3, r3, #3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f9b5 	bl	800407e <HAL_TIM_IC_CaptureCallback>
 8003d14:	e005      	b.n	8003d22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f9a7 	bl	800406a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 f9b8 	bl	8004092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	f003 0304 	and.w	r3, r3, #4
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	d122      	bne.n	8003d7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b04      	cmp	r3, #4
 8003d42:	d11b      	bne.n	8003d7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f06f 0204 	mvn.w	r2, #4
 8003d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2202      	movs	r2, #2
 8003d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f98b 	bl	800407e <HAL_TIM_IC_CaptureCallback>
 8003d68:	e005      	b.n	8003d76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f97d 	bl	800406a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 f98e 	bl	8004092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	f003 0308 	and.w	r3, r3, #8
 8003d86:	2b08      	cmp	r3, #8
 8003d88:	d122      	bne.n	8003dd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	f003 0308 	and.w	r3, r3, #8
 8003d94:	2b08      	cmp	r3, #8
 8003d96:	d11b      	bne.n	8003dd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f06f 0208 	mvn.w	r2, #8
 8003da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2204      	movs	r2, #4
 8003da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	69db      	ldr	r3, [r3, #28]
 8003dae:	f003 0303 	and.w	r3, r3, #3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f961 	bl	800407e <HAL_TIM_IC_CaptureCallback>
 8003dbc:	e005      	b.n	8003dca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f953 	bl	800406a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 f964 	bl	8004092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	f003 0310 	and.w	r3, r3, #16
 8003dda:	2b10      	cmp	r3, #16
 8003ddc:	d122      	bne.n	8003e24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	f003 0310 	and.w	r3, r3, #16
 8003de8:	2b10      	cmp	r3, #16
 8003dea:	d11b      	bne.n	8003e24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f06f 0210 	mvn.w	r2, #16
 8003df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2208      	movs	r2, #8
 8003dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f937 	bl	800407e <HAL_TIM_IC_CaptureCallback>
 8003e10:	e005      	b.n	8003e1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f929 	bl	800406a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 f93a 	bl	8004092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d10e      	bne.n	8003e50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d107      	bne.n	8003e50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f06f 0201 	mvn.w	r2, #1
 8003e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7fd f944 	bl	80010d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e5a:	2b80      	cmp	r3, #128	; 0x80
 8003e5c:	d10e      	bne.n	8003e7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e68:	2b80      	cmp	r3, #128	; 0x80
 8003e6a:	d107      	bne.n	8003e7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 fa64 	bl	8004344 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e86:	2b40      	cmp	r3, #64	; 0x40
 8003e88:	d10e      	bne.n	8003ea8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e94:	2b40      	cmp	r3, #64	; 0x40
 8003e96:	d107      	bne.n	8003ea8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 f8ff 	bl	80040a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	f003 0320 	and.w	r3, r3, #32
 8003eb2:	2b20      	cmp	r3, #32
 8003eb4:	d10e      	bne.n	8003ed4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	f003 0320 	and.w	r3, r3, #32
 8003ec0:	2b20      	cmp	r3, #32
 8003ec2:	d107      	bne.n	8003ed4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f06f 0220 	mvn.w	r2, #32
 8003ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 fa2e 	bl	8004330 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ed4:	bf00      	nop
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d101      	bne.n	8003ef8 <HAL_TIM_ConfigClockSource+0x1c>
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	e0b4      	b.n	8004062 <HAL_TIM_ConfigClockSource+0x186>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2202      	movs	r2, #2
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f30:	d03e      	beq.n	8003fb0 <HAL_TIM_ConfigClockSource+0xd4>
 8003f32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f36:	f200 8087 	bhi.w	8004048 <HAL_TIM_ConfigClockSource+0x16c>
 8003f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f3e:	f000 8086 	beq.w	800404e <HAL_TIM_ConfigClockSource+0x172>
 8003f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f46:	d87f      	bhi.n	8004048 <HAL_TIM_ConfigClockSource+0x16c>
 8003f48:	2b70      	cmp	r3, #112	; 0x70
 8003f4a:	d01a      	beq.n	8003f82 <HAL_TIM_ConfigClockSource+0xa6>
 8003f4c:	2b70      	cmp	r3, #112	; 0x70
 8003f4e:	d87b      	bhi.n	8004048 <HAL_TIM_ConfigClockSource+0x16c>
 8003f50:	2b60      	cmp	r3, #96	; 0x60
 8003f52:	d050      	beq.n	8003ff6 <HAL_TIM_ConfigClockSource+0x11a>
 8003f54:	2b60      	cmp	r3, #96	; 0x60
 8003f56:	d877      	bhi.n	8004048 <HAL_TIM_ConfigClockSource+0x16c>
 8003f58:	2b50      	cmp	r3, #80	; 0x50
 8003f5a:	d03c      	beq.n	8003fd6 <HAL_TIM_ConfigClockSource+0xfa>
 8003f5c:	2b50      	cmp	r3, #80	; 0x50
 8003f5e:	d873      	bhi.n	8004048 <HAL_TIM_ConfigClockSource+0x16c>
 8003f60:	2b40      	cmp	r3, #64	; 0x40
 8003f62:	d058      	beq.n	8004016 <HAL_TIM_ConfigClockSource+0x13a>
 8003f64:	2b40      	cmp	r3, #64	; 0x40
 8003f66:	d86f      	bhi.n	8004048 <HAL_TIM_ConfigClockSource+0x16c>
 8003f68:	2b30      	cmp	r3, #48	; 0x30
 8003f6a:	d064      	beq.n	8004036 <HAL_TIM_ConfigClockSource+0x15a>
 8003f6c:	2b30      	cmp	r3, #48	; 0x30
 8003f6e:	d86b      	bhi.n	8004048 <HAL_TIM_ConfigClockSource+0x16c>
 8003f70:	2b20      	cmp	r3, #32
 8003f72:	d060      	beq.n	8004036 <HAL_TIM_ConfigClockSource+0x15a>
 8003f74:	2b20      	cmp	r3, #32
 8003f76:	d867      	bhi.n	8004048 <HAL_TIM_ConfigClockSource+0x16c>
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d05c      	beq.n	8004036 <HAL_TIM_ConfigClockSource+0x15a>
 8003f7c:	2b10      	cmp	r3, #16
 8003f7e:	d05a      	beq.n	8004036 <HAL_TIM_ConfigClockSource+0x15a>
 8003f80:	e062      	b.n	8004048 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6818      	ldr	r0, [r3, #0]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	6899      	ldr	r1, [r3, #8]
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f000 f9ad 	bl	80042f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003fa4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	609a      	str	r2, [r3, #8]
      break;
 8003fae:	e04f      	b.n	8004050 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6818      	ldr	r0, [r3, #0]
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	6899      	ldr	r1, [r3, #8]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f000 f996 	bl	80042f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689a      	ldr	r2, [r3, #8]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fd2:	609a      	str	r2, [r3, #8]
      break;
 8003fd4:	e03c      	b.n	8004050 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6818      	ldr	r0, [r3, #0]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	6859      	ldr	r1, [r3, #4]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	f000 f90a 	bl	80041fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2150      	movs	r1, #80	; 0x50
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 f963 	bl	80042ba <TIM_ITRx_SetConfig>
      break;
 8003ff4:	e02c      	b.n	8004050 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6818      	ldr	r0, [r3, #0]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	6859      	ldr	r1, [r3, #4]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	461a      	mov	r2, r3
 8004004:	f000 f929 	bl	800425a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2160      	movs	r1, #96	; 0x60
 800400e:	4618      	mov	r0, r3
 8004010:	f000 f953 	bl	80042ba <TIM_ITRx_SetConfig>
      break;
 8004014:	e01c      	b.n	8004050 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6818      	ldr	r0, [r3, #0]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	6859      	ldr	r1, [r3, #4]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	461a      	mov	r2, r3
 8004024:	f000 f8ea 	bl	80041fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2140      	movs	r1, #64	; 0x40
 800402e:	4618      	mov	r0, r3
 8004030:	f000 f943 	bl	80042ba <TIM_ITRx_SetConfig>
      break;
 8004034:	e00c      	b.n	8004050 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4619      	mov	r1, r3
 8004040:	4610      	mov	r0, r2
 8004042:	f000 f93a 	bl	80042ba <TIM_ITRx_SetConfig>
      break;
 8004046:	e003      	b.n	8004050 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	73fb      	strb	r3, [r7, #15]
      break;
 800404c:	e000      	b.n	8004050 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800404e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004060:	7bfb      	ldrb	r3, [r7, #15]
}
 8004062:	4618      	mov	r0, r3
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800406a:	b480      	push	{r7}
 800406c:	b083      	sub	sp, #12
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004072:	bf00      	nop
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800407e:	b480      	push	{r7}
 8004080:	b083      	sub	sp, #12
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004086:	bf00      	nop
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004092:	b480      	push	{r7}
 8004094:	b083      	sub	sp, #12
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr

080040a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b083      	sub	sp, #12
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040ae:	bf00      	nop
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
	...

080040bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a40      	ldr	r2, [pc, #256]	; (80041d0 <TIM_Base_SetConfig+0x114>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d013      	beq.n	80040fc <TIM_Base_SetConfig+0x40>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040da:	d00f      	beq.n	80040fc <TIM_Base_SetConfig+0x40>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a3d      	ldr	r2, [pc, #244]	; (80041d4 <TIM_Base_SetConfig+0x118>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d00b      	beq.n	80040fc <TIM_Base_SetConfig+0x40>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a3c      	ldr	r2, [pc, #240]	; (80041d8 <TIM_Base_SetConfig+0x11c>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d007      	beq.n	80040fc <TIM_Base_SetConfig+0x40>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a3b      	ldr	r2, [pc, #236]	; (80041dc <TIM_Base_SetConfig+0x120>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d003      	beq.n	80040fc <TIM_Base_SetConfig+0x40>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a3a      	ldr	r2, [pc, #232]	; (80041e0 <TIM_Base_SetConfig+0x124>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d108      	bne.n	800410e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	4313      	orrs	r3, r2
 800410c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a2f      	ldr	r2, [pc, #188]	; (80041d0 <TIM_Base_SetConfig+0x114>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d02b      	beq.n	800416e <TIM_Base_SetConfig+0xb2>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800411c:	d027      	beq.n	800416e <TIM_Base_SetConfig+0xb2>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a2c      	ldr	r2, [pc, #176]	; (80041d4 <TIM_Base_SetConfig+0x118>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d023      	beq.n	800416e <TIM_Base_SetConfig+0xb2>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a2b      	ldr	r2, [pc, #172]	; (80041d8 <TIM_Base_SetConfig+0x11c>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d01f      	beq.n	800416e <TIM_Base_SetConfig+0xb2>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a2a      	ldr	r2, [pc, #168]	; (80041dc <TIM_Base_SetConfig+0x120>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d01b      	beq.n	800416e <TIM_Base_SetConfig+0xb2>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a29      	ldr	r2, [pc, #164]	; (80041e0 <TIM_Base_SetConfig+0x124>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d017      	beq.n	800416e <TIM_Base_SetConfig+0xb2>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a28      	ldr	r2, [pc, #160]	; (80041e4 <TIM_Base_SetConfig+0x128>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d013      	beq.n	800416e <TIM_Base_SetConfig+0xb2>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a27      	ldr	r2, [pc, #156]	; (80041e8 <TIM_Base_SetConfig+0x12c>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d00f      	beq.n	800416e <TIM_Base_SetConfig+0xb2>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a26      	ldr	r2, [pc, #152]	; (80041ec <TIM_Base_SetConfig+0x130>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d00b      	beq.n	800416e <TIM_Base_SetConfig+0xb2>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a25      	ldr	r2, [pc, #148]	; (80041f0 <TIM_Base_SetConfig+0x134>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d007      	beq.n	800416e <TIM_Base_SetConfig+0xb2>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a24      	ldr	r2, [pc, #144]	; (80041f4 <TIM_Base_SetConfig+0x138>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d003      	beq.n	800416e <TIM_Base_SetConfig+0xb2>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a23      	ldr	r2, [pc, #140]	; (80041f8 <TIM_Base_SetConfig+0x13c>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d108      	bne.n	8004180 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	4313      	orrs	r3, r2
 800417e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	4313      	orrs	r3, r2
 800418c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a0a      	ldr	r2, [pc, #40]	; (80041d0 <TIM_Base_SetConfig+0x114>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d003      	beq.n	80041b4 <TIM_Base_SetConfig+0xf8>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a0c      	ldr	r2, [pc, #48]	; (80041e0 <TIM_Base_SetConfig+0x124>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d103      	bne.n	80041bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	691a      	ldr	r2, [r3, #16]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	615a      	str	r2, [r3, #20]
}
 80041c2:	bf00      	nop
 80041c4:	3714      	adds	r7, #20
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	40010000 	.word	0x40010000
 80041d4:	40000400 	.word	0x40000400
 80041d8:	40000800 	.word	0x40000800
 80041dc:	40000c00 	.word	0x40000c00
 80041e0:	40010400 	.word	0x40010400
 80041e4:	40014000 	.word	0x40014000
 80041e8:	40014400 	.word	0x40014400
 80041ec:	40014800 	.word	0x40014800
 80041f0:	40001800 	.word	0x40001800
 80041f4:	40001c00 	.word	0x40001c00
 80041f8:	40002000 	.word	0x40002000

080041fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b087      	sub	sp, #28
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	f023 0201 	bic.w	r2, r3, #1
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004226:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	011b      	lsls	r3, r3, #4
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	4313      	orrs	r3, r2
 8004230:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f023 030a 	bic.w	r3, r3, #10
 8004238:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	4313      	orrs	r3, r2
 8004240:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	621a      	str	r2, [r3, #32]
}
 800424e:	bf00      	nop
 8004250:	371c      	adds	r7, #28
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800425a:	b480      	push	{r7}
 800425c:	b087      	sub	sp, #28
 800425e:	af00      	add	r7, sp, #0
 8004260:	60f8      	str	r0, [r7, #12]
 8004262:	60b9      	str	r1, [r7, #8]
 8004264:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	f023 0210 	bic.w	r2, r3, #16
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6a1b      	ldr	r3, [r3, #32]
 800427c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004284:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	031b      	lsls	r3, r3, #12
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	4313      	orrs	r3, r2
 800428e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004296:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	011b      	lsls	r3, r3, #4
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	4313      	orrs	r3, r2
 80042a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	621a      	str	r2, [r3, #32]
}
 80042ae:	bf00      	nop
 80042b0:	371c      	adds	r7, #28
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b085      	sub	sp, #20
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
 80042c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	f043 0307 	orr.w	r3, r3, #7
 80042dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	609a      	str	r2, [r3, #8]
}
 80042e4:	bf00      	nop
 80042e6:	3714      	adds	r7, #20
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b087      	sub	sp, #28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
 80042fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800430a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	021a      	lsls	r2, r3, #8
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	431a      	orrs	r2, r3
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	4313      	orrs	r3, r2
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	4313      	orrs	r3, r2
 800431c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	609a      	str	r2, [r3, #8]
}
 8004324:	bf00      	nop
 8004326:	371c      	adds	r7, #28
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e03f      	b.n	80043ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d106      	bne.n	8004384 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7fd f928 	bl	80015d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2224      	movs	r2, #36	; 0x24
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68da      	ldr	r2, [r3, #12]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800439a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 f929 	bl	80045f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	691a      	ldr	r2, [r3, #16]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	695a      	ldr	r2, [r3, #20]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68da      	ldr	r2, [r3, #12]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2220      	movs	r2, #32
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b08a      	sub	sp, #40	; 0x28
 80043f6:	af02      	add	r7, sp, #8
 80043f8:	60f8      	str	r0, [r7, #12]
 80043fa:	60b9      	str	r1, [r7, #8]
 80043fc:	603b      	str	r3, [r7, #0]
 80043fe:	4613      	mov	r3, r2
 8004400:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004402:	2300      	movs	r3, #0
 8004404:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b20      	cmp	r3, #32
 8004410:	d17c      	bne.n	800450c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d002      	beq.n	800441e <HAL_UART_Transmit+0x2c>
 8004418:	88fb      	ldrh	r3, [r7, #6]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e075      	b.n	800450e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004428:	2b01      	cmp	r3, #1
 800442a:	d101      	bne.n	8004430 <HAL_UART_Transmit+0x3e>
 800442c:	2302      	movs	r3, #2
 800442e:	e06e      	b.n	800450e <HAL_UART_Transmit+0x11c>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2221      	movs	r2, #33	; 0x21
 8004442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004446:	f7fd faa9 	bl	800199c <HAL_GetTick>
 800444a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	88fa      	ldrh	r2, [r7, #6]
 8004450:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	88fa      	ldrh	r2, [r7, #6]
 8004456:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004460:	d108      	bne.n	8004474 <HAL_UART_Transmit+0x82>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d104      	bne.n	8004474 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800446a:	2300      	movs	r3, #0
 800446c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	61bb      	str	r3, [r7, #24]
 8004472:	e003      	b.n	800447c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004478:	2300      	movs	r3, #0
 800447a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004484:	e02a      	b.n	80044dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	9300      	str	r3, [sp, #0]
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	2200      	movs	r2, #0
 800448e:	2180      	movs	r1, #128	; 0x80
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f000 f840 	bl	8004516 <UART_WaitOnFlagUntilTimeout>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d001      	beq.n	80044a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e036      	b.n	800450e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10b      	bne.n	80044be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	881b      	ldrh	r3, [r3, #0]
 80044aa:	461a      	mov	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	3302      	adds	r3, #2
 80044ba:	61bb      	str	r3, [r7, #24]
 80044bc:	e007      	b.n	80044ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	781a      	ldrb	r2, [r3, #0]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	3301      	adds	r3, #1
 80044cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	3b01      	subs	r3, #1
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1cf      	bne.n	8004486 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	9300      	str	r3, [sp, #0]
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	2200      	movs	r2, #0
 80044ee:	2140      	movs	r1, #64	; 0x40
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f000 f810 	bl	8004516 <UART_WaitOnFlagUntilTimeout>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d001      	beq.n	8004500 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e006      	b.n	800450e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2220      	movs	r2, #32
 8004504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004508:	2300      	movs	r3, #0
 800450a:	e000      	b.n	800450e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800450c:	2302      	movs	r3, #2
  }
}
 800450e:	4618      	mov	r0, r3
 8004510:	3720      	adds	r7, #32
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b090      	sub	sp, #64	; 0x40
 800451a:	af00      	add	r7, sp, #0
 800451c:	60f8      	str	r0, [r7, #12]
 800451e:	60b9      	str	r1, [r7, #8]
 8004520:	603b      	str	r3, [r7, #0]
 8004522:	4613      	mov	r3, r2
 8004524:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004526:	e050      	b.n	80045ca <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800452a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800452e:	d04c      	beq.n	80045ca <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004530:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004532:	2b00      	cmp	r3, #0
 8004534:	d007      	beq.n	8004546 <UART_WaitOnFlagUntilTimeout+0x30>
 8004536:	f7fd fa31 	bl	800199c <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004542:	429a      	cmp	r2, r3
 8004544:	d241      	bcs.n	80045ca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	330c      	adds	r3, #12
 800454c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004550:	e853 3f00 	ldrex	r3, [r3]
 8004554:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800455c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	330c      	adds	r3, #12
 8004564:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004566:	637a      	str	r2, [r7, #52]	; 0x34
 8004568:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800456c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800456e:	e841 2300 	strex	r3, r2, [r1]
 8004572:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1e5      	bne.n	8004546 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	3314      	adds	r3, #20
 8004580:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	e853 3f00 	ldrex	r3, [r3]
 8004588:	613b      	str	r3, [r7, #16]
   return(result);
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	f023 0301 	bic.w	r3, r3, #1
 8004590:	63bb      	str	r3, [r7, #56]	; 0x38
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	3314      	adds	r3, #20
 8004598:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800459a:	623a      	str	r2, [r7, #32]
 800459c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459e:	69f9      	ldr	r1, [r7, #28]
 80045a0:	6a3a      	ldr	r2, [r7, #32]
 80045a2:	e841 2300 	strex	r3, r2, [r1]
 80045a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1e5      	bne.n	800457a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2220      	movs	r2, #32
 80045b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2220      	movs	r2, #32
 80045ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e00f      	b.n	80045ea <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	4013      	ands	r3, r2
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	bf0c      	ite	eq
 80045da:	2301      	moveq	r3, #1
 80045dc:	2300      	movne	r3, #0
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	461a      	mov	r2, r3
 80045e2:	79fb      	ldrb	r3, [r7, #7]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d09f      	beq.n	8004528 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3740      	adds	r7, #64	; 0x40
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
	...

080045f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045f8:	b0c0      	sub	sp, #256	; 0x100
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800460c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004610:	68d9      	ldr	r1, [r3, #12]
 8004612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	ea40 0301 	orr.w	r3, r0, r1
 800461c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800461e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004622:	689a      	ldr	r2, [r3, #8]
 8004624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	431a      	orrs	r2, r3
 800462c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	431a      	orrs	r2, r3
 8004634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	4313      	orrs	r3, r2
 800463c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800464c:	f021 010c 	bic.w	r1, r1, #12
 8004650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800465a:	430b      	orrs	r3, r1
 800465c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800465e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800466a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800466e:	6999      	ldr	r1, [r3, #24]
 8004670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	ea40 0301 	orr.w	r3, r0, r1
 800467a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800467c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	4b8f      	ldr	r3, [pc, #572]	; (80048c0 <UART_SetConfig+0x2cc>)
 8004684:	429a      	cmp	r2, r3
 8004686:	d005      	beq.n	8004694 <UART_SetConfig+0xa0>
 8004688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	4b8d      	ldr	r3, [pc, #564]	; (80048c4 <UART_SetConfig+0x2d0>)
 8004690:	429a      	cmp	r2, r3
 8004692:	d104      	bne.n	800469e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004694:	f7fe fdfe 	bl	8003294 <HAL_RCC_GetPCLK2Freq>
 8004698:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800469c:	e003      	b.n	80046a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800469e:	f7fe fde5 	bl	800326c <HAL_RCC_GetPCLK1Freq>
 80046a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046aa:	69db      	ldr	r3, [r3, #28]
 80046ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046b0:	f040 810c 	bne.w	80048cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046b8:	2200      	movs	r2, #0
 80046ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80046be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80046c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80046c6:	4622      	mov	r2, r4
 80046c8:	462b      	mov	r3, r5
 80046ca:	1891      	adds	r1, r2, r2
 80046cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80046ce:	415b      	adcs	r3, r3
 80046d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80046d6:	4621      	mov	r1, r4
 80046d8:	eb12 0801 	adds.w	r8, r2, r1
 80046dc:	4629      	mov	r1, r5
 80046de:	eb43 0901 	adc.w	r9, r3, r1
 80046e2:	f04f 0200 	mov.w	r2, #0
 80046e6:	f04f 0300 	mov.w	r3, #0
 80046ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046f6:	4690      	mov	r8, r2
 80046f8:	4699      	mov	r9, r3
 80046fa:	4623      	mov	r3, r4
 80046fc:	eb18 0303 	adds.w	r3, r8, r3
 8004700:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004704:	462b      	mov	r3, r5
 8004706:	eb49 0303 	adc.w	r3, r9, r3
 800470a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800470e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800471a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800471e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004722:	460b      	mov	r3, r1
 8004724:	18db      	adds	r3, r3, r3
 8004726:	653b      	str	r3, [r7, #80]	; 0x50
 8004728:	4613      	mov	r3, r2
 800472a:	eb42 0303 	adc.w	r3, r2, r3
 800472e:	657b      	str	r3, [r7, #84]	; 0x54
 8004730:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004734:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004738:	f7fc fb16 	bl	8000d68 <__aeabi_uldivmod>
 800473c:	4602      	mov	r2, r0
 800473e:	460b      	mov	r3, r1
 8004740:	4b61      	ldr	r3, [pc, #388]	; (80048c8 <UART_SetConfig+0x2d4>)
 8004742:	fba3 2302 	umull	r2, r3, r3, r2
 8004746:	095b      	lsrs	r3, r3, #5
 8004748:	011c      	lsls	r4, r3, #4
 800474a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800474e:	2200      	movs	r2, #0
 8004750:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004754:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004758:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800475c:	4642      	mov	r2, r8
 800475e:	464b      	mov	r3, r9
 8004760:	1891      	adds	r1, r2, r2
 8004762:	64b9      	str	r1, [r7, #72]	; 0x48
 8004764:	415b      	adcs	r3, r3
 8004766:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004768:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800476c:	4641      	mov	r1, r8
 800476e:	eb12 0a01 	adds.w	sl, r2, r1
 8004772:	4649      	mov	r1, r9
 8004774:	eb43 0b01 	adc.w	fp, r3, r1
 8004778:	f04f 0200 	mov.w	r2, #0
 800477c:	f04f 0300 	mov.w	r3, #0
 8004780:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004784:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004788:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800478c:	4692      	mov	sl, r2
 800478e:	469b      	mov	fp, r3
 8004790:	4643      	mov	r3, r8
 8004792:	eb1a 0303 	adds.w	r3, sl, r3
 8004796:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800479a:	464b      	mov	r3, r9
 800479c:	eb4b 0303 	adc.w	r3, fp, r3
 80047a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80047a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80047b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80047b8:	460b      	mov	r3, r1
 80047ba:	18db      	adds	r3, r3, r3
 80047bc:	643b      	str	r3, [r7, #64]	; 0x40
 80047be:	4613      	mov	r3, r2
 80047c0:	eb42 0303 	adc.w	r3, r2, r3
 80047c4:	647b      	str	r3, [r7, #68]	; 0x44
 80047c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80047ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80047ce:	f7fc facb 	bl	8000d68 <__aeabi_uldivmod>
 80047d2:	4602      	mov	r2, r0
 80047d4:	460b      	mov	r3, r1
 80047d6:	4611      	mov	r1, r2
 80047d8:	4b3b      	ldr	r3, [pc, #236]	; (80048c8 <UART_SetConfig+0x2d4>)
 80047da:	fba3 2301 	umull	r2, r3, r3, r1
 80047de:	095b      	lsrs	r3, r3, #5
 80047e0:	2264      	movs	r2, #100	; 0x64
 80047e2:	fb02 f303 	mul.w	r3, r2, r3
 80047e6:	1acb      	subs	r3, r1, r3
 80047e8:	00db      	lsls	r3, r3, #3
 80047ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80047ee:	4b36      	ldr	r3, [pc, #216]	; (80048c8 <UART_SetConfig+0x2d4>)
 80047f0:	fba3 2302 	umull	r2, r3, r3, r2
 80047f4:	095b      	lsrs	r3, r3, #5
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047fc:	441c      	add	r4, r3
 80047fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004802:	2200      	movs	r2, #0
 8004804:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004808:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800480c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004810:	4642      	mov	r2, r8
 8004812:	464b      	mov	r3, r9
 8004814:	1891      	adds	r1, r2, r2
 8004816:	63b9      	str	r1, [r7, #56]	; 0x38
 8004818:	415b      	adcs	r3, r3
 800481a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800481c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004820:	4641      	mov	r1, r8
 8004822:	1851      	adds	r1, r2, r1
 8004824:	6339      	str	r1, [r7, #48]	; 0x30
 8004826:	4649      	mov	r1, r9
 8004828:	414b      	adcs	r3, r1
 800482a:	637b      	str	r3, [r7, #52]	; 0x34
 800482c:	f04f 0200 	mov.w	r2, #0
 8004830:	f04f 0300 	mov.w	r3, #0
 8004834:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004838:	4659      	mov	r1, fp
 800483a:	00cb      	lsls	r3, r1, #3
 800483c:	4651      	mov	r1, sl
 800483e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004842:	4651      	mov	r1, sl
 8004844:	00ca      	lsls	r2, r1, #3
 8004846:	4610      	mov	r0, r2
 8004848:	4619      	mov	r1, r3
 800484a:	4603      	mov	r3, r0
 800484c:	4642      	mov	r2, r8
 800484e:	189b      	adds	r3, r3, r2
 8004850:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004854:	464b      	mov	r3, r9
 8004856:	460a      	mov	r2, r1
 8004858:	eb42 0303 	adc.w	r3, r2, r3
 800485c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800486c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004870:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004874:	460b      	mov	r3, r1
 8004876:	18db      	adds	r3, r3, r3
 8004878:	62bb      	str	r3, [r7, #40]	; 0x28
 800487a:	4613      	mov	r3, r2
 800487c:	eb42 0303 	adc.w	r3, r2, r3
 8004880:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004882:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004886:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800488a:	f7fc fa6d 	bl	8000d68 <__aeabi_uldivmod>
 800488e:	4602      	mov	r2, r0
 8004890:	460b      	mov	r3, r1
 8004892:	4b0d      	ldr	r3, [pc, #52]	; (80048c8 <UART_SetConfig+0x2d4>)
 8004894:	fba3 1302 	umull	r1, r3, r3, r2
 8004898:	095b      	lsrs	r3, r3, #5
 800489a:	2164      	movs	r1, #100	; 0x64
 800489c:	fb01 f303 	mul.w	r3, r1, r3
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	3332      	adds	r3, #50	; 0x32
 80048a6:	4a08      	ldr	r2, [pc, #32]	; (80048c8 <UART_SetConfig+0x2d4>)
 80048a8:	fba2 2303 	umull	r2, r3, r2, r3
 80048ac:	095b      	lsrs	r3, r3, #5
 80048ae:	f003 0207 	and.w	r2, r3, #7
 80048b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4422      	add	r2, r4
 80048ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80048bc:	e105      	b.n	8004aca <UART_SetConfig+0x4d6>
 80048be:	bf00      	nop
 80048c0:	40011000 	.word	0x40011000
 80048c4:	40011400 	.word	0x40011400
 80048c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048d0:	2200      	movs	r2, #0
 80048d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80048d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80048da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80048de:	4642      	mov	r2, r8
 80048e0:	464b      	mov	r3, r9
 80048e2:	1891      	adds	r1, r2, r2
 80048e4:	6239      	str	r1, [r7, #32]
 80048e6:	415b      	adcs	r3, r3
 80048e8:	627b      	str	r3, [r7, #36]	; 0x24
 80048ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048ee:	4641      	mov	r1, r8
 80048f0:	1854      	adds	r4, r2, r1
 80048f2:	4649      	mov	r1, r9
 80048f4:	eb43 0501 	adc.w	r5, r3, r1
 80048f8:	f04f 0200 	mov.w	r2, #0
 80048fc:	f04f 0300 	mov.w	r3, #0
 8004900:	00eb      	lsls	r3, r5, #3
 8004902:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004906:	00e2      	lsls	r2, r4, #3
 8004908:	4614      	mov	r4, r2
 800490a:	461d      	mov	r5, r3
 800490c:	4643      	mov	r3, r8
 800490e:	18e3      	adds	r3, r4, r3
 8004910:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004914:	464b      	mov	r3, r9
 8004916:	eb45 0303 	adc.w	r3, r5, r3
 800491a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800491e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800492a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800492e:	f04f 0200 	mov.w	r2, #0
 8004932:	f04f 0300 	mov.w	r3, #0
 8004936:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800493a:	4629      	mov	r1, r5
 800493c:	008b      	lsls	r3, r1, #2
 800493e:	4621      	mov	r1, r4
 8004940:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004944:	4621      	mov	r1, r4
 8004946:	008a      	lsls	r2, r1, #2
 8004948:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800494c:	f7fc fa0c 	bl	8000d68 <__aeabi_uldivmod>
 8004950:	4602      	mov	r2, r0
 8004952:	460b      	mov	r3, r1
 8004954:	4b60      	ldr	r3, [pc, #384]	; (8004ad8 <UART_SetConfig+0x4e4>)
 8004956:	fba3 2302 	umull	r2, r3, r3, r2
 800495a:	095b      	lsrs	r3, r3, #5
 800495c:	011c      	lsls	r4, r3, #4
 800495e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004962:	2200      	movs	r2, #0
 8004964:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004968:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800496c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004970:	4642      	mov	r2, r8
 8004972:	464b      	mov	r3, r9
 8004974:	1891      	adds	r1, r2, r2
 8004976:	61b9      	str	r1, [r7, #24]
 8004978:	415b      	adcs	r3, r3
 800497a:	61fb      	str	r3, [r7, #28]
 800497c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004980:	4641      	mov	r1, r8
 8004982:	1851      	adds	r1, r2, r1
 8004984:	6139      	str	r1, [r7, #16]
 8004986:	4649      	mov	r1, r9
 8004988:	414b      	adcs	r3, r1
 800498a:	617b      	str	r3, [r7, #20]
 800498c:	f04f 0200 	mov.w	r2, #0
 8004990:	f04f 0300 	mov.w	r3, #0
 8004994:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004998:	4659      	mov	r1, fp
 800499a:	00cb      	lsls	r3, r1, #3
 800499c:	4651      	mov	r1, sl
 800499e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049a2:	4651      	mov	r1, sl
 80049a4:	00ca      	lsls	r2, r1, #3
 80049a6:	4610      	mov	r0, r2
 80049a8:	4619      	mov	r1, r3
 80049aa:	4603      	mov	r3, r0
 80049ac:	4642      	mov	r2, r8
 80049ae:	189b      	adds	r3, r3, r2
 80049b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80049b4:	464b      	mov	r3, r9
 80049b6:	460a      	mov	r2, r1
 80049b8:	eb42 0303 	adc.w	r3, r2, r3
 80049bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80049c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80049ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80049cc:	f04f 0200 	mov.w	r2, #0
 80049d0:	f04f 0300 	mov.w	r3, #0
 80049d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80049d8:	4649      	mov	r1, r9
 80049da:	008b      	lsls	r3, r1, #2
 80049dc:	4641      	mov	r1, r8
 80049de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049e2:	4641      	mov	r1, r8
 80049e4:	008a      	lsls	r2, r1, #2
 80049e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80049ea:	f7fc f9bd 	bl	8000d68 <__aeabi_uldivmod>
 80049ee:	4602      	mov	r2, r0
 80049f0:	460b      	mov	r3, r1
 80049f2:	4b39      	ldr	r3, [pc, #228]	; (8004ad8 <UART_SetConfig+0x4e4>)
 80049f4:	fba3 1302 	umull	r1, r3, r3, r2
 80049f8:	095b      	lsrs	r3, r3, #5
 80049fa:	2164      	movs	r1, #100	; 0x64
 80049fc:	fb01 f303 	mul.w	r3, r1, r3
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	011b      	lsls	r3, r3, #4
 8004a04:	3332      	adds	r3, #50	; 0x32
 8004a06:	4a34      	ldr	r2, [pc, #208]	; (8004ad8 <UART_SetConfig+0x4e4>)
 8004a08:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0c:	095b      	lsrs	r3, r3, #5
 8004a0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a12:	441c      	add	r4, r3
 8004a14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a18:	2200      	movs	r2, #0
 8004a1a:	673b      	str	r3, [r7, #112]	; 0x70
 8004a1c:	677a      	str	r2, [r7, #116]	; 0x74
 8004a1e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004a22:	4642      	mov	r2, r8
 8004a24:	464b      	mov	r3, r9
 8004a26:	1891      	adds	r1, r2, r2
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	415b      	adcs	r3, r3
 8004a2c:	60fb      	str	r3, [r7, #12]
 8004a2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a32:	4641      	mov	r1, r8
 8004a34:	1851      	adds	r1, r2, r1
 8004a36:	6039      	str	r1, [r7, #0]
 8004a38:	4649      	mov	r1, r9
 8004a3a:	414b      	adcs	r3, r1
 8004a3c:	607b      	str	r3, [r7, #4]
 8004a3e:	f04f 0200 	mov.w	r2, #0
 8004a42:	f04f 0300 	mov.w	r3, #0
 8004a46:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a4a:	4659      	mov	r1, fp
 8004a4c:	00cb      	lsls	r3, r1, #3
 8004a4e:	4651      	mov	r1, sl
 8004a50:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a54:	4651      	mov	r1, sl
 8004a56:	00ca      	lsls	r2, r1, #3
 8004a58:	4610      	mov	r0, r2
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	4642      	mov	r2, r8
 8004a60:	189b      	adds	r3, r3, r2
 8004a62:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a64:	464b      	mov	r3, r9
 8004a66:	460a      	mov	r2, r1
 8004a68:	eb42 0303 	adc.w	r3, r2, r3
 8004a6c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	663b      	str	r3, [r7, #96]	; 0x60
 8004a78:	667a      	str	r2, [r7, #100]	; 0x64
 8004a7a:	f04f 0200 	mov.w	r2, #0
 8004a7e:	f04f 0300 	mov.w	r3, #0
 8004a82:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004a86:	4649      	mov	r1, r9
 8004a88:	008b      	lsls	r3, r1, #2
 8004a8a:	4641      	mov	r1, r8
 8004a8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a90:	4641      	mov	r1, r8
 8004a92:	008a      	lsls	r2, r1, #2
 8004a94:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004a98:	f7fc f966 	bl	8000d68 <__aeabi_uldivmod>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	4b0d      	ldr	r3, [pc, #52]	; (8004ad8 <UART_SetConfig+0x4e4>)
 8004aa2:	fba3 1302 	umull	r1, r3, r3, r2
 8004aa6:	095b      	lsrs	r3, r3, #5
 8004aa8:	2164      	movs	r1, #100	; 0x64
 8004aaa:	fb01 f303 	mul.w	r3, r1, r3
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	011b      	lsls	r3, r3, #4
 8004ab2:	3332      	adds	r3, #50	; 0x32
 8004ab4:	4a08      	ldr	r2, [pc, #32]	; (8004ad8 <UART_SetConfig+0x4e4>)
 8004ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aba:	095b      	lsrs	r3, r3, #5
 8004abc:	f003 020f 	and.w	r2, r3, #15
 8004ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4422      	add	r2, r4
 8004ac8:	609a      	str	r2, [r3, #8]
}
 8004aca:	bf00      	nop
 8004acc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ad6:	bf00      	nop
 8004ad8:	51eb851f 	.word	0x51eb851f

08004adc <bme280Init>:
static Bme280Reg sBme280Reg;
static int32_t i32FineTemperature = 0;
static uint32_t ui32TimeoutI2C = 100;

CommStatus bme280Init(I2C_HandleTypeDef *hi2c, Bme280DeviceData *sBme280Device)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af02      	add	r7, sp, #8
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
	CommStatus communicationStatus = NOK;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	73fb      	strb	r3, [r7, #15]

	sBme280Reg.ui8Id 				= 0xD0;
 8004aea:	4b5c      	ldr	r3, [pc, #368]	; (8004c5c <bme280Init+0x180>)
 8004aec:	22d0      	movs	r2, #208	; 0xd0
 8004aee:	701a      	strb	r2, [r3, #0]
	sBme280Reg.ui8Reset[0]			= 0xE0;
 8004af0:	4b5a      	ldr	r3, [pc, #360]	; (8004c5c <bme280Init+0x180>)
 8004af2:	22e0      	movs	r2, #224	; 0xe0
 8004af4:	705a      	strb	r2, [r3, #1]
	sBme280Reg.ui8Reset[1]			= 0xB6;
 8004af6:	4b59      	ldr	r3, [pc, #356]	; (8004c5c <bme280Init+0x180>)
 8004af8:	22b6      	movs	r2, #182	; 0xb6
 8004afa:	709a      	strb	r2, [r3, #2]
	sBme280Reg.ui8CtrlHum			= 0xF2;
 8004afc:	4b57      	ldr	r3, [pc, #348]	; (8004c5c <bme280Init+0x180>)
 8004afe:	22f2      	movs	r2, #242	; 0xf2
 8004b00:	70da      	strb	r2, [r3, #3]
	sBme280Reg.ui8Status			= 0xF3;
 8004b02:	4b56      	ldr	r3, [pc, #344]	; (8004c5c <bme280Init+0x180>)
 8004b04:	22f3      	movs	r2, #243	; 0xf3
 8004b06:	711a      	strb	r2, [r3, #4]
	sBme280Reg.ui8CtrlMeas			= 0xF4;
 8004b08:	4b54      	ldr	r3, [pc, #336]	; (8004c5c <bme280Init+0x180>)
 8004b0a:	22f4      	movs	r2, #244	; 0xf4
 8004b0c:	715a      	strb	r2, [r3, #5]
	sBme280Reg.ui8Config			= 0xF5;
 8004b0e:	4b53      	ldr	r3, [pc, #332]	; (8004c5c <bme280Init+0x180>)
 8004b10:	22f5      	movs	r2, #245	; 0xf5
 8004b12:	719a      	strb	r2, [r3, #6]
	sBme280Reg.ui8Press				= 0xF7;
 8004b14:	4b51      	ldr	r3, [pc, #324]	; (8004c5c <bme280Init+0x180>)
 8004b16:	22f7      	movs	r2, #247	; 0xf7
 8004b18:	71da      	strb	r2, [r3, #7]
	sBme280Reg.ui8Temp				= 0xFA;
 8004b1a:	4b50      	ldr	r3, [pc, #320]	; (8004c5c <bme280Init+0x180>)
 8004b1c:	22fa      	movs	r2, #250	; 0xfa
 8004b1e:	721a      	strb	r2, [r3, #8]
	sBme280Reg.ui8Hum				= 0xFD;
 8004b20:	4b4e      	ldr	r3, [pc, #312]	; (8004c5c <bme280Init+0x180>)
 8004b22:	22fd      	movs	r2, #253	; 0xfd
 8004b24:	725a      	strb	r2, [r3, #9]
	sBme280Reg.ui8DigT1T3			= 0x88;
 8004b26:	4b4d      	ldr	r3, [pc, #308]	; (8004c5c <bme280Init+0x180>)
 8004b28:	2288      	movs	r2, #136	; 0x88
 8004b2a:	729a      	strb	r2, [r3, #10]
	sBme280Reg.ui8DigP1P9			= 0x8E;
 8004b2c:	4b4b      	ldr	r3, [pc, #300]	; (8004c5c <bme280Init+0x180>)
 8004b2e:	228e      	movs	r2, #142	; 0x8e
 8004b30:	72da      	strb	r2, [r3, #11]
	sBme280Reg.ui8DigH1				= 0xA1;
 8004b32:	4b4a      	ldr	r3, [pc, #296]	; (8004c5c <bme280Init+0x180>)
 8004b34:	22a1      	movs	r2, #161	; 0xa1
 8004b36:	731a      	strb	r2, [r3, #12]
	sBme280Reg.ui8DigH2H6			= 0xE1;
 8004b38:	4b48      	ldr	r3, [pc, #288]	; (8004c5c <bme280Init+0x180>)
 8004b3a:	22e1      	movs	r2, #225	; 0xe1
 8004b3c:	735a      	strb	r2, [r3, #13]

	sBme280Device->ui8Id			= 0x60;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	2260      	movs	r2, #96	; 0x60
 8004b42:	701a      	strb	r2, [r3, #0]
	sBme280Device->ui8Address		= 0x76 << 1;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	22ec      	movs	r2, #236	; 0xec
 8004b48:	705a      	strb	r2, [r3, #1]
	sBme280Device->ui8PressMsb		= 0x00;
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	709a      	strb	r2, [r3, #2]
	sBme280Device->ui8PressLsb		= 0x00;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	2200      	movs	r2, #0
 8004b54:	70da      	strb	r2, [r3, #3]
	sBme280Device->ui8PressXlsb		= 0x00;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	711a      	strb	r2, [r3, #4]
	sBme280Device->ui8TempMsb		= 0x00;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	715a      	strb	r2, [r3, #5]
	sBme280Device->ui8TempLsb		= 0x00;
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2200      	movs	r2, #0
 8004b66:	719a      	strb	r2, [r3, #6]
	sBme280Device->ui8TempXlsb		= 0x00;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	71da      	strb	r2, [r3, #7]
	sBme280Device->ui8HumMsb		= 0x00;
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	2200      	movs	r2, #0
 8004b72:	721a      	strb	r2, [r3, #8]
	sBme280Device->ui8HumLsb		= 0x00;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	2200      	movs	r2, #0
 8004b78:	725a      	strb	r2, [r3, #9]
	sBme280Device->ui16DigT1		= 0x0000;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	815a      	strh	r2, [r3, #10]
	sBme280Device->i16DigT2			= 0x0000;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	2200      	movs	r2, #0
 8004b84:	819a      	strh	r2, [r3, #12]
	sBme280Device->i16DigT3			= 0x0000;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	81da      	strh	r2, [r3, #14]
	sBme280Device->ui16DigP1		= 0x0000;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	821a      	strh	r2, [r3, #16]
	sBme280Device->i16DigP2			= 0x0000;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2200      	movs	r2, #0
 8004b96:	825a      	strh	r2, [r3, #18]
	sBme280Device->i16DigP3			= 0x0000;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	829a      	strh	r2, [r3, #20]
	sBme280Device->i16DigP4			= 0x0000;
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	82da      	strh	r2, [r3, #22]
	sBme280Device->i16DigP5			= 0x0000;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	831a      	strh	r2, [r3, #24]
	sBme280Device->i16DigP6			= 0x0000;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2200      	movs	r2, #0
 8004bae:	835a      	strh	r2, [r3, #26]
	sBme280Device->i16DigP7			= 0x0000;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	839a      	strh	r2, [r3, #28]
	sBme280Device->i16DigP8			= 0x0000;
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	83da      	strh	r2, [r3, #30]
	sBme280Device->i16DigP9			= 0x0000;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	841a      	strh	r2, [r3, #32]
	sBme280Device->ui8DigH1			= 0x00;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sBme280Device->i16DigH2			= 0x0000;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	849a      	strh	r2, [r3, #36]	; 0x24
	sBme280Device->ui8DigH3			= 0x00;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	sBme280Device->i16DigH4			= 0x0000;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	851a      	strh	r2, [r3, #40]	; 0x28
	sBme280Device->i16DigH5			= 0x0000;
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2200      	movs	r2, #0
 8004be2:	855a      	strh	r2, [r3, #42]	; 0x2a
	sBme280Device->i8DigH6			= 0x00;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	sBme280Device->i32Temperature	= 0x00000000;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	631a      	str	r2, [r3, #48]	; 0x30
	sBme280Device->ui32Pressure		= 0x00000000;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	635a      	str	r2, [r3, #52]	; 0x34
	sBme280Device->ui32Humidity     = 0x00000000;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	639a      	str	r2, [r3, #56]	; 0x38

	if (bme280CheckCommunication(hi2c, sBme280Device) == NOK)
 8004bfe:	6839      	ldr	r1, [r7, #0]
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 f82d 	bl	8004c60 <bme280CheckCommunication>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d101      	bne.n	8004c10 <bme280Init+0x134>
	{
		return NOK;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	e020      	b.n	8004c52 <bme280Init+0x176>
	}

	if (bme280CheckId(hi2c, sBme280Device) == sBme280Device->ui8Id)
 8004c10:	6839      	ldr	r1, [r7, #0]
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f962 	bl	8004edc <bme280CheckId>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d115      	bne.n	8004c50 <bme280Init+0x174>
	{
		bme280GetCoefficients(hi2c, sBme280Device);
 8004c24:	6839      	ldr	r1, [r7, #0]
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f838 	bl	8004c9c <bme280GetCoefficients>
		bme280Config(hi2c, sBme280Device, T_10_MS, FILTER_COEF_OFF);
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	2206      	movs	r2, #6
 8004c30:	6839      	ldr	r1, [r7, #0]
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f9f6 	bl	8005024 <bme280Config>
		bme280Control(hi2c, sBme280Device, OVER_EN_X_1, OVER_EN_X_1, OVER_EN_X_1, NORMAL);
 8004c38:	2303      	movs	r3, #3
 8004c3a:	9301      	str	r3, [sp, #4]
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	2301      	movs	r3, #1
 8004c42:	2201      	movs	r2, #1
 8004c44:	6839      	ldr	r1, [r7, #0]
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f970 	bl	8004f2c <bme280Control>
		communicationStatus = OK;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	73fb      	strb	r3, [r7, #15]
	}

	return communicationStatus;
 8004c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	2000035c 	.word	0x2000035c

08004c60 <bme280CheckCommunication>:

CommStatus bme280CheckCommunication(I2C_HandleTypeDef *hi2c, Bme280DeviceData *sBme280Device)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
	CommStatus communicationStatus = NOK;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	73fb      	strb	r3, [r7, #15]
	uint32_t ui32CommunicationTrials = 5;
 8004c6e:	2305      	movs	r3, #5
 8004c70:	60bb      	str	r3, [r7, #8]
	if (HAL_I2C_IsDeviceReady(hi2c, sBme280Device->ui8Address, ui32CommunicationTrials, ui32TimeoutI2C) == HAL_OK)
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	785b      	ldrb	r3, [r3, #1]
 8004c76:	b299      	uxth	r1, r3
 8004c78:	4b07      	ldr	r3, [pc, #28]	; (8004c98 <bme280CheckCommunication+0x38>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68ba      	ldr	r2, [r7, #8]
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f7fd fda6 	bl	80027d0 <HAL_I2C_IsDeviceReady>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <bme280CheckCommunication+0x2e>
	{
		communicationStatus = OK;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	73fb      	strb	r3, [r7, #15]
	}
	return communicationStatus;
 8004c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	20000014 	.word	0x20000014

08004c9c <bme280GetCoefficients>:

void bme280GetCoefficients(I2C_HandleTypeDef *hi2c, Bme280DeviceData *sBme280Device)
{
 8004c9c:	b5b0      	push	{r4, r5, r7, lr}
 8004c9e:	b08a      	sub	sp, #40	; 0x28
 8004ca0:	af02      	add	r7, sp, #8
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
	uint8_t coefBytes[18] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 8004ca6:	4b87      	ldr	r3, [pc, #540]	; (8004ec4 <bme280GetCoefficients+0x228>)
 8004ca8:	f107 0408 	add.w	r4, r7, #8
 8004cac:	461d      	mov	r5, r3
 8004cae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004cb2:	682b      	ldr	r3, [r5, #0]
 8004cb4:	8023      	strh	r3, [r4, #0]

	uint8_t temperatureCoefQtyBytes = 6;
 8004cb6:	2306      	movs	r3, #6
 8004cb8:	77fb      	strb	r3, [r7, #31]
	uint8_t pressureCoefQtyBytes = 18;
 8004cba:	2312      	movs	r3, #18
 8004cbc:	77bb      	strb	r3, [r7, #30]
	uint8_t humidityCoefQtyBytes = 8 - 1;
 8004cbe:	2307      	movs	r3, #7
 8004cc0:	777b      	strb	r3, [r7, #29]

	// Get temperature coefficients
	HAL_I2C_Master_Transmit(hi2c, sBme280Device->ui8Address, &sBme280Reg.ui8DigT1T3, sizeof(sBme280Reg.ui8DigT1T3), ui32TimeoutI2C);
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	785b      	ldrb	r3, [r3, #1]
 8004cc6:	b299      	uxth	r1, r3
 8004cc8:	4b7f      	ldr	r3, [pc, #508]	; (8004ec8 <bme280GetCoefficients+0x22c>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	9300      	str	r3, [sp, #0]
 8004cce:	2301      	movs	r3, #1
 8004cd0:	4a7e      	ldr	r2, [pc, #504]	; (8004ecc <bme280GetCoefficients+0x230>)
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7fd fa58 	bl	8002188 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, sBme280Device->ui8Address, coefBytes, temperatureCoefQtyBytes, ui32TimeoutI2C);
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	785b      	ldrb	r3, [r3, #1]
 8004cdc:	b299      	uxth	r1, r3
 8004cde:	7ffb      	ldrb	r3, [r7, #31]
 8004ce0:	b298      	uxth	r0, r3
 8004ce2:	4b79      	ldr	r3, [pc, #484]	; (8004ec8 <bme280GetCoefficients+0x22c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f107 0208 	add.w	r2, r7, #8
 8004cea:	9300      	str	r3, [sp, #0]
 8004cec:	4603      	mov	r3, r0
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7fd fb48 	bl	8002384 <HAL_I2C_Master_Receive>
	sBme280Device->ui16DigT1 = (coefBytes[1] << 8) | coefBytes[0];
 8004cf4:	7a7b      	ldrb	r3, [r7, #9]
 8004cf6:	021b      	lsls	r3, r3, #8
 8004cf8:	b21a      	sxth	r2, r3
 8004cfa:	7a3b      	ldrb	r3, [r7, #8]
 8004cfc:	b21b      	sxth	r3, r3
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	b21b      	sxth	r3, r3
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	815a      	strh	r2, [r3, #10]
	sBme280Device->i16DigT2  = (coefBytes[3] << 8) | coefBytes[2];
 8004d08:	7afb      	ldrb	r3, [r7, #11]
 8004d0a:	021b      	lsls	r3, r3, #8
 8004d0c:	b21a      	sxth	r2, r3
 8004d0e:	7abb      	ldrb	r3, [r7, #10]
 8004d10:	b21b      	sxth	r3, r3
 8004d12:	4313      	orrs	r3, r2
 8004d14:	b21a      	sxth	r2, r3
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	819a      	strh	r2, [r3, #12]
	sBme280Device->i16DigT3  = (coefBytes[5] << 8) | coefBytes[4];
 8004d1a:	7b7b      	ldrb	r3, [r7, #13]
 8004d1c:	021b      	lsls	r3, r3, #8
 8004d1e:	b21a      	sxth	r2, r3
 8004d20:	7b3b      	ldrb	r3, [r7, #12]
 8004d22:	b21b      	sxth	r3, r3
 8004d24:	4313      	orrs	r3, r2
 8004d26:	b21a      	sxth	r2, r3
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	81da      	strh	r2, [r3, #14]

	// Get pressure coefficients
	HAL_I2C_Master_Transmit(hi2c, sBme280Device->ui8Address, &sBme280Reg.ui8DigP1P9, sizeof(sBme280Reg.ui8DigP1P9), ui32TimeoutI2C);
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	785b      	ldrb	r3, [r3, #1]
 8004d30:	b299      	uxth	r1, r3
 8004d32:	4b65      	ldr	r3, [pc, #404]	; (8004ec8 <bme280GetCoefficients+0x22c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	9300      	str	r3, [sp, #0]
 8004d38:	2301      	movs	r3, #1
 8004d3a:	4a65      	ldr	r2, [pc, #404]	; (8004ed0 <bme280GetCoefficients+0x234>)
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f7fd fa23 	bl	8002188 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, sBme280Device->ui8Address, coefBytes, pressureCoefQtyBytes, ui32TimeoutI2C);
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	785b      	ldrb	r3, [r3, #1]
 8004d46:	b299      	uxth	r1, r3
 8004d48:	7fbb      	ldrb	r3, [r7, #30]
 8004d4a:	b298      	uxth	r0, r3
 8004d4c:	4b5e      	ldr	r3, [pc, #376]	; (8004ec8 <bme280GetCoefficients+0x22c>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f107 0208 	add.w	r2, r7, #8
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	4603      	mov	r3, r0
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f7fd fb13 	bl	8002384 <HAL_I2C_Master_Receive>
	sBme280Device->ui16DigP1 = (coefBytes[1] << 8) | coefBytes[0];
 8004d5e:	7a7b      	ldrb	r3, [r7, #9]
 8004d60:	021b      	lsls	r3, r3, #8
 8004d62:	b21a      	sxth	r2, r3
 8004d64:	7a3b      	ldrb	r3, [r7, #8]
 8004d66:	b21b      	sxth	r3, r3
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	b21b      	sxth	r3, r3
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	821a      	strh	r2, [r3, #16]
	sBme280Device->i16DigP2  = (coefBytes[3] << 8) | coefBytes[2];
 8004d72:	7afb      	ldrb	r3, [r7, #11]
 8004d74:	021b      	lsls	r3, r3, #8
 8004d76:	b21a      	sxth	r2, r3
 8004d78:	7abb      	ldrb	r3, [r7, #10]
 8004d7a:	b21b      	sxth	r3, r3
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	b21a      	sxth	r2, r3
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	825a      	strh	r2, [r3, #18]
	sBme280Device->i16DigP3  = (coefBytes[5] << 8) | coefBytes[4];
 8004d84:	7b7b      	ldrb	r3, [r7, #13]
 8004d86:	021b      	lsls	r3, r3, #8
 8004d88:	b21a      	sxth	r2, r3
 8004d8a:	7b3b      	ldrb	r3, [r7, #12]
 8004d8c:	b21b      	sxth	r3, r3
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	b21a      	sxth	r2, r3
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	829a      	strh	r2, [r3, #20]
	sBme280Device->i16DigP4  = (coefBytes[7] << 8) | coefBytes[6];
 8004d96:	7bfb      	ldrb	r3, [r7, #15]
 8004d98:	021b      	lsls	r3, r3, #8
 8004d9a:	b21a      	sxth	r2, r3
 8004d9c:	7bbb      	ldrb	r3, [r7, #14]
 8004d9e:	b21b      	sxth	r3, r3
 8004da0:	4313      	orrs	r3, r2
 8004da2:	b21a      	sxth	r2, r3
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	82da      	strh	r2, [r3, #22]
	sBme280Device->i16DigP5  = (coefBytes[9] << 8) | coefBytes[8];
 8004da8:	7c7b      	ldrb	r3, [r7, #17]
 8004daa:	021b      	lsls	r3, r3, #8
 8004dac:	b21a      	sxth	r2, r3
 8004dae:	7c3b      	ldrb	r3, [r7, #16]
 8004db0:	b21b      	sxth	r3, r3
 8004db2:	4313      	orrs	r3, r2
 8004db4:	b21a      	sxth	r2, r3
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	831a      	strh	r2, [r3, #24]
	sBme280Device->i16DigP6  = (coefBytes[11] << 8) | coefBytes[10];
 8004dba:	7cfb      	ldrb	r3, [r7, #19]
 8004dbc:	021b      	lsls	r3, r3, #8
 8004dbe:	b21a      	sxth	r2, r3
 8004dc0:	7cbb      	ldrb	r3, [r7, #18]
 8004dc2:	b21b      	sxth	r3, r3
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	b21a      	sxth	r2, r3
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	835a      	strh	r2, [r3, #26]
	sBme280Device->i16DigP7  = (coefBytes[13] << 8) | coefBytes[12];
 8004dcc:	7d7b      	ldrb	r3, [r7, #21]
 8004dce:	021b      	lsls	r3, r3, #8
 8004dd0:	b21a      	sxth	r2, r3
 8004dd2:	7d3b      	ldrb	r3, [r7, #20]
 8004dd4:	b21b      	sxth	r3, r3
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	b21a      	sxth	r2, r3
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	839a      	strh	r2, [r3, #28]
	sBme280Device->i16DigP8  = (coefBytes[15] << 8) | coefBytes[14];
 8004dde:	7dfb      	ldrb	r3, [r7, #23]
 8004de0:	021b      	lsls	r3, r3, #8
 8004de2:	b21a      	sxth	r2, r3
 8004de4:	7dbb      	ldrb	r3, [r7, #22]
 8004de6:	b21b      	sxth	r3, r3
 8004de8:	4313      	orrs	r3, r2
 8004dea:	b21a      	sxth	r2, r3
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	83da      	strh	r2, [r3, #30]
	sBme280Device->i16DigP9  = (coefBytes[17] << 8) | coefBytes[16];
 8004df0:	7e7b      	ldrb	r3, [r7, #25]
 8004df2:	021b      	lsls	r3, r3, #8
 8004df4:	b21a      	sxth	r2, r3
 8004df6:	7e3b      	ldrb	r3, [r7, #24]
 8004df8:	b21b      	sxth	r3, r3
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	b21a      	sxth	r2, r3
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	841a      	strh	r2, [r3, #32]

	// Get humidity coefficients
	HAL_I2C_Master_Transmit(hi2c, sBme280Device->ui8Address, &sBme280Reg.ui8DigH1, sizeof(sBme280Reg.ui8DigH1), ui32TimeoutI2C);
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	785b      	ldrb	r3, [r3, #1]
 8004e06:	b299      	uxth	r1, r3
 8004e08:	4b2f      	ldr	r3, [pc, #188]	; (8004ec8 <bme280GetCoefficients+0x22c>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	2301      	movs	r3, #1
 8004e10:	4a30      	ldr	r2, [pc, #192]	; (8004ed4 <bme280GetCoefficients+0x238>)
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7fd f9b8 	bl	8002188 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, sBme280Device->ui8Address, coefBytes, 1, ui32TimeoutI2C);
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	785b      	ldrb	r3, [r3, #1]
 8004e1c:	b299      	uxth	r1, r3
 8004e1e:	4b2a      	ldr	r3, [pc, #168]	; (8004ec8 <bme280GetCoefficients+0x22c>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f107 0208 	add.w	r2, r7, #8
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	2301      	movs	r3, #1
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7fd faaa 	bl	8002384 <HAL_I2C_Master_Receive>
	sBme280Device->ui8DigH1 = coefBytes[0];
 8004e30:	7a3a      	ldrb	r2, [r7, #8]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	HAL_I2C_Master_Transmit(hi2c, sBme280Device->ui8Address, &sBme280Reg.ui8DigH2H6, sizeof(sBme280Reg.ui8DigH2H6), ui32TimeoutI2C);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	785b      	ldrb	r3, [r3, #1]
 8004e3c:	b299      	uxth	r1, r3
 8004e3e:	4b22      	ldr	r3, [pc, #136]	; (8004ec8 <bme280GetCoefficients+0x22c>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	2301      	movs	r3, #1
 8004e46:	4a24      	ldr	r2, [pc, #144]	; (8004ed8 <bme280GetCoefficients+0x23c>)
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f7fd f99d 	bl	8002188 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, sBme280Device->ui8Address, coefBytes, humidityCoefQtyBytes, ui32TimeoutI2C);
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	785b      	ldrb	r3, [r3, #1]
 8004e52:	b299      	uxth	r1, r3
 8004e54:	7f7b      	ldrb	r3, [r7, #29]
 8004e56:	b298      	uxth	r0, r3
 8004e58:	4b1b      	ldr	r3, [pc, #108]	; (8004ec8 <bme280GetCoefficients+0x22c>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f107 0208 	add.w	r2, r7, #8
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	4603      	mov	r3, r0
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7fd fa8d 	bl	8002384 <HAL_I2C_Master_Receive>
	sBme280Device->i16DigH2 = (coefBytes[1] << 8) | coefBytes[0];
 8004e6a:	7a7b      	ldrb	r3, [r7, #9]
 8004e6c:	021b      	lsls	r3, r3, #8
 8004e6e:	b21a      	sxth	r2, r3
 8004e70:	7a3b      	ldrb	r3, [r7, #8]
 8004e72:	b21b      	sxth	r3, r3
 8004e74:	4313      	orrs	r3, r2
 8004e76:	b21a      	sxth	r2, r3
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	849a      	strh	r2, [r3, #36]	; 0x24
	sBme280Device->ui8DigH3 = coefBytes[2];
 8004e7c:	7aba      	ldrb	r2, [r7, #10]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	sBme280Device->i16DigH4 = (coefBytes[3] << 4) | (coefBytes[4] & 0x0F);
 8004e84:	7afb      	ldrb	r3, [r7, #11]
 8004e86:	011b      	lsls	r3, r3, #4
 8004e88:	b21a      	sxth	r2, r3
 8004e8a:	7b3b      	ldrb	r3, [r7, #12]
 8004e8c:	b21b      	sxth	r3, r3
 8004e8e:	f003 030f 	and.w	r3, r3, #15
 8004e92:	b21b      	sxth	r3, r3
 8004e94:	4313      	orrs	r3, r2
 8004e96:	b21a      	sxth	r2, r3
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	851a      	strh	r2, [r3, #40]	; 0x28
	sBme280Device->i16DigH5 = ((coefBytes[4] & 0xF0) >> 4) | (coefBytes[5] << 4);
 8004e9c:	7b3b      	ldrb	r3, [r7, #12]
 8004e9e:	091b      	lsrs	r3, r3, #4
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	b21a      	sxth	r2, r3
 8004ea4:	7b7b      	ldrb	r3, [r7, #13]
 8004ea6:	011b      	lsls	r3, r3, #4
 8004ea8:	b21b      	sxth	r3, r3
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	b21a      	sxth	r2, r3
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	855a      	strh	r2, [r3, #42]	; 0x2a
	sBme280Device->i8DigH6  = coefBytes[6];
 8004eb2:	7bbb      	ldrb	r3, [r7, #14]
 8004eb4:	b25a      	sxtb	r2, r3
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8004ebc:	bf00      	nop
 8004ebe:	3720      	adds	r7, #32
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bdb0      	pop	{r4, r5, r7, pc}
 8004ec4:	0800a30c 	.word	0x0800a30c
 8004ec8:	20000014 	.word	0x20000014
 8004ecc:	20000366 	.word	0x20000366
 8004ed0:	20000367 	.word	0x20000367
 8004ed4:	20000368 	.word	0x20000368
 8004ed8:	20000369 	.word	0x20000369

08004edc <bme280CheckId>:

uint8_t bme280CheckId(I2C_HandleTypeDef *hi2c, Bme280DeviceData *sBme280Device)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af02      	add	r7, sp, #8
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
	uint8_t id = 0;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(hi2c, sBme280Device->ui8Address, &sBme280Reg.ui8Id, sizeof(sBme280Reg.ui8Id), ui32TimeoutI2C);
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	785b      	ldrb	r3, [r3, #1]
 8004eee:	b299      	uxth	r1, r3
 8004ef0:	4b0c      	ldr	r3, [pc, #48]	; (8004f24 <bme280CheckId+0x48>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	4a0b      	ldr	r2, [pc, #44]	; (8004f28 <bme280CheckId+0x4c>)
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f7fd f944 	bl	8002188 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, sBme280Device->ui8Address, &id, sizeof(id), ui32TimeoutI2C);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	785b      	ldrb	r3, [r3, #1]
 8004f04:	b299      	uxth	r1, r3
 8004f06:	4b07      	ldr	r3, [pc, #28]	; (8004f24 <bme280CheckId+0x48>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f107 020f 	add.w	r2, r7, #15
 8004f0e:	9300      	str	r3, [sp, #0]
 8004f10:	2301      	movs	r3, #1
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7fd fa36 	bl	8002384 <HAL_I2C_Master_Receive>
	return id;
 8004f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	20000014 	.word	0x20000014
 8004f28:	2000035c 	.word	0x2000035c

08004f2c <bme280Control>:
{
	HAL_I2C_Master_Transmit(hi2c, sBme280Device->ui8Address, sBme280Reg.ui8Reset, sizeof(sBme280Reg.ui8Reset), ui32TimeoutI2C);
}

void bme280Control(I2C_HandleTypeDef *hi2c, Bme280DeviceData *sBme280Device, Oversampling hum, Oversampling press, Oversampling temp, Mode mode)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b08a      	sub	sp, #40	; 0x28
 8004f30:	af02      	add	r7, sp, #8
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	4611      	mov	r1, r2
 8004f38:	461a      	mov	r2, r3
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	71fb      	strb	r3, [r7, #7]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	71bb      	strb	r3, [r7, #6]
	uint8_t osrs_h = hum & 0x07;
 8004f42:	79fb      	ldrb	r3, [r7, #7]
 8004f44:	f003 0307 	and.w	r3, r3, #7
 8004f48:	77fb      	strb	r3, [r7, #31]
	uint8_t osrs_t = temp & 0x07;
 8004f4a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f4e:	f003 0307 	and.w	r3, r3, #7
 8004f52:	77bb      	strb	r3, [r7, #30]
	uint8_t osrs_p = press & 0x07;
 8004f54:	79bb      	ldrb	r3, [r7, #6]
 8004f56:	f003 0307 	and.w	r3, r3, #7
 8004f5a:	777b      	strb	r3, [r7, #29]
	uint8_t operation_mode = mode & 0x03;
 8004f5c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004f60:	f003 0303 	and.w	r3, r3, #3
 8004f64:	773b      	strb	r3, [r7, #28]

	uint8_t ctrl_hum[2] =
	{
			sBme280Reg.ui8CtrlHum,
 8004f66:	4b19      	ldr	r3, [pc, #100]	; (8004fcc <bme280Control+0xa0>)
 8004f68:	78db      	ldrb	r3, [r3, #3]
	uint8_t ctrl_hum[2] =
 8004f6a:	763b      	strb	r3, [r7, #24]
 8004f6c:	7ffb      	ldrb	r3, [r7, #31]
 8004f6e:	767b      	strb	r3, [r7, #25]
			osrs_h
	};

	uint8_t ctrl_meas[2] =
	{
			sBme280Reg.ui8CtrlMeas,
 8004f70:	4b16      	ldr	r3, [pc, #88]	; (8004fcc <bme280Control+0xa0>)
 8004f72:	795b      	ldrb	r3, [r3, #5]
	uint8_t ctrl_meas[2] =
 8004f74:	753b      	strb	r3, [r7, #20]
			(osrs_t << 5) | (osrs_p << 2) | operation_mode
 8004f76:	7fbb      	ldrb	r3, [r7, #30]
 8004f78:	015b      	lsls	r3, r3, #5
 8004f7a:	b25a      	sxtb	r2, r3
 8004f7c:	7f7b      	ldrb	r3, [r7, #29]
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	b25b      	sxtb	r3, r3
 8004f82:	4313      	orrs	r3, r2
 8004f84:	b25a      	sxtb	r2, r3
 8004f86:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	b25b      	sxtb	r3, r3
 8004f8e:	b2db      	uxtb	r3, r3
	uint8_t ctrl_meas[2] =
 8004f90:	757b      	strb	r3, [r7, #21]
	};

	HAL_I2C_Master_Transmit(hi2c, sBme280Device->ui8Address, ctrl_hum, sizeof(ctrl_hum), ui32TimeoutI2C);
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	785b      	ldrb	r3, [r3, #1]
 8004f96:	b299      	uxth	r1, r3
 8004f98:	4b0d      	ldr	r3, [pc, #52]	; (8004fd0 <bme280Control+0xa4>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f107 0218 	add.w	r2, r7, #24
 8004fa0:	9300      	str	r3, [sp, #0]
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f7fd f8ef 	bl	8002188 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(hi2c, sBme280Device->ui8Address, ctrl_meas, sizeof(ctrl_meas), ui32TimeoutI2C);
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	785b      	ldrb	r3, [r3, #1]
 8004fae:	b299      	uxth	r1, r3
 8004fb0:	4b07      	ldr	r3, [pc, #28]	; (8004fd0 <bme280Control+0xa4>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f107 0214 	add.w	r2, r7, #20
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	2302      	movs	r3, #2
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f7fd f8e3 	bl	8002188 <HAL_I2C_Master_Transmit>
}
 8004fc2:	bf00      	nop
 8004fc4:	3720      	adds	r7, #32
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	2000035c 	.word	0x2000035c
 8004fd0:	20000014 	.word	0x20000014

08004fd4 <bme280GetStatus>:

MeasuringStatus bme280GetStatus(I2C_HandleTypeDef *hi2c, Bme280DeviceData *sBme280Device)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af02      	add	r7, sp, #8
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
	MeasuringStatus status = AVAILABLE;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(hi2c, sBme280Device->ui8Address, &sBme280Reg.ui8Status, sizeof(sBme280Reg.ui8Status), ui32TimeoutI2C);
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	785b      	ldrb	r3, [r3, #1]
 8004fe6:	b299      	uxth	r1, r3
 8004fe8:	4b0c      	ldr	r3, [pc, #48]	; (800501c <bme280GetStatus+0x48>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	2301      	movs	r3, #1
 8004ff0:	4a0b      	ldr	r2, [pc, #44]	; (8005020 <bme280GetStatus+0x4c>)
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7fd f8c8 	bl	8002188 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, sBme280Device->ui8Address, &status, sizeof(status), ui32TimeoutI2C);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	785b      	ldrb	r3, [r3, #1]
 8004ffc:	b299      	uxth	r1, r3
 8004ffe:	4b07      	ldr	r3, [pc, #28]	; (800501c <bme280GetStatus+0x48>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f107 020f 	add.w	r2, r7, #15
 8005006:	9300      	str	r3, [sp, #0]
 8005008:	2301      	movs	r3, #1
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f7fd f9ba 	bl	8002384 <HAL_I2C_Master_Receive>
	return status;
 8005010:	7bfb      	ldrb	r3, [r7, #15]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	20000014 	.word	0x20000014
 8005020:	20000360 	.word	0x20000360

08005024 <bme280Config>:

void bme280Config(I2C_HandleTypeDef *hi2c, Bme280DeviceData *sBme280Device, TimeStandby timeStandby, FilterCoef filterCoef)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b088      	sub	sp, #32
 8005028:	af02      	add	r7, sp, #8
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	4611      	mov	r1, r2
 8005030:	461a      	mov	r2, r3
 8005032:	460b      	mov	r3, r1
 8005034:	71fb      	strb	r3, [r7, #7]
 8005036:	4613      	mov	r3, r2
 8005038:	71bb      	strb	r3, [r7, #6]
	uint8_t t_sb = timeStandby & 0x07;
 800503a:	79fb      	ldrb	r3, [r7, #7]
 800503c:	f003 0307 	and.w	r3, r3, #7
 8005040:	75fb      	strb	r3, [r7, #23]
	uint8_t filter = filterCoef & 0x07;
 8005042:	79bb      	ldrb	r3, [r7, #6]
 8005044:	f003 0307 	and.w	r3, r3, #7
 8005048:	75bb      	strb	r3, [r7, #22]
	uint8_t spi3w_en = 0 & 0x01;
 800504a:	2300      	movs	r3, #0
 800504c:	757b      	strb	r3, [r7, #21]

	uint8_t config[2] =
	{
			sBme280Reg.ui8Config,
 800504e:	4b15      	ldr	r3, [pc, #84]	; (80050a4 <bme280Config+0x80>)
 8005050:	799b      	ldrb	r3, [r3, #6]
	uint8_t config[2] =
 8005052:	743b      	strb	r3, [r7, #16]
			(t_sb << 5) | (filter << 2) | spi3w_en
 8005054:	7dfb      	ldrb	r3, [r7, #23]
 8005056:	015b      	lsls	r3, r3, #5
 8005058:	b25a      	sxtb	r2, r3
 800505a:	7dbb      	ldrb	r3, [r7, #22]
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	b25b      	sxtb	r3, r3
 8005060:	4313      	orrs	r3, r2
 8005062:	b25a      	sxtb	r2, r3
 8005064:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8005068:	4313      	orrs	r3, r2
 800506a:	b25b      	sxtb	r3, r3
 800506c:	b2db      	uxtb	r3, r3
	uint8_t config[2] =
 800506e:	747b      	strb	r3, [r7, #17]
	};

	bme280Control(hi2c, sBme280Device, OVER_SKIPPED, OVER_SKIPPED, OVER_SKIPPED, SLEEP);
 8005070:	2300      	movs	r3, #0
 8005072:	9301      	str	r3, [sp, #4]
 8005074:	2300      	movs	r3, #0
 8005076:	9300      	str	r3, [sp, #0]
 8005078:	2300      	movs	r3, #0
 800507a:	2200      	movs	r2, #0
 800507c:	68b9      	ldr	r1, [r7, #8]
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f7ff ff54 	bl	8004f2c <bme280Control>
	HAL_I2C_Master_Transmit(hi2c, sBme280Device->ui8Address, config, sizeof(config), ui32TimeoutI2C);
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	785b      	ldrb	r3, [r3, #1]
 8005088:	b299      	uxth	r1, r3
 800508a:	4b07      	ldr	r3, [pc, #28]	; (80050a8 <bme280Config+0x84>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f107 0210 	add.w	r2, r7, #16
 8005092:	9300      	str	r3, [sp, #0]
 8005094:	2302      	movs	r3, #2
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f7fd f876 	bl	8002188 <HAL_I2C_Master_Transmit>
}
 800509c:	bf00      	nop
 800509e:	3718      	adds	r7, #24
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	2000035c 	.word	0x2000035c
 80050a8:	20000014 	.word	0x20000014

080050ac <bme280ReadTemperature>:
/**
 * Returns temperature in degC.
 * Output value of "5123" equals 51.23 degC
 */
int32_t bme280ReadTemperature(I2C_HandleTypeDef *hi2c, Bme280DeviceData *sBme280Device)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b08a      	sub	sp, #40	; 0x28
 80050b0:	af02      	add	r7, sp, #8
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
	int32_t temperature_degC_x_100 = 0;
 80050b6:	2300      	movs	r3, #0
 80050b8:	61fb      	str	r3, [r7, #28]
	int8_t temperatureDataQtyBytes = 3;
 80050ba:	2303      	movs	r3, #3
 80050bc:	76fb      	strb	r3, [r7, #27]
	uint8_t dataBytes[3] = {0, 0, 0};
 80050be:	4a38      	ldr	r2, [pc, #224]	; (80051a0 <bme280ReadTemperature+0xf4>)
 80050c0:	f107 0308 	add.w	r3, r7, #8
 80050c4:	6812      	ldr	r2, [r2, #0]
 80050c6:	4611      	mov	r1, r2
 80050c8:	8019      	strh	r1, [r3, #0]
 80050ca:	3302      	adds	r3, #2
 80050cc:	0c12      	lsrs	r2, r2, #16
 80050ce:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Master_Transmit(hi2c, sBme280Device->ui8Address, &sBme280Reg.ui8Temp, sizeof(sBme280Reg.ui8Temp), ui32TimeoutI2C);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	785b      	ldrb	r3, [r3, #1]
 80050d4:	b299      	uxth	r1, r3
 80050d6:	4b33      	ldr	r3, [pc, #204]	; (80051a4 <bme280ReadTemperature+0xf8>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	2301      	movs	r3, #1
 80050de:	4a32      	ldr	r2, [pc, #200]	; (80051a8 <bme280ReadTemperature+0xfc>)
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f7fd f851 	bl	8002188 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, sBme280Device->ui8Address, dataBytes, temperatureDataQtyBytes, ui32TimeoutI2C);
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	785b      	ldrb	r3, [r3, #1]
 80050ea:	b299      	uxth	r1, r3
 80050ec:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80050f0:	b298      	uxth	r0, r3
 80050f2:	4b2c      	ldr	r3, [pc, #176]	; (80051a4 <bme280ReadTemperature+0xf8>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f107 0208 	add.w	r2, r7, #8
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	4603      	mov	r3, r0
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7fd f940 	bl	8002384 <HAL_I2C_Master_Receive>
	sBme280Device->ui8TempMsb = dataBytes[0];
 8005104:	7a3a      	ldrb	r2, [r7, #8]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	715a      	strb	r2, [r3, #5]
	sBme280Device->ui8TempLsb = dataBytes[1];
 800510a:	7a7a      	ldrb	r2, [r7, #9]
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	719a      	strb	r2, [r3, #6]
	sBme280Device->ui8TempXlsb = dataBytes[2];
 8005110:	7aba      	ldrb	r2, [r7, #10]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	71da      	strb	r2, [r3, #7]

	int32_t adc_T = (sBme280Device->ui8TempMsb << 12) | (sBme280Device->ui8TempLsb << 4) | (sBme280Device->ui8TempXlsb >> 4);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	795b      	ldrb	r3, [r3, #5]
 800511a:	031a      	lsls	r2, r3, #12
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	799b      	ldrb	r3, [r3, #6]
 8005120:	011b      	lsls	r3, r3, #4
 8005122:	4313      	orrs	r3, r2
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	79d2      	ldrb	r2, [r2, #7]
 8005128:	0912      	lsrs	r2, r2, #4
 800512a:	b2d2      	uxtb	r2, r2
 800512c:	4313      	orrs	r3, r2
 800512e:	617b      	str	r3, [r7, #20]
	int32_t var1 = ((((adc_T >> 3) - ((int32_t) sBme280Device->ui16DigT1 << 1))) * ((int32_t) sBme280Device->i16DigT2)) >> 11;
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	10da      	asrs	r2, r3, #3
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	895b      	ldrh	r3, [r3, #10]
 8005138:	005b      	lsls	r3, r3, #1
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8005142:	fb02 f303 	mul.w	r3, r2, r3
 8005146:	12db      	asrs	r3, r3, #11
 8005148:	613b      	str	r3, [r7, #16]
	int32_t var2 = (((((adc_T >> 4) - ((int32_t) sBme280Device->ui16DigT1)) * ((adc_T >> 4) - ((int32_t) sBme280Device->ui16DigT1))) >> 12) * ((int32_t) sBme280Device->i16DigT3)) >> 14;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	111b      	asrs	r3, r3, #4
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	8952      	ldrh	r2, [r2, #10]
 8005152:	1a9b      	subs	r3, r3, r2
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	1112      	asrs	r2, r2, #4
 8005158:	6839      	ldr	r1, [r7, #0]
 800515a:	8949      	ldrh	r1, [r1, #10]
 800515c:	1a52      	subs	r2, r2, r1
 800515e:	fb02 f303 	mul.w	r3, r2, r3
 8005162:	131b      	asrs	r3, r3, #12
 8005164:	683a      	ldr	r2, [r7, #0]
 8005166:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 800516a:	fb02 f303 	mul.w	r3, r2, r3
 800516e:	139b      	asrs	r3, r3, #14
 8005170:	60fb      	str	r3, [r7, #12]
	i32FineTemperature = var1 + var2;
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	4413      	add	r3, r2
 8005178:	4a0c      	ldr	r2, [pc, #48]	; (80051ac <bme280ReadTemperature+0x100>)
 800517a:	6013      	str	r3, [r2, #0]
	sBme280Device->i32Temperature = (i32FineTemperature * 5 + 128) >> 8;
 800517c:	4b0b      	ldr	r3, [pc, #44]	; (80051ac <bme280ReadTemperature+0x100>)
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	4613      	mov	r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4413      	add	r3, r2
 8005186:	3380      	adds	r3, #128	; 0x80
 8005188:	121a      	asrs	r2, r3, #8
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	631a      	str	r2, [r3, #48]	; 0x30
	temperature_degC_x_100 = sBme280Device->i32Temperature;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005192:	61fb      	str	r3, [r7, #28]

	return temperature_degC_x_100;
 8005194:	69fb      	ldr	r3, [r7, #28]
}
 8005196:	4618      	mov	r0, r3
 8005198:	3720      	adds	r7, #32
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	0800a320 	.word	0x0800a320
 80051a4:	20000014 	.word	0x20000014
 80051a8:	20000364 	.word	0x20000364
 80051ac:	2000036c 	.word	0x2000036c

080051b0 <bme280ReadPressure>:

/**
 * Returns pressure in Pa
 */
uint32_t bme280ReadPressure(I2C_HandleTypeDef *hi2c, Bme280DeviceData *sBme280Device)
{
 80051b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051b4:	b0d4      	sub	sp, #336	; 0x150
 80051b6:	af02      	add	r7, sp, #8
 80051b8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 80051bc:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
	uint32_t pressure_Pa = 0;
 80051c0:	2300      	movs	r3, #0
 80051c2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	int8_t pressureDataQtyBytes = 3;
 80051c6:	2303      	movs	r3, #3
 80051c8:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
	uint8_t dataBytes[3] = {0, 0, 0};
 80051cc:	4bd2      	ldr	r3, [pc, #840]	; (8005518 <bme280ReadPressure+0x368>)
 80051ce:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 80051d2:	6819      	ldr	r1, [r3, #0]
 80051d4:	460b      	mov	r3, r1
 80051d6:	8013      	strh	r3, [r2, #0]
 80051d8:	3202      	adds	r2, #2
 80051da:	0c0b      	lsrs	r3, r1, #16
 80051dc:	7013      	strb	r3, [r2, #0]

	HAL_I2C_Master_Transmit(hi2c, sBme280Device->ui8Address, &sBme280Reg.ui8Press, sizeof(sBme280Reg.ui8Press), ui32TimeoutI2C);
 80051de:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80051e2:	785b      	ldrb	r3, [r3, #1]
 80051e4:	b299      	uxth	r1, r3
 80051e6:	4bcd      	ldr	r3, [pc, #820]	; (800551c <bme280ReadPressure+0x36c>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	9300      	str	r3, [sp, #0]
 80051ec:	2301      	movs	r3, #1
 80051ee:	4acc      	ldr	r2, [pc, #816]	; (8005520 <bme280ReadPressure+0x370>)
 80051f0:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 80051f4:	f7fc ffc8 	bl	8002188 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, sBme280Device->ui8Address, dataBytes, pressureDataQtyBytes, ui32TimeoutI2C);
 80051f8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80051fc:	785b      	ldrb	r3, [r3, #1]
 80051fe:	b298      	uxth	r0, r3
 8005200:	f997 3143 	ldrsb.w	r3, [r7, #323]	; 0x143
 8005204:	b299      	uxth	r1, r3
 8005206:	4bc5      	ldr	r3, [pc, #788]	; (800551c <bme280ReadPressure+0x36c>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 800520e:	9300      	str	r3, [sp, #0]
 8005210:	460b      	mov	r3, r1
 8005212:	4601      	mov	r1, r0
 8005214:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8005218:	f7fd f8b4 	bl	8002384 <HAL_I2C_Master_Receive>
	sBme280Device->ui8PressMsb = dataBytes[0];
 800521c:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8005220:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8005224:	7093      	strb	r3, [r2, #2]
	sBme280Device->ui8PressLsb = dataBytes[1];
 8005226:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 800522a:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800522e:	70d3      	strb	r3, [r2, #3]
	sBme280Device->ui8PressXlsb = dataBytes[2];
 8005230:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8005234:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8005238:	7113      	strb	r3, [r2, #4]

	int32_t adc_P = (sBme280Device->ui8PressMsb << 12) | (sBme280Device->ui8PressLsb << 4) | (sBme280Device->ui8PressXlsb >> 4);
 800523a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800523e:	789b      	ldrb	r3, [r3, #2]
 8005240:	031a      	lsls	r2, r3, #12
 8005242:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005246:	78db      	ldrb	r3, [r3, #3]
 8005248:	011b      	lsls	r3, r3, #4
 800524a:	431a      	orrs	r2, r3
 800524c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005250:	791b      	ldrb	r3, [r3, #4]
 8005252:	091b      	lsrs	r3, r3, #4
 8005254:	b2db      	uxtb	r3, r3
 8005256:	4313      	orrs	r3, r2
 8005258:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	bme280ReadTemperature(hi2c, sBme280Device);
 800525c:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8005260:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8005264:	f7ff ff22 	bl	80050ac <bme280ReadTemperature>
	int64_t var1 = ((int64_t) i32FineTemperature) - 128000;
 8005268:	4bae      	ldr	r3, [pc, #696]	; (8005524 <bme280ReadPressure+0x374>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	17da      	asrs	r2, r3, #31
 800526e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005272:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005276:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800527a:	460b      	mov	r3, r1
 800527c:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 8005280:	653b      	str	r3, [r7, #80]	; 0x50
 8005282:	4613      	mov	r3, r2
 8005284:	f143 33ff 	adc.w	r3, r3, #4294967295
 8005288:	657b      	str	r3, [r7, #84]	; 0x54
 800528a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800528e:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
	int64_t var2 = var1 * var1 * (int64_t) sBme280Device->i16DigP6;
 8005292:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8005296:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800529a:	fb03 f102 	mul.w	r1, r3, r2
 800529e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80052a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80052a6:	fb02 f303 	mul.w	r3, r2, r3
 80052aa:	18ca      	adds	r2, r1, r3
 80052ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80052b0:	fba3 4503 	umull	r4, r5, r3, r3
 80052b4:	1953      	adds	r3, r2, r5
 80052b6:	461d      	mov	r5, r3
 80052b8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80052bc:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80052c0:	b21b      	sxth	r3, r3
 80052c2:	17da      	asrs	r2, r3, #31
 80052c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80052c8:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80052cc:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80052d0:	4603      	mov	r3, r0
 80052d2:	fb03 f205 	mul.w	r2, r3, r5
 80052d6:	460b      	mov	r3, r1
 80052d8:	fb04 f303 	mul.w	r3, r4, r3
 80052dc:	4413      	add	r3, r2
 80052de:	4602      	mov	r2, r0
 80052e0:	fba4 1202 	umull	r1, r2, r4, r2
 80052e4:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80052e8:	460a      	mov	r2, r1
 80052ea:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80052ee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80052f2:	4413      	add	r3, r2
 80052f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80052f8:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 80052fc:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
 8005300:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var2 = var2 + ((var1 * (int64_t) sBme280Device->i16DigP5) << 17);
 8005304:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005308:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800530c:	b21b      	sxth	r3, r3
 800530e:	17da      	asrs	r2, r3, #31
 8005310:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005314:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005318:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800531c:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8005320:	462a      	mov	r2, r5
 8005322:	fb02 f203 	mul.w	r2, r2, r3
 8005326:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800532a:	4621      	mov	r1, r4
 800532c:	fb01 f303 	mul.w	r3, r1, r3
 8005330:	441a      	add	r2, r3
 8005332:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005336:	4621      	mov	r1, r4
 8005338:	fba3 8901 	umull	r8, r9, r3, r1
 800533c:	eb02 0309 	add.w	r3, r2, r9
 8005340:	4699      	mov	r9, r3
 8005342:	f04f 0000 	mov.w	r0, #0
 8005346:	f04f 0100 	mov.w	r1, #0
 800534a:	ea4f 4149 	mov.w	r1, r9, lsl #17
 800534e:	ea41 31d8 	orr.w	r1, r1, r8, lsr #15
 8005352:	ea4f 4048 	mov.w	r0, r8, lsl #17
 8005356:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800535a:	1814      	adds	r4, r2, r0
 800535c:	64bc      	str	r4, [r7, #72]	; 0x48
 800535e:	414b      	adcs	r3, r1
 8005360:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005362:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8005366:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var2 = var2 + (((int64_t) sBme280Device->i16DigP4) << 35);
 800536a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800536e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8005372:	b21b      	sxth	r3, r3
 8005374:	17da      	asrs	r2, r3, #31
 8005376:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800537a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800537e:	f04f 0000 	mov.w	r0, #0
 8005382:	f04f 0100 	mov.w	r1, #0
 8005386:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800538a:	00d9      	lsls	r1, r3, #3
 800538c:	2000      	movs	r0, #0
 800538e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8005392:	1814      	adds	r4, r2, r0
 8005394:	643c      	str	r4, [r7, #64]	; 0x40
 8005396:	414b      	adcs	r3, r1
 8005398:	647b      	str	r3, [r7, #68]	; 0x44
 800539a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800539e:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var1 = ((var1 * var1 * (int64_t) sBme280Device->i16DigP3) >> 8) + ((var1 * (int64_t) sBme280Device->i16DigP2) << 12);
 80053a2:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80053a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80053aa:	fb03 f102 	mul.w	r1, r3, r2
 80053ae:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80053b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80053b6:	fb02 f303 	mul.w	r3, r2, r3
 80053ba:	18ca      	adds	r2, r1, r3
 80053bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80053c0:	fba3 ab03 	umull	sl, fp, r3, r3
 80053c4:	eb02 030b 	add.w	r3, r2, fp
 80053c8:	469b      	mov	fp, r3
 80053ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80053ce:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80053d2:	b21b      	sxth	r3, r3
 80053d4:	17da      	asrs	r2, r3, #31
 80053d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80053da:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80053de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80053e2:	4603      	mov	r3, r0
 80053e4:	fb03 f20b 	mul.w	r2, r3, fp
 80053e8:	460b      	mov	r3, r1
 80053ea:	fb0a f303 	mul.w	r3, sl, r3
 80053ee:	4413      	add	r3, r2
 80053f0:	4602      	mov	r2, r0
 80053f2:	fbaa 1202 	umull	r1, r2, sl, r2
 80053f6:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80053fa:	460a      	mov	r2, r1
 80053fc:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8005400:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005404:	4413      	add	r3, r2
 8005406:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800540a:	f04f 0000 	mov.w	r0, #0
 800540e:	f04f 0100 	mov.w	r1, #0
 8005412:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8005416:	4623      	mov	r3, r4
 8005418:	0a18      	lsrs	r0, r3, #8
 800541a:	462b      	mov	r3, r5
 800541c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8005420:	462b      	mov	r3, r5
 8005422:	1219      	asrs	r1, r3, #8
 8005424:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005428:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800542c:	b21b      	sxth	r3, r3
 800542e:	17da      	asrs	r2, r3, #31
 8005430:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005434:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005438:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800543c:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8005440:	464a      	mov	r2, r9
 8005442:	fb02 f203 	mul.w	r2, r2, r3
 8005446:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800544a:	4644      	mov	r4, r8
 800544c:	fb04 f303 	mul.w	r3, r4, r3
 8005450:	441a      	add	r2, r3
 8005452:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005456:	4644      	mov	r4, r8
 8005458:	fba3 4304 	umull	r4, r3, r3, r4
 800545c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005460:	4623      	mov	r3, r4
 8005462:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005466:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800546a:	18d3      	adds	r3, r2, r3
 800546c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005470:	f04f 0200 	mov.w	r2, #0
 8005474:	f04f 0300 	mov.w	r3, #0
 8005478:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 800547c:	464c      	mov	r4, r9
 800547e:	0323      	lsls	r3, r4, #12
 8005480:	4644      	mov	r4, r8
 8005482:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8005486:	4644      	mov	r4, r8
 8005488:	0322      	lsls	r2, r4, #12
 800548a:	1884      	adds	r4, r0, r2
 800548c:	63bc      	str	r4, [r7, #56]	; 0x38
 800548e:	eb41 0303 	adc.w	r3, r1, r3
 8005492:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005494:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8005498:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
	var1 = (((((int64_t) 1) << 47) + var1)) * ((int64_t) sBme280Device->ui16DigP1) >> 33;
 800549c:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 80054a0:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80054a4:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
 80054a8:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 80054ac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80054b0:	8a1b      	ldrh	r3, [r3, #16]
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	2200      	movs	r2, #0
 80054b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80054ba:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80054be:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 80054c2:	462b      	mov	r3, r5
 80054c4:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 80054c8:	4642      	mov	r2, r8
 80054ca:	fb02 f203 	mul.w	r2, r2, r3
 80054ce:	464b      	mov	r3, r9
 80054d0:	4621      	mov	r1, r4
 80054d2:	fb01 f303 	mul.w	r3, r1, r3
 80054d6:	4413      	add	r3, r2
 80054d8:	4622      	mov	r2, r4
 80054da:	4641      	mov	r1, r8
 80054dc:	fba2 1201 	umull	r1, r2, r2, r1
 80054e0:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80054e4:	460a      	mov	r2, r1
 80054e6:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 80054ea:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80054ee:	4413      	add	r3, r2
 80054f0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80054f4:	f04f 0200 	mov.w	r2, #0
 80054f8:	f04f 0300 	mov.w	r3, #0
 80054fc:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8005500:	4629      	mov	r1, r5
 8005502:	104a      	asrs	r2, r1, #1
 8005504:	4629      	mov	r1, r5
 8005506:	17cb      	asrs	r3, r1, #31
 8005508:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
	if (var1 == 0) { return 0; }
 800550c:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8005510:	4313      	orrs	r3, r2
 8005512:	d109      	bne.n	8005528 <bme280ReadPressure+0x378>
 8005514:	2300      	movs	r3, #0
 8005516:	e173      	b.n	8005800 <bme280ReadPressure+0x650>
 8005518:	0800a320 	.word	0x0800a320
 800551c:	20000014 	.word	0x20000014
 8005520:	20000363 	.word	0x20000363
 8005524:	2000036c 	.word	0x2000036c
	int64_t p_aux = 1048576 - adc_P;
 8005528:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800552c:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8005530:	17da      	asrs	r2, r3, #31
 8005532:	633b      	str	r3, [r7, #48]	; 0x30
 8005534:	637a      	str	r2, [r7, #52]	; 0x34
 8005536:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800553a:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	p_aux = (((p_aux << 31) - var2) * 3125) / var1;
 800553e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005542:	105b      	asrs	r3, r3, #1
 8005544:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005548:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800554c:	07db      	lsls	r3, r3, #31
 800554e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005552:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8005556:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800555a:	4621      	mov	r1, r4
 800555c:	1a89      	subs	r1, r1, r2
 800555e:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8005562:	4629      	mov	r1, r5
 8005564:	eb61 0303 	sbc.w	r3, r1, r3
 8005568:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800556c:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8005570:	4622      	mov	r2, r4
 8005572:	462b      	mov	r3, r5
 8005574:	1891      	adds	r1, r2, r2
 8005576:	62b9      	str	r1, [r7, #40]	; 0x28
 8005578:	415b      	adcs	r3, r3
 800557a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800557c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005580:	4621      	mov	r1, r4
 8005582:	1851      	adds	r1, r2, r1
 8005584:	6239      	str	r1, [r7, #32]
 8005586:	4629      	mov	r1, r5
 8005588:	414b      	adcs	r3, r1
 800558a:	627b      	str	r3, [r7, #36]	; 0x24
 800558c:	f04f 0200 	mov.w	r2, #0
 8005590:	f04f 0300 	mov.w	r3, #0
 8005594:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005598:	4649      	mov	r1, r9
 800559a:	018b      	lsls	r3, r1, #6
 800559c:	4641      	mov	r1, r8
 800559e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80055a2:	4641      	mov	r1, r8
 80055a4:	018a      	lsls	r2, r1, #6
 80055a6:	4641      	mov	r1, r8
 80055a8:	1889      	adds	r1, r1, r2
 80055aa:	61b9      	str	r1, [r7, #24]
 80055ac:	4649      	mov	r1, r9
 80055ae:	eb43 0101 	adc.w	r1, r3, r1
 80055b2:	61f9      	str	r1, [r7, #28]
 80055b4:	f04f 0200 	mov.w	r2, #0
 80055b8:	f04f 0300 	mov.w	r3, #0
 80055bc:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80055c0:	4649      	mov	r1, r9
 80055c2:	008b      	lsls	r3, r1, #2
 80055c4:	4641      	mov	r1, r8
 80055c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055ca:	4641      	mov	r1, r8
 80055cc:	008a      	lsls	r2, r1, #2
 80055ce:	4610      	mov	r0, r2
 80055d0:	4619      	mov	r1, r3
 80055d2:	4603      	mov	r3, r0
 80055d4:	4622      	mov	r2, r4
 80055d6:	189b      	adds	r3, r3, r2
 80055d8:	613b      	str	r3, [r7, #16]
 80055da:	460b      	mov	r3, r1
 80055dc:	462a      	mov	r2, r5
 80055de:	eb42 0303 	adc.w	r3, r2, r3
 80055e2:	617b      	str	r3, [r7, #20]
 80055e4:	f04f 0200 	mov.w	r2, #0
 80055e8:	f04f 0300 	mov.w	r3, #0
 80055ec:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80055f0:	4649      	mov	r1, r9
 80055f2:	008b      	lsls	r3, r1, #2
 80055f4:	4641      	mov	r1, r8
 80055f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055fa:	4641      	mov	r1, r8
 80055fc:	008a      	lsls	r2, r1, #2
 80055fe:	4610      	mov	r0, r2
 8005600:	4619      	mov	r1, r3
 8005602:	4603      	mov	r3, r0
 8005604:	4622      	mov	r2, r4
 8005606:	189b      	adds	r3, r3, r2
 8005608:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800560c:	462b      	mov	r3, r5
 800560e:	460a      	mov	r2, r1
 8005610:	eb42 0303 	adc.w	r3, r2, r3
 8005614:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005618:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800561c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005620:	f7fb fb52 	bl	8000cc8 <__aeabi_ldivmod>
 8005624:	4602      	mov	r2, r0
 8005626:	460b      	mov	r3, r1
 8005628:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var1 = (((int64_t) sBme280Device->i16DigP9) * (p_aux >> 13) * (p_aux >> 13)) >> 25;
 800562c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005630:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8005634:	b21b      	sxth	r3, r3
 8005636:	17da      	asrs	r2, r3, #31
 8005638:	67bb      	str	r3, [r7, #120]	; 0x78
 800563a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800563c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8005640:	f04f 0000 	mov.w	r0, #0
 8005644:	f04f 0100 	mov.w	r1, #0
 8005648:	0b50      	lsrs	r0, r2, #13
 800564a:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800564e:	1359      	asrs	r1, r3, #13
 8005650:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8005654:	462b      	mov	r3, r5
 8005656:	fb00 f203 	mul.w	r2, r0, r3
 800565a:	4623      	mov	r3, r4
 800565c:	fb03 f301 	mul.w	r3, r3, r1
 8005660:	4413      	add	r3, r2
 8005662:	4622      	mov	r2, r4
 8005664:	fba2 1200 	umull	r1, r2, r2, r0
 8005668:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800566c:	460a      	mov	r2, r1
 800566e:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8005672:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8005676:	4413      	add	r3, r2
 8005678:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800567c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8005680:	f04f 0000 	mov.w	r0, #0
 8005684:	f04f 0100 	mov.w	r1, #0
 8005688:	0b50      	lsrs	r0, r2, #13
 800568a:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800568e:	1359      	asrs	r1, r3, #13
 8005690:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8005694:	462b      	mov	r3, r5
 8005696:	fb00 f203 	mul.w	r2, r0, r3
 800569a:	4623      	mov	r3, r4
 800569c:	fb03 f301 	mul.w	r3, r3, r1
 80056a0:	4413      	add	r3, r2
 80056a2:	4622      	mov	r2, r4
 80056a4:	fba2 1200 	umull	r1, r2, r2, r0
 80056a8:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80056ac:	460a      	mov	r2, r1
 80056ae:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 80056b2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80056b6:	4413      	add	r3, r2
 80056b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80056bc:	f04f 0200 	mov.w	r2, #0
 80056c0:	f04f 0300 	mov.w	r3, #0
 80056c4:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80056c8:	4621      	mov	r1, r4
 80056ca:	0e4a      	lsrs	r2, r1, #25
 80056cc:	4629      	mov	r1, r5
 80056ce:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80056d2:	4629      	mov	r1, r5
 80056d4:	164b      	asrs	r3, r1, #25
 80056d6:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
	var2 = (((int64_t) sBme280Device->i16DigP8) * p_aux) >> 19;
 80056da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80056de:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80056e2:	b21b      	sxth	r3, r3
 80056e4:	17da      	asrs	r2, r3, #31
 80056e6:	673b      	str	r3, [r7, #112]	; 0x70
 80056e8:	677a      	str	r2, [r7, #116]	; 0x74
 80056ea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80056ee:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 80056f2:	462a      	mov	r2, r5
 80056f4:	fb02 f203 	mul.w	r2, r2, r3
 80056f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80056fc:	4621      	mov	r1, r4
 80056fe:	fb01 f303 	mul.w	r3, r1, r3
 8005702:	441a      	add	r2, r3
 8005704:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005708:	4621      	mov	r1, r4
 800570a:	fba3 1301 	umull	r1, r3, r3, r1
 800570e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005712:	460b      	mov	r3, r1
 8005714:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800571c:	18d3      	adds	r3, r2, r3
 800571e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005722:	f04f 0200 	mov.w	r2, #0
 8005726:	f04f 0300 	mov.w	r3, #0
 800572a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800572e:	4621      	mov	r1, r4
 8005730:	0cca      	lsrs	r2, r1, #19
 8005732:	4629      	mov	r1, r5
 8005734:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8005738:	4629      	mov	r1, r5
 800573a:	14cb      	asrs	r3, r1, #19
 800573c:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	p_aux = ((p_aux + var1 + var2) >> 8) + (((int64_t) sBme280Device->i16DigP7) << 4);
 8005740:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8005744:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8005748:	1884      	adds	r4, r0, r2
 800574a:	66bc      	str	r4, [r7, #104]	; 0x68
 800574c:	eb41 0303 	adc.w	r3, r1, r3
 8005750:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005752:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8005756:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800575a:	4621      	mov	r1, r4
 800575c:	1889      	adds	r1, r1, r2
 800575e:	6639      	str	r1, [r7, #96]	; 0x60
 8005760:	4629      	mov	r1, r5
 8005762:	eb43 0101 	adc.w	r1, r3, r1
 8005766:	6679      	str	r1, [r7, #100]	; 0x64
 8005768:	f04f 0000 	mov.w	r0, #0
 800576c:	f04f 0100 	mov.w	r1, #0
 8005770:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005774:	4623      	mov	r3, r4
 8005776:	0a18      	lsrs	r0, r3, #8
 8005778:	462b      	mov	r3, r5
 800577a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800577e:	462b      	mov	r3, r5
 8005780:	1219      	asrs	r1, r3, #8
 8005782:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005786:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800578a:	b21b      	sxth	r3, r3
 800578c:	17da      	asrs	r2, r3, #31
 800578e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005790:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005792:	f04f 0200 	mov.w	r2, #0
 8005796:	f04f 0300 	mov.w	r3, #0
 800579a:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 800579e:	464c      	mov	r4, r9
 80057a0:	0123      	lsls	r3, r4, #4
 80057a2:	4644      	mov	r4, r8
 80057a4:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80057a8:	4644      	mov	r4, r8
 80057aa:	0122      	lsls	r2, r4, #4
 80057ac:	1884      	adds	r4, r0, r2
 80057ae:	60bc      	str	r4, [r7, #8]
 80057b0:	eb41 0303 	adc.w	r3, r1, r3
 80057b4:	60fb      	str	r3, [r7, #12]
 80057b6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80057ba:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	pressure_Pa = p_aux / 256;
 80057be:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	da07      	bge.n	80057d6 <bme280ReadPressure+0x626>
 80057c6:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 80057ca:	6039      	str	r1, [r7, #0]
 80057cc:	f143 0300 	adc.w	r3, r3, #0
 80057d0:	607b      	str	r3, [r7, #4]
 80057d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057d6:	f04f 0000 	mov.w	r0, #0
 80057da:	f04f 0100 	mov.w	r1, #0
 80057de:	0a10      	lsrs	r0, r2, #8
 80057e0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80057e4:	1219      	asrs	r1, r3, #8
 80057e6:	4602      	mov	r2, r0
 80057e8:	460b      	mov	r3, r1
 80057ea:	4613      	mov	r3, r2
 80057ec:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	sBme280Device->ui32Pressure = pressure_Pa;
 80057f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80057f4:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80057f8:	635a      	str	r2, [r3, #52]	; 0x34

	return sBme280Device->ui32Pressure;
 80057fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80057fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8005800:	4618      	mov	r0, r3
 8005802:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8005806:	46bd      	mov	sp, r7
 8005808:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800580c <bme280ReadHumidity>:

/**
 * Returns humidity in %RH
 */
uint32_t bme280ReadHumidity(I2C_HandleTypeDef *hi2c, Bme280DeviceData *sBme280Device)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b08a      	sub	sp, #40	; 0x28
 8005810:	af02      	add	r7, sp, #8
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
	uint32_t humidity_RH_x_10 = 0;
 8005816:	2300      	movs	r3, #0
 8005818:	61fb      	str	r3, [r7, #28]
	int8_t humidityDataQtyBytes = 2;
 800581a:	2302      	movs	r3, #2
 800581c:	76fb      	strb	r3, [r7, #27]
	uint8_t dataBytes[2] = {0, 0};
 800581e:	2300      	movs	r3, #0
 8005820:	81bb      	strh	r3, [r7, #12]

	HAL_I2C_Master_Transmit(hi2c, sBme280Device->ui8Address, &sBme280Reg.ui8Hum, sizeof(sBme280Reg.ui8Hum), ui32TimeoutI2C);
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	785b      	ldrb	r3, [r3, #1]
 8005826:	b299      	uxth	r1, r3
 8005828:	4b46      	ldr	r3, [pc, #280]	; (8005944 <bme280ReadHumidity+0x138>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	2301      	movs	r3, #1
 8005830:	4a45      	ldr	r2, [pc, #276]	; (8005948 <bme280ReadHumidity+0x13c>)
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7fc fca8 	bl	8002188 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, sBme280Device->ui8Address, dataBytes, humidityDataQtyBytes, ui32TimeoutI2C);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	785b      	ldrb	r3, [r3, #1]
 800583c:	b299      	uxth	r1, r3
 800583e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005842:	b298      	uxth	r0, r3
 8005844:	4b3f      	ldr	r3, [pc, #252]	; (8005944 <bme280ReadHumidity+0x138>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f107 020c 	add.w	r2, r7, #12
 800584c:	9300      	str	r3, [sp, #0]
 800584e:	4603      	mov	r3, r0
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f7fc fd97 	bl	8002384 <HAL_I2C_Master_Receive>
	sBme280Device->ui8HumMsb = dataBytes[0];
 8005856:	7b3a      	ldrb	r2, [r7, #12]
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	721a      	strb	r2, [r3, #8]
	sBme280Device->ui8HumLsb = dataBytes[1];
 800585c:	7b7a      	ldrb	r2, [r7, #13]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	725a      	strb	r2, [r3, #9]

	int32_t adc_H = (sBme280Device->ui8HumMsb << 8) | sBme280Device->ui8HumLsb;
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	7a1b      	ldrb	r3, [r3, #8]
 8005866:	021b      	lsls	r3, r3, #8
 8005868:	683a      	ldr	r2, [r7, #0]
 800586a:	7a52      	ldrb	r2, [r2, #9]
 800586c:	4313      	orrs	r3, r2
 800586e:	617b      	str	r3, [r7, #20]
	bme280ReadTemperature(hi2c, sBme280Device);
 8005870:	6839      	ldr	r1, [r7, #0]
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7ff fc1a 	bl	80050ac <bme280ReadTemperature>
	int32_t v_x1_u32r = (i32FineTemperature - ((int32_t) 76800));
 8005878:	4b34      	ldr	r3, [pc, #208]	; (800594c <bme280ReadHumidity+0x140>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8005880:	613b      	str	r3, [r7, #16]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t) sBme280Device->i16DigH4) << 20) - (((int32_t) sBme280Device->i16DigH5) * v_x1_u32r)) +
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	039a      	lsls	r2, r3, #14
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800588c:	051b      	lsls	r3, r3, #20
 800588e:	1ad2      	subs	r2, r2, r3
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8005896:	4619      	mov	r1, r3
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	fb01 f303 	mul.w	r3, r1, r3
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
			((int32_t) 16384)) >> 15) * (((((((v_x1_u32r * ((int32_t) sBme280Device->i8DigH6)) >> 10) *
 80058a4:	13db      	asrs	r3, r3, #15
 80058a6:	683a      	ldr	r2, [r7, #0]
 80058a8:	f992 202c 	ldrsb.w	r2, [r2, #44]	; 0x2c
 80058ac:	4611      	mov	r1, r2
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	fb01 f202 	mul.w	r2, r1, r2
 80058b4:	1292      	asrs	r2, r2, #10
			(((v_x1_u32r * ((int32_t) sBme280Device->ui8DigH3)) >> 11) + ((int32_t) 32768))) >> 10) + ((int32_t) 2097152)) *
 80058b6:	6839      	ldr	r1, [r7, #0]
 80058b8:	f891 1026 	ldrb.w	r1, [r1, #38]	; 0x26
 80058bc:	4608      	mov	r0, r1
 80058be:	6939      	ldr	r1, [r7, #16]
 80058c0:	fb00 f101 	mul.w	r1, r0, r1
 80058c4:	12c9      	asrs	r1, r1, #11
 80058c6:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
			((int32_t) 16384)) >> 15) * (((((((v_x1_u32r * ((int32_t) sBme280Device->i8DigH6)) >> 10) *
 80058ca:	fb01 f202 	mul.w	r2, r1, r2
			(((v_x1_u32r * ((int32_t) sBme280Device->ui8DigH3)) >> 11) + ((int32_t) 32768))) >> 10) + ((int32_t) 2097152)) *
 80058ce:	1292      	asrs	r2, r2, #10
 80058d0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
			((int32_t) sBme280Device->i16DigH2) + 8192) >> 14));
 80058d4:	6839      	ldr	r1, [r7, #0]
 80058d6:	f9b1 1024 	ldrsh.w	r1, [r1, #36]	; 0x24
			(((v_x1_u32r * ((int32_t) sBme280Device->ui8DigH3)) >> 11) + ((int32_t) 32768))) >> 10) + ((int32_t) 2097152)) *
 80058da:	fb01 f202 	mul.w	r2, r1, r2
			((int32_t) sBme280Device->i16DigH2) + 8192) >> 14));
 80058de:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80058e2:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t) sBme280Device->i16DigH4) << 20) - (((int32_t) sBme280Device->i16DigH5) * v_x1_u32r)) +
 80058e4:	fb02 f303 	mul.w	r3, r2, r3
 80058e8:	613b      	str	r3, [r7, #16]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) * ((int32_t) sBme280Device->ui8DigH1)) >> 4));
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	13db      	asrs	r3, r3, #15
 80058ee:	693a      	ldr	r2, [r7, #16]
 80058f0:	13d2      	asrs	r2, r2, #15
 80058f2:	fb02 f303 	mul.w	r3, r2, r3
 80058f6:	11db      	asrs	r3, r3, #7
 80058f8:	683a      	ldr	r2, [r7, #0]
 80058fa:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 80058fe:	fb02 f303 	mul.w	r3, r2, r3
 8005902:	111b      	asrs	r3, r3, #4
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	613b      	str	r3, [r7, #16]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005910:	613b      	str	r3, [r7, #16]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8005918:	bfa8      	it	ge
 800591a:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 800591e:	613b      	str	r3, [r7, #16]
	humidity_RH_x_10 = (((uint32_t) (v_x1_u32r >> 12)) / 102);
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	131b      	asrs	r3, r3, #12
 8005924:	461a      	mov	r2, r3
 8005926:	4b0a      	ldr	r3, [pc, #40]	; (8005950 <bme280ReadHumidity+0x144>)
 8005928:	fba3 2302 	umull	r2, r3, r3, r2
 800592c:	099b      	lsrs	r3, r3, #6
 800592e:	61fb      	str	r3, [r7, #28]
	sBme280Device->ui32Humidity = humidity_RH_x_10;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	69fa      	ldr	r2, [r7, #28]
 8005934:	639a      	str	r2, [r3, #56]	; 0x38

	return sBme280Device->ui32Humidity;
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800593a:	4618      	mov	r0, r3
 800593c:	3720      	adds	r7, #32
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	20000014 	.word	0x20000014
 8005948:	20000365 	.word	0x20000365
 800594c:	2000036c 	.word	0x2000036c
 8005950:	a0a0a0a1 	.word	0xa0a0a0a1

08005954 <__errno>:
 8005954:	4b01      	ldr	r3, [pc, #4]	; (800595c <__errno+0x8>)
 8005956:	6818      	ldr	r0, [r3, #0]
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	20000018 	.word	0x20000018

08005960 <__libc_init_array>:
 8005960:	b570      	push	{r4, r5, r6, lr}
 8005962:	4d0d      	ldr	r5, [pc, #52]	; (8005998 <__libc_init_array+0x38>)
 8005964:	4c0d      	ldr	r4, [pc, #52]	; (800599c <__libc_init_array+0x3c>)
 8005966:	1b64      	subs	r4, r4, r5
 8005968:	10a4      	asrs	r4, r4, #2
 800596a:	2600      	movs	r6, #0
 800596c:	42a6      	cmp	r6, r4
 800596e:	d109      	bne.n	8005984 <__libc_init_array+0x24>
 8005970:	4d0b      	ldr	r5, [pc, #44]	; (80059a0 <__libc_init_array+0x40>)
 8005972:	4c0c      	ldr	r4, [pc, #48]	; (80059a4 <__libc_init_array+0x44>)
 8005974:	f004 fc90 	bl	800a298 <_init>
 8005978:	1b64      	subs	r4, r4, r5
 800597a:	10a4      	asrs	r4, r4, #2
 800597c:	2600      	movs	r6, #0
 800597e:	42a6      	cmp	r6, r4
 8005980:	d105      	bne.n	800598e <__libc_init_array+0x2e>
 8005982:	bd70      	pop	{r4, r5, r6, pc}
 8005984:	f855 3b04 	ldr.w	r3, [r5], #4
 8005988:	4798      	blx	r3
 800598a:	3601      	adds	r6, #1
 800598c:	e7ee      	b.n	800596c <__libc_init_array+0xc>
 800598e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005992:	4798      	blx	r3
 8005994:	3601      	adds	r6, #1
 8005996:	e7f2      	b.n	800597e <__libc_init_array+0x1e>
 8005998:	0800a7ec 	.word	0x0800a7ec
 800599c:	0800a7ec 	.word	0x0800a7ec
 80059a0:	0800a7ec 	.word	0x0800a7ec
 80059a4:	0800a7f0 	.word	0x0800a7f0

080059a8 <memset>:
 80059a8:	4402      	add	r2, r0
 80059aa:	4603      	mov	r3, r0
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d100      	bne.n	80059b2 <memset+0xa>
 80059b0:	4770      	bx	lr
 80059b2:	f803 1b01 	strb.w	r1, [r3], #1
 80059b6:	e7f9      	b.n	80059ac <memset+0x4>

080059b8 <__cvt>:
 80059b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059bc:	ec55 4b10 	vmov	r4, r5, d0
 80059c0:	2d00      	cmp	r5, #0
 80059c2:	460e      	mov	r6, r1
 80059c4:	4619      	mov	r1, r3
 80059c6:	462b      	mov	r3, r5
 80059c8:	bfbb      	ittet	lt
 80059ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80059ce:	461d      	movlt	r5, r3
 80059d0:	2300      	movge	r3, #0
 80059d2:	232d      	movlt	r3, #45	; 0x2d
 80059d4:	700b      	strb	r3, [r1, #0]
 80059d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80059dc:	4691      	mov	r9, r2
 80059de:	f023 0820 	bic.w	r8, r3, #32
 80059e2:	bfbc      	itt	lt
 80059e4:	4622      	movlt	r2, r4
 80059e6:	4614      	movlt	r4, r2
 80059e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80059ec:	d005      	beq.n	80059fa <__cvt+0x42>
 80059ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80059f2:	d100      	bne.n	80059f6 <__cvt+0x3e>
 80059f4:	3601      	adds	r6, #1
 80059f6:	2102      	movs	r1, #2
 80059f8:	e000      	b.n	80059fc <__cvt+0x44>
 80059fa:	2103      	movs	r1, #3
 80059fc:	ab03      	add	r3, sp, #12
 80059fe:	9301      	str	r3, [sp, #4]
 8005a00:	ab02      	add	r3, sp, #8
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	ec45 4b10 	vmov	d0, r4, r5
 8005a08:	4653      	mov	r3, sl
 8005a0a:	4632      	mov	r2, r6
 8005a0c:	f001 fdac 	bl	8007568 <_dtoa_r>
 8005a10:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005a14:	4607      	mov	r7, r0
 8005a16:	d102      	bne.n	8005a1e <__cvt+0x66>
 8005a18:	f019 0f01 	tst.w	r9, #1
 8005a1c:	d022      	beq.n	8005a64 <__cvt+0xac>
 8005a1e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005a22:	eb07 0906 	add.w	r9, r7, r6
 8005a26:	d110      	bne.n	8005a4a <__cvt+0x92>
 8005a28:	783b      	ldrb	r3, [r7, #0]
 8005a2a:	2b30      	cmp	r3, #48	; 0x30
 8005a2c:	d10a      	bne.n	8005a44 <__cvt+0x8c>
 8005a2e:	2200      	movs	r2, #0
 8005a30:	2300      	movs	r3, #0
 8005a32:	4620      	mov	r0, r4
 8005a34:	4629      	mov	r1, r5
 8005a36:	f7fb f867 	bl	8000b08 <__aeabi_dcmpeq>
 8005a3a:	b918      	cbnz	r0, 8005a44 <__cvt+0x8c>
 8005a3c:	f1c6 0601 	rsb	r6, r6, #1
 8005a40:	f8ca 6000 	str.w	r6, [sl]
 8005a44:	f8da 3000 	ldr.w	r3, [sl]
 8005a48:	4499      	add	r9, r3
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	4620      	mov	r0, r4
 8005a50:	4629      	mov	r1, r5
 8005a52:	f7fb f859 	bl	8000b08 <__aeabi_dcmpeq>
 8005a56:	b108      	cbz	r0, 8005a5c <__cvt+0xa4>
 8005a58:	f8cd 900c 	str.w	r9, [sp, #12]
 8005a5c:	2230      	movs	r2, #48	; 0x30
 8005a5e:	9b03      	ldr	r3, [sp, #12]
 8005a60:	454b      	cmp	r3, r9
 8005a62:	d307      	bcc.n	8005a74 <__cvt+0xbc>
 8005a64:	9b03      	ldr	r3, [sp, #12]
 8005a66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a68:	1bdb      	subs	r3, r3, r7
 8005a6a:	4638      	mov	r0, r7
 8005a6c:	6013      	str	r3, [r2, #0]
 8005a6e:	b004      	add	sp, #16
 8005a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a74:	1c59      	adds	r1, r3, #1
 8005a76:	9103      	str	r1, [sp, #12]
 8005a78:	701a      	strb	r2, [r3, #0]
 8005a7a:	e7f0      	b.n	8005a5e <__cvt+0xa6>

08005a7c <__exponent>:
 8005a7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2900      	cmp	r1, #0
 8005a82:	bfb8      	it	lt
 8005a84:	4249      	neglt	r1, r1
 8005a86:	f803 2b02 	strb.w	r2, [r3], #2
 8005a8a:	bfb4      	ite	lt
 8005a8c:	222d      	movlt	r2, #45	; 0x2d
 8005a8e:	222b      	movge	r2, #43	; 0x2b
 8005a90:	2909      	cmp	r1, #9
 8005a92:	7042      	strb	r2, [r0, #1]
 8005a94:	dd2a      	ble.n	8005aec <__exponent+0x70>
 8005a96:	f10d 0407 	add.w	r4, sp, #7
 8005a9a:	46a4      	mov	ip, r4
 8005a9c:	270a      	movs	r7, #10
 8005a9e:	46a6      	mov	lr, r4
 8005aa0:	460a      	mov	r2, r1
 8005aa2:	fb91 f6f7 	sdiv	r6, r1, r7
 8005aa6:	fb07 1516 	mls	r5, r7, r6, r1
 8005aaa:	3530      	adds	r5, #48	; 0x30
 8005aac:	2a63      	cmp	r2, #99	; 0x63
 8005aae:	f104 34ff 	add.w	r4, r4, #4294967295
 8005ab2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005ab6:	4631      	mov	r1, r6
 8005ab8:	dcf1      	bgt.n	8005a9e <__exponent+0x22>
 8005aba:	3130      	adds	r1, #48	; 0x30
 8005abc:	f1ae 0502 	sub.w	r5, lr, #2
 8005ac0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005ac4:	1c44      	adds	r4, r0, #1
 8005ac6:	4629      	mov	r1, r5
 8005ac8:	4561      	cmp	r1, ip
 8005aca:	d30a      	bcc.n	8005ae2 <__exponent+0x66>
 8005acc:	f10d 0209 	add.w	r2, sp, #9
 8005ad0:	eba2 020e 	sub.w	r2, r2, lr
 8005ad4:	4565      	cmp	r5, ip
 8005ad6:	bf88      	it	hi
 8005ad8:	2200      	movhi	r2, #0
 8005ada:	4413      	add	r3, r2
 8005adc:	1a18      	subs	r0, r3, r0
 8005ade:	b003      	add	sp, #12
 8005ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ae2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ae6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005aea:	e7ed      	b.n	8005ac8 <__exponent+0x4c>
 8005aec:	2330      	movs	r3, #48	; 0x30
 8005aee:	3130      	adds	r1, #48	; 0x30
 8005af0:	7083      	strb	r3, [r0, #2]
 8005af2:	70c1      	strb	r1, [r0, #3]
 8005af4:	1d03      	adds	r3, r0, #4
 8005af6:	e7f1      	b.n	8005adc <__exponent+0x60>

08005af8 <_printf_float>:
 8005af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005afc:	ed2d 8b02 	vpush	{d8}
 8005b00:	b08d      	sub	sp, #52	; 0x34
 8005b02:	460c      	mov	r4, r1
 8005b04:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005b08:	4616      	mov	r6, r2
 8005b0a:	461f      	mov	r7, r3
 8005b0c:	4605      	mov	r5, r0
 8005b0e:	f002 fe89 	bl	8008824 <_localeconv_r>
 8005b12:	f8d0 a000 	ldr.w	sl, [r0]
 8005b16:	4650      	mov	r0, sl
 8005b18:	f7fa fb7a 	bl	8000210 <strlen>
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	930a      	str	r3, [sp, #40]	; 0x28
 8005b20:	6823      	ldr	r3, [r4, #0]
 8005b22:	9305      	str	r3, [sp, #20]
 8005b24:	f8d8 3000 	ldr.w	r3, [r8]
 8005b28:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005b2c:	3307      	adds	r3, #7
 8005b2e:	f023 0307 	bic.w	r3, r3, #7
 8005b32:	f103 0208 	add.w	r2, r3, #8
 8005b36:	f8c8 2000 	str.w	r2, [r8]
 8005b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005b42:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005b46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005b4a:	9307      	str	r3, [sp, #28]
 8005b4c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005b50:	ee08 0a10 	vmov	s16, r0
 8005b54:	4b9f      	ldr	r3, [pc, #636]	; (8005dd4 <_printf_float+0x2dc>)
 8005b56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b5e:	f7fb f805 	bl	8000b6c <__aeabi_dcmpun>
 8005b62:	bb88      	cbnz	r0, 8005bc8 <_printf_float+0xd0>
 8005b64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b68:	4b9a      	ldr	r3, [pc, #616]	; (8005dd4 <_printf_float+0x2dc>)
 8005b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b6e:	f7fa ffdf 	bl	8000b30 <__aeabi_dcmple>
 8005b72:	bb48      	cbnz	r0, 8005bc8 <_printf_float+0xd0>
 8005b74:	2200      	movs	r2, #0
 8005b76:	2300      	movs	r3, #0
 8005b78:	4640      	mov	r0, r8
 8005b7a:	4649      	mov	r1, r9
 8005b7c:	f7fa ffce 	bl	8000b1c <__aeabi_dcmplt>
 8005b80:	b110      	cbz	r0, 8005b88 <_printf_float+0x90>
 8005b82:	232d      	movs	r3, #45	; 0x2d
 8005b84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b88:	4b93      	ldr	r3, [pc, #588]	; (8005dd8 <_printf_float+0x2e0>)
 8005b8a:	4894      	ldr	r0, [pc, #592]	; (8005ddc <_printf_float+0x2e4>)
 8005b8c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005b90:	bf94      	ite	ls
 8005b92:	4698      	movls	r8, r3
 8005b94:	4680      	movhi	r8, r0
 8005b96:	2303      	movs	r3, #3
 8005b98:	6123      	str	r3, [r4, #16]
 8005b9a:	9b05      	ldr	r3, [sp, #20]
 8005b9c:	f023 0204 	bic.w	r2, r3, #4
 8005ba0:	6022      	str	r2, [r4, #0]
 8005ba2:	f04f 0900 	mov.w	r9, #0
 8005ba6:	9700      	str	r7, [sp, #0]
 8005ba8:	4633      	mov	r3, r6
 8005baa:	aa0b      	add	r2, sp, #44	; 0x2c
 8005bac:	4621      	mov	r1, r4
 8005bae:	4628      	mov	r0, r5
 8005bb0:	f000 f9d8 	bl	8005f64 <_printf_common>
 8005bb4:	3001      	adds	r0, #1
 8005bb6:	f040 8090 	bne.w	8005cda <_printf_float+0x1e2>
 8005bba:	f04f 30ff 	mov.w	r0, #4294967295
 8005bbe:	b00d      	add	sp, #52	; 0x34
 8005bc0:	ecbd 8b02 	vpop	{d8}
 8005bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bc8:	4642      	mov	r2, r8
 8005bca:	464b      	mov	r3, r9
 8005bcc:	4640      	mov	r0, r8
 8005bce:	4649      	mov	r1, r9
 8005bd0:	f7fa ffcc 	bl	8000b6c <__aeabi_dcmpun>
 8005bd4:	b140      	cbz	r0, 8005be8 <_printf_float+0xf0>
 8005bd6:	464b      	mov	r3, r9
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	bfbc      	itt	lt
 8005bdc:	232d      	movlt	r3, #45	; 0x2d
 8005bde:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005be2:	487f      	ldr	r0, [pc, #508]	; (8005de0 <_printf_float+0x2e8>)
 8005be4:	4b7f      	ldr	r3, [pc, #508]	; (8005de4 <_printf_float+0x2ec>)
 8005be6:	e7d1      	b.n	8005b8c <_printf_float+0x94>
 8005be8:	6863      	ldr	r3, [r4, #4]
 8005bea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005bee:	9206      	str	r2, [sp, #24]
 8005bf0:	1c5a      	adds	r2, r3, #1
 8005bf2:	d13f      	bne.n	8005c74 <_printf_float+0x17c>
 8005bf4:	2306      	movs	r3, #6
 8005bf6:	6063      	str	r3, [r4, #4]
 8005bf8:	9b05      	ldr	r3, [sp, #20]
 8005bfa:	6861      	ldr	r1, [r4, #4]
 8005bfc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005c00:	2300      	movs	r3, #0
 8005c02:	9303      	str	r3, [sp, #12]
 8005c04:	ab0a      	add	r3, sp, #40	; 0x28
 8005c06:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005c0a:	ab09      	add	r3, sp, #36	; 0x24
 8005c0c:	ec49 8b10 	vmov	d0, r8, r9
 8005c10:	9300      	str	r3, [sp, #0]
 8005c12:	6022      	str	r2, [r4, #0]
 8005c14:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005c18:	4628      	mov	r0, r5
 8005c1a:	f7ff fecd 	bl	80059b8 <__cvt>
 8005c1e:	9b06      	ldr	r3, [sp, #24]
 8005c20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c22:	2b47      	cmp	r3, #71	; 0x47
 8005c24:	4680      	mov	r8, r0
 8005c26:	d108      	bne.n	8005c3a <_printf_float+0x142>
 8005c28:	1cc8      	adds	r0, r1, #3
 8005c2a:	db02      	blt.n	8005c32 <_printf_float+0x13a>
 8005c2c:	6863      	ldr	r3, [r4, #4]
 8005c2e:	4299      	cmp	r1, r3
 8005c30:	dd41      	ble.n	8005cb6 <_printf_float+0x1be>
 8005c32:	f1ab 0b02 	sub.w	fp, fp, #2
 8005c36:	fa5f fb8b 	uxtb.w	fp, fp
 8005c3a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005c3e:	d820      	bhi.n	8005c82 <_printf_float+0x18a>
 8005c40:	3901      	subs	r1, #1
 8005c42:	465a      	mov	r2, fp
 8005c44:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005c48:	9109      	str	r1, [sp, #36]	; 0x24
 8005c4a:	f7ff ff17 	bl	8005a7c <__exponent>
 8005c4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c50:	1813      	adds	r3, r2, r0
 8005c52:	2a01      	cmp	r2, #1
 8005c54:	4681      	mov	r9, r0
 8005c56:	6123      	str	r3, [r4, #16]
 8005c58:	dc02      	bgt.n	8005c60 <_printf_float+0x168>
 8005c5a:	6822      	ldr	r2, [r4, #0]
 8005c5c:	07d2      	lsls	r2, r2, #31
 8005c5e:	d501      	bpl.n	8005c64 <_printf_float+0x16c>
 8005c60:	3301      	adds	r3, #1
 8005c62:	6123      	str	r3, [r4, #16]
 8005c64:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d09c      	beq.n	8005ba6 <_printf_float+0xae>
 8005c6c:	232d      	movs	r3, #45	; 0x2d
 8005c6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c72:	e798      	b.n	8005ba6 <_printf_float+0xae>
 8005c74:	9a06      	ldr	r2, [sp, #24]
 8005c76:	2a47      	cmp	r2, #71	; 0x47
 8005c78:	d1be      	bne.n	8005bf8 <_printf_float+0x100>
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1bc      	bne.n	8005bf8 <_printf_float+0x100>
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e7b9      	b.n	8005bf6 <_printf_float+0xfe>
 8005c82:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005c86:	d118      	bne.n	8005cba <_printf_float+0x1c2>
 8005c88:	2900      	cmp	r1, #0
 8005c8a:	6863      	ldr	r3, [r4, #4]
 8005c8c:	dd0b      	ble.n	8005ca6 <_printf_float+0x1ae>
 8005c8e:	6121      	str	r1, [r4, #16]
 8005c90:	b913      	cbnz	r3, 8005c98 <_printf_float+0x1a0>
 8005c92:	6822      	ldr	r2, [r4, #0]
 8005c94:	07d0      	lsls	r0, r2, #31
 8005c96:	d502      	bpl.n	8005c9e <_printf_float+0x1a6>
 8005c98:	3301      	adds	r3, #1
 8005c9a:	440b      	add	r3, r1
 8005c9c:	6123      	str	r3, [r4, #16]
 8005c9e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005ca0:	f04f 0900 	mov.w	r9, #0
 8005ca4:	e7de      	b.n	8005c64 <_printf_float+0x16c>
 8005ca6:	b913      	cbnz	r3, 8005cae <_printf_float+0x1b6>
 8005ca8:	6822      	ldr	r2, [r4, #0]
 8005caa:	07d2      	lsls	r2, r2, #31
 8005cac:	d501      	bpl.n	8005cb2 <_printf_float+0x1ba>
 8005cae:	3302      	adds	r3, #2
 8005cb0:	e7f4      	b.n	8005c9c <_printf_float+0x1a4>
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e7f2      	b.n	8005c9c <_printf_float+0x1a4>
 8005cb6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005cba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cbc:	4299      	cmp	r1, r3
 8005cbe:	db05      	blt.n	8005ccc <_printf_float+0x1d4>
 8005cc0:	6823      	ldr	r3, [r4, #0]
 8005cc2:	6121      	str	r1, [r4, #16]
 8005cc4:	07d8      	lsls	r0, r3, #31
 8005cc6:	d5ea      	bpl.n	8005c9e <_printf_float+0x1a6>
 8005cc8:	1c4b      	adds	r3, r1, #1
 8005cca:	e7e7      	b.n	8005c9c <_printf_float+0x1a4>
 8005ccc:	2900      	cmp	r1, #0
 8005cce:	bfd4      	ite	le
 8005cd0:	f1c1 0202 	rsble	r2, r1, #2
 8005cd4:	2201      	movgt	r2, #1
 8005cd6:	4413      	add	r3, r2
 8005cd8:	e7e0      	b.n	8005c9c <_printf_float+0x1a4>
 8005cda:	6823      	ldr	r3, [r4, #0]
 8005cdc:	055a      	lsls	r2, r3, #21
 8005cde:	d407      	bmi.n	8005cf0 <_printf_float+0x1f8>
 8005ce0:	6923      	ldr	r3, [r4, #16]
 8005ce2:	4642      	mov	r2, r8
 8005ce4:	4631      	mov	r1, r6
 8005ce6:	4628      	mov	r0, r5
 8005ce8:	47b8      	blx	r7
 8005cea:	3001      	adds	r0, #1
 8005cec:	d12c      	bne.n	8005d48 <_printf_float+0x250>
 8005cee:	e764      	b.n	8005bba <_printf_float+0xc2>
 8005cf0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005cf4:	f240 80e0 	bls.w	8005eb8 <_printf_float+0x3c0>
 8005cf8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	2300      	movs	r3, #0
 8005d00:	f7fa ff02 	bl	8000b08 <__aeabi_dcmpeq>
 8005d04:	2800      	cmp	r0, #0
 8005d06:	d034      	beq.n	8005d72 <_printf_float+0x27a>
 8005d08:	4a37      	ldr	r2, [pc, #220]	; (8005de8 <_printf_float+0x2f0>)
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	4631      	mov	r1, r6
 8005d0e:	4628      	mov	r0, r5
 8005d10:	47b8      	blx	r7
 8005d12:	3001      	adds	r0, #1
 8005d14:	f43f af51 	beq.w	8005bba <_printf_float+0xc2>
 8005d18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	db02      	blt.n	8005d26 <_printf_float+0x22e>
 8005d20:	6823      	ldr	r3, [r4, #0]
 8005d22:	07d8      	lsls	r0, r3, #31
 8005d24:	d510      	bpl.n	8005d48 <_printf_float+0x250>
 8005d26:	ee18 3a10 	vmov	r3, s16
 8005d2a:	4652      	mov	r2, sl
 8005d2c:	4631      	mov	r1, r6
 8005d2e:	4628      	mov	r0, r5
 8005d30:	47b8      	blx	r7
 8005d32:	3001      	adds	r0, #1
 8005d34:	f43f af41 	beq.w	8005bba <_printf_float+0xc2>
 8005d38:	f04f 0800 	mov.w	r8, #0
 8005d3c:	f104 091a 	add.w	r9, r4, #26
 8005d40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d42:	3b01      	subs	r3, #1
 8005d44:	4543      	cmp	r3, r8
 8005d46:	dc09      	bgt.n	8005d5c <_printf_float+0x264>
 8005d48:	6823      	ldr	r3, [r4, #0]
 8005d4a:	079b      	lsls	r3, r3, #30
 8005d4c:	f100 8105 	bmi.w	8005f5a <_printf_float+0x462>
 8005d50:	68e0      	ldr	r0, [r4, #12]
 8005d52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d54:	4298      	cmp	r0, r3
 8005d56:	bfb8      	it	lt
 8005d58:	4618      	movlt	r0, r3
 8005d5a:	e730      	b.n	8005bbe <_printf_float+0xc6>
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	464a      	mov	r2, r9
 8005d60:	4631      	mov	r1, r6
 8005d62:	4628      	mov	r0, r5
 8005d64:	47b8      	blx	r7
 8005d66:	3001      	adds	r0, #1
 8005d68:	f43f af27 	beq.w	8005bba <_printf_float+0xc2>
 8005d6c:	f108 0801 	add.w	r8, r8, #1
 8005d70:	e7e6      	b.n	8005d40 <_printf_float+0x248>
 8005d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	dc39      	bgt.n	8005dec <_printf_float+0x2f4>
 8005d78:	4a1b      	ldr	r2, [pc, #108]	; (8005de8 <_printf_float+0x2f0>)
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	4631      	mov	r1, r6
 8005d7e:	4628      	mov	r0, r5
 8005d80:	47b8      	blx	r7
 8005d82:	3001      	adds	r0, #1
 8005d84:	f43f af19 	beq.w	8005bba <_printf_float+0xc2>
 8005d88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	d102      	bne.n	8005d96 <_printf_float+0x29e>
 8005d90:	6823      	ldr	r3, [r4, #0]
 8005d92:	07d9      	lsls	r1, r3, #31
 8005d94:	d5d8      	bpl.n	8005d48 <_printf_float+0x250>
 8005d96:	ee18 3a10 	vmov	r3, s16
 8005d9a:	4652      	mov	r2, sl
 8005d9c:	4631      	mov	r1, r6
 8005d9e:	4628      	mov	r0, r5
 8005da0:	47b8      	blx	r7
 8005da2:	3001      	adds	r0, #1
 8005da4:	f43f af09 	beq.w	8005bba <_printf_float+0xc2>
 8005da8:	f04f 0900 	mov.w	r9, #0
 8005dac:	f104 0a1a 	add.w	sl, r4, #26
 8005db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005db2:	425b      	negs	r3, r3
 8005db4:	454b      	cmp	r3, r9
 8005db6:	dc01      	bgt.n	8005dbc <_printf_float+0x2c4>
 8005db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dba:	e792      	b.n	8005ce2 <_printf_float+0x1ea>
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	4652      	mov	r2, sl
 8005dc0:	4631      	mov	r1, r6
 8005dc2:	4628      	mov	r0, r5
 8005dc4:	47b8      	blx	r7
 8005dc6:	3001      	adds	r0, #1
 8005dc8:	f43f aef7 	beq.w	8005bba <_printf_float+0xc2>
 8005dcc:	f109 0901 	add.w	r9, r9, #1
 8005dd0:	e7ee      	b.n	8005db0 <_printf_float+0x2b8>
 8005dd2:	bf00      	nop
 8005dd4:	7fefffff 	.word	0x7fefffff
 8005dd8:	0800a340 	.word	0x0800a340
 8005ddc:	0800a344 	.word	0x0800a344
 8005de0:	0800a34c 	.word	0x0800a34c
 8005de4:	0800a348 	.word	0x0800a348
 8005de8:	0800a350 	.word	0x0800a350
 8005dec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005dee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005df0:	429a      	cmp	r2, r3
 8005df2:	bfa8      	it	ge
 8005df4:	461a      	movge	r2, r3
 8005df6:	2a00      	cmp	r2, #0
 8005df8:	4691      	mov	r9, r2
 8005dfa:	dc37      	bgt.n	8005e6c <_printf_float+0x374>
 8005dfc:	f04f 0b00 	mov.w	fp, #0
 8005e00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e04:	f104 021a 	add.w	r2, r4, #26
 8005e08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e0a:	9305      	str	r3, [sp, #20]
 8005e0c:	eba3 0309 	sub.w	r3, r3, r9
 8005e10:	455b      	cmp	r3, fp
 8005e12:	dc33      	bgt.n	8005e7c <_printf_float+0x384>
 8005e14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	db3b      	blt.n	8005e94 <_printf_float+0x39c>
 8005e1c:	6823      	ldr	r3, [r4, #0]
 8005e1e:	07da      	lsls	r2, r3, #31
 8005e20:	d438      	bmi.n	8005e94 <_printf_float+0x39c>
 8005e22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e24:	9a05      	ldr	r2, [sp, #20]
 8005e26:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e28:	1a9a      	subs	r2, r3, r2
 8005e2a:	eba3 0901 	sub.w	r9, r3, r1
 8005e2e:	4591      	cmp	r9, r2
 8005e30:	bfa8      	it	ge
 8005e32:	4691      	movge	r9, r2
 8005e34:	f1b9 0f00 	cmp.w	r9, #0
 8005e38:	dc35      	bgt.n	8005ea6 <_printf_float+0x3ae>
 8005e3a:	f04f 0800 	mov.w	r8, #0
 8005e3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e42:	f104 0a1a 	add.w	sl, r4, #26
 8005e46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e4a:	1a9b      	subs	r3, r3, r2
 8005e4c:	eba3 0309 	sub.w	r3, r3, r9
 8005e50:	4543      	cmp	r3, r8
 8005e52:	f77f af79 	ble.w	8005d48 <_printf_float+0x250>
 8005e56:	2301      	movs	r3, #1
 8005e58:	4652      	mov	r2, sl
 8005e5a:	4631      	mov	r1, r6
 8005e5c:	4628      	mov	r0, r5
 8005e5e:	47b8      	blx	r7
 8005e60:	3001      	adds	r0, #1
 8005e62:	f43f aeaa 	beq.w	8005bba <_printf_float+0xc2>
 8005e66:	f108 0801 	add.w	r8, r8, #1
 8005e6a:	e7ec      	b.n	8005e46 <_printf_float+0x34e>
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	4631      	mov	r1, r6
 8005e70:	4642      	mov	r2, r8
 8005e72:	4628      	mov	r0, r5
 8005e74:	47b8      	blx	r7
 8005e76:	3001      	adds	r0, #1
 8005e78:	d1c0      	bne.n	8005dfc <_printf_float+0x304>
 8005e7a:	e69e      	b.n	8005bba <_printf_float+0xc2>
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	4631      	mov	r1, r6
 8005e80:	4628      	mov	r0, r5
 8005e82:	9205      	str	r2, [sp, #20]
 8005e84:	47b8      	blx	r7
 8005e86:	3001      	adds	r0, #1
 8005e88:	f43f ae97 	beq.w	8005bba <_printf_float+0xc2>
 8005e8c:	9a05      	ldr	r2, [sp, #20]
 8005e8e:	f10b 0b01 	add.w	fp, fp, #1
 8005e92:	e7b9      	b.n	8005e08 <_printf_float+0x310>
 8005e94:	ee18 3a10 	vmov	r3, s16
 8005e98:	4652      	mov	r2, sl
 8005e9a:	4631      	mov	r1, r6
 8005e9c:	4628      	mov	r0, r5
 8005e9e:	47b8      	blx	r7
 8005ea0:	3001      	adds	r0, #1
 8005ea2:	d1be      	bne.n	8005e22 <_printf_float+0x32a>
 8005ea4:	e689      	b.n	8005bba <_printf_float+0xc2>
 8005ea6:	9a05      	ldr	r2, [sp, #20]
 8005ea8:	464b      	mov	r3, r9
 8005eaa:	4442      	add	r2, r8
 8005eac:	4631      	mov	r1, r6
 8005eae:	4628      	mov	r0, r5
 8005eb0:	47b8      	blx	r7
 8005eb2:	3001      	adds	r0, #1
 8005eb4:	d1c1      	bne.n	8005e3a <_printf_float+0x342>
 8005eb6:	e680      	b.n	8005bba <_printf_float+0xc2>
 8005eb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005eba:	2a01      	cmp	r2, #1
 8005ebc:	dc01      	bgt.n	8005ec2 <_printf_float+0x3ca>
 8005ebe:	07db      	lsls	r3, r3, #31
 8005ec0:	d538      	bpl.n	8005f34 <_printf_float+0x43c>
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	4642      	mov	r2, r8
 8005ec6:	4631      	mov	r1, r6
 8005ec8:	4628      	mov	r0, r5
 8005eca:	47b8      	blx	r7
 8005ecc:	3001      	adds	r0, #1
 8005ece:	f43f ae74 	beq.w	8005bba <_printf_float+0xc2>
 8005ed2:	ee18 3a10 	vmov	r3, s16
 8005ed6:	4652      	mov	r2, sl
 8005ed8:	4631      	mov	r1, r6
 8005eda:	4628      	mov	r0, r5
 8005edc:	47b8      	blx	r7
 8005ede:	3001      	adds	r0, #1
 8005ee0:	f43f ae6b 	beq.w	8005bba <_printf_float+0xc2>
 8005ee4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ee8:	2200      	movs	r2, #0
 8005eea:	2300      	movs	r3, #0
 8005eec:	f7fa fe0c 	bl	8000b08 <__aeabi_dcmpeq>
 8005ef0:	b9d8      	cbnz	r0, 8005f2a <_printf_float+0x432>
 8005ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ef4:	f108 0201 	add.w	r2, r8, #1
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	4631      	mov	r1, r6
 8005efc:	4628      	mov	r0, r5
 8005efe:	47b8      	blx	r7
 8005f00:	3001      	adds	r0, #1
 8005f02:	d10e      	bne.n	8005f22 <_printf_float+0x42a>
 8005f04:	e659      	b.n	8005bba <_printf_float+0xc2>
 8005f06:	2301      	movs	r3, #1
 8005f08:	4652      	mov	r2, sl
 8005f0a:	4631      	mov	r1, r6
 8005f0c:	4628      	mov	r0, r5
 8005f0e:	47b8      	blx	r7
 8005f10:	3001      	adds	r0, #1
 8005f12:	f43f ae52 	beq.w	8005bba <_printf_float+0xc2>
 8005f16:	f108 0801 	add.w	r8, r8, #1
 8005f1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	4543      	cmp	r3, r8
 8005f20:	dcf1      	bgt.n	8005f06 <_printf_float+0x40e>
 8005f22:	464b      	mov	r3, r9
 8005f24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005f28:	e6dc      	b.n	8005ce4 <_printf_float+0x1ec>
 8005f2a:	f04f 0800 	mov.w	r8, #0
 8005f2e:	f104 0a1a 	add.w	sl, r4, #26
 8005f32:	e7f2      	b.n	8005f1a <_printf_float+0x422>
 8005f34:	2301      	movs	r3, #1
 8005f36:	4642      	mov	r2, r8
 8005f38:	e7df      	b.n	8005efa <_printf_float+0x402>
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	464a      	mov	r2, r9
 8005f3e:	4631      	mov	r1, r6
 8005f40:	4628      	mov	r0, r5
 8005f42:	47b8      	blx	r7
 8005f44:	3001      	adds	r0, #1
 8005f46:	f43f ae38 	beq.w	8005bba <_printf_float+0xc2>
 8005f4a:	f108 0801 	add.w	r8, r8, #1
 8005f4e:	68e3      	ldr	r3, [r4, #12]
 8005f50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005f52:	1a5b      	subs	r3, r3, r1
 8005f54:	4543      	cmp	r3, r8
 8005f56:	dcf0      	bgt.n	8005f3a <_printf_float+0x442>
 8005f58:	e6fa      	b.n	8005d50 <_printf_float+0x258>
 8005f5a:	f04f 0800 	mov.w	r8, #0
 8005f5e:	f104 0919 	add.w	r9, r4, #25
 8005f62:	e7f4      	b.n	8005f4e <_printf_float+0x456>

08005f64 <_printf_common>:
 8005f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f68:	4616      	mov	r6, r2
 8005f6a:	4699      	mov	r9, r3
 8005f6c:	688a      	ldr	r2, [r1, #8]
 8005f6e:	690b      	ldr	r3, [r1, #16]
 8005f70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f74:	4293      	cmp	r3, r2
 8005f76:	bfb8      	it	lt
 8005f78:	4613      	movlt	r3, r2
 8005f7a:	6033      	str	r3, [r6, #0]
 8005f7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f80:	4607      	mov	r7, r0
 8005f82:	460c      	mov	r4, r1
 8005f84:	b10a      	cbz	r2, 8005f8a <_printf_common+0x26>
 8005f86:	3301      	adds	r3, #1
 8005f88:	6033      	str	r3, [r6, #0]
 8005f8a:	6823      	ldr	r3, [r4, #0]
 8005f8c:	0699      	lsls	r1, r3, #26
 8005f8e:	bf42      	ittt	mi
 8005f90:	6833      	ldrmi	r3, [r6, #0]
 8005f92:	3302      	addmi	r3, #2
 8005f94:	6033      	strmi	r3, [r6, #0]
 8005f96:	6825      	ldr	r5, [r4, #0]
 8005f98:	f015 0506 	ands.w	r5, r5, #6
 8005f9c:	d106      	bne.n	8005fac <_printf_common+0x48>
 8005f9e:	f104 0a19 	add.w	sl, r4, #25
 8005fa2:	68e3      	ldr	r3, [r4, #12]
 8005fa4:	6832      	ldr	r2, [r6, #0]
 8005fa6:	1a9b      	subs	r3, r3, r2
 8005fa8:	42ab      	cmp	r3, r5
 8005faa:	dc26      	bgt.n	8005ffa <_printf_common+0x96>
 8005fac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005fb0:	1e13      	subs	r3, r2, #0
 8005fb2:	6822      	ldr	r2, [r4, #0]
 8005fb4:	bf18      	it	ne
 8005fb6:	2301      	movne	r3, #1
 8005fb8:	0692      	lsls	r2, r2, #26
 8005fba:	d42b      	bmi.n	8006014 <_printf_common+0xb0>
 8005fbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fc0:	4649      	mov	r1, r9
 8005fc2:	4638      	mov	r0, r7
 8005fc4:	47c0      	blx	r8
 8005fc6:	3001      	adds	r0, #1
 8005fc8:	d01e      	beq.n	8006008 <_printf_common+0xa4>
 8005fca:	6823      	ldr	r3, [r4, #0]
 8005fcc:	68e5      	ldr	r5, [r4, #12]
 8005fce:	6832      	ldr	r2, [r6, #0]
 8005fd0:	f003 0306 	and.w	r3, r3, #6
 8005fd4:	2b04      	cmp	r3, #4
 8005fd6:	bf08      	it	eq
 8005fd8:	1aad      	subeq	r5, r5, r2
 8005fda:	68a3      	ldr	r3, [r4, #8]
 8005fdc:	6922      	ldr	r2, [r4, #16]
 8005fde:	bf0c      	ite	eq
 8005fe0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fe4:	2500      	movne	r5, #0
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	bfc4      	itt	gt
 8005fea:	1a9b      	subgt	r3, r3, r2
 8005fec:	18ed      	addgt	r5, r5, r3
 8005fee:	2600      	movs	r6, #0
 8005ff0:	341a      	adds	r4, #26
 8005ff2:	42b5      	cmp	r5, r6
 8005ff4:	d11a      	bne.n	800602c <_printf_common+0xc8>
 8005ff6:	2000      	movs	r0, #0
 8005ff8:	e008      	b.n	800600c <_printf_common+0xa8>
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	4652      	mov	r2, sl
 8005ffe:	4649      	mov	r1, r9
 8006000:	4638      	mov	r0, r7
 8006002:	47c0      	blx	r8
 8006004:	3001      	adds	r0, #1
 8006006:	d103      	bne.n	8006010 <_printf_common+0xac>
 8006008:	f04f 30ff 	mov.w	r0, #4294967295
 800600c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006010:	3501      	adds	r5, #1
 8006012:	e7c6      	b.n	8005fa2 <_printf_common+0x3e>
 8006014:	18e1      	adds	r1, r4, r3
 8006016:	1c5a      	adds	r2, r3, #1
 8006018:	2030      	movs	r0, #48	; 0x30
 800601a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800601e:	4422      	add	r2, r4
 8006020:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006024:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006028:	3302      	adds	r3, #2
 800602a:	e7c7      	b.n	8005fbc <_printf_common+0x58>
 800602c:	2301      	movs	r3, #1
 800602e:	4622      	mov	r2, r4
 8006030:	4649      	mov	r1, r9
 8006032:	4638      	mov	r0, r7
 8006034:	47c0      	blx	r8
 8006036:	3001      	adds	r0, #1
 8006038:	d0e6      	beq.n	8006008 <_printf_common+0xa4>
 800603a:	3601      	adds	r6, #1
 800603c:	e7d9      	b.n	8005ff2 <_printf_common+0x8e>
	...

08006040 <_printf_i>:
 8006040:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006044:	7e0f      	ldrb	r7, [r1, #24]
 8006046:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006048:	2f78      	cmp	r7, #120	; 0x78
 800604a:	4691      	mov	r9, r2
 800604c:	4680      	mov	r8, r0
 800604e:	460c      	mov	r4, r1
 8006050:	469a      	mov	sl, r3
 8006052:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006056:	d807      	bhi.n	8006068 <_printf_i+0x28>
 8006058:	2f62      	cmp	r7, #98	; 0x62
 800605a:	d80a      	bhi.n	8006072 <_printf_i+0x32>
 800605c:	2f00      	cmp	r7, #0
 800605e:	f000 80d8 	beq.w	8006212 <_printf_i+0x1d2>
 8006062:	2f58      	cmp	r7, #88	; 0x58
 8006064:	f000 80a3 	beq.w	80061ae <_printf_i+0x16e>
 8006068:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800606c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006070:	e03a      	b.n	80060e8 <_printf_i+0xa8>
 8006072:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006076:	2b15      	cmp	r3, #21
 8006078:	d8f6      	bhi.n	8006068 <_printf_i+0x28>
 800607a:	a101      	add	r1, pc, #4	; (adr r1, 8006080 <_printf_i+0x40>)
 800607c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006080:	080060d9 	.word	0x080060d9
 8006084:	080060ed 	.word	0x080060ed
 8006088:	08006069 	.word	0x08006069
 800608c:	08006069 	.word	0x08006069
 8006090:	08006069 	.word	0x08006069
 8006094:	08006069 	.word	0x08006069
 8006098:	080060ed 	.word	0x080060ed
 800609c:	08006069 	.word	0x08006069
 80060a0:	08006069 	.word	0x08006069
 80060a4:	08006069 	.word	0x08006069
 80060a8:	08006069 	.word	0x08006069
 80060ac:	080061f9 	.word	0x080061f9
 80060b0:	0800611d 	.word	0x0800611d
 80060b4:	080061db 	.word	0x080061db
 80060b8:	08006069 	.word	0x08006069
 80060bc:	08006069 	.word	0x08006069
 80060c0:	0800621b 	.word	0x0800621b
 80060c4:	08006069 	.word	0x08006069
 80060c8:	0800611d 	.word	0x0800611d
 80060cc:	08006069 	.word	0x08006069
 80060d0:	08006069 	.word	0x08006069
 80060d4:	080061e3 	.word	0x080061e3
 80060d8:	682b      	ldr	r3, [r5, #0]
 80060da:	1d1a      	adds	r2, r3, #4
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	602a      	str	r2, [r5, #0]
 80060e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060e8:	2301      	movs	r3, #1
 80060ea:	e0a3      	b.n	8006234 <_printf_i+0x1f4>
 80060ec:	6820      	ldr	r0, [r4, #0]
 80060ee:	6829      	ldr	r1, [r5, #0]
 80060f0:	0606      	lsls	r6, r0, #24
 80060f2:	f101 0304 	add.w	r3, r1, #4
 80060f6:	d50a      	bpl.n	800610e <_printf_i+0xce>
 80060f8:	680e      	ldr	r6, [r1, #0]
 80060fa:	602b      	str	r3, [r5, #0]
 80060fc:	2e00      	cmp	r6, #0
 80060fe:	da03      	bge.n	8006108 <_printf_i+0xc8>
 8006100:	232d      	movs	r3, #45	; 0x2d
 8006102:	4276      	negs	r6, r6
 8006104:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006108:	485e      	ldr	r0, [pc, #376]	; (8006284 <_printf_i+0x244>)
 800610a:	230a      	movs	r3, #10
 800610c:	e019      	b.n	8006142 <_printf_i+0x102>
 800610e:	680e      	ldr	r6, [r1, #0]
 8006110:	602b      	str	r3, [r5, #0]
 8006112:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006116:	bf18      	it	ne
 8006118:	b236      	sxthne	r6, r6
 800611a:	e7ef      	b.n	80060fc <_printf_i+0xbc>
 800611c:	682b      	ldr	r3, [r5, #0]
 800611e:	6820      	ldr	r0, [r4, #0]
 8006120:	1d19      	adds	r1, r3, #4
 8006122:	6029      	str	r1, [r5, #0]
 8006124:	0601      	lsls	r1, r0, #24
 8006126:	d501      	bpl.n	800612c <_printf_i+0xec>
 8006128:	681e      	ldr	r6, [r3, #0]
 800612a:	e002      	b.n	8006132 <_printf_i+0xf2>
 800612c:	0646      	lsls	r6, r0, #25
 800612e:	d5fb      	bpl.n	8006128 <_printf_i+0xe8>
 8006130:	881e      	ldrh	r6, [r3, #0]
 8006132:	4854      	ldr	r0, [pc, #336]	; (8006284 <_printf_i+0x244>)
 8006134:	2f6f      	cmp	r7, #111	; 0x6f
 8006136:	bf0c      	ite	eq
 8006138:	2308      	moveq	r3, #8
 800613a:	230a      	movne	r3, #10
 800613c:	2100      	movs	r1, #0
 800613e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006142:	6865      	ldr	r5, [r4, #4]
 8006144:	60a5      	str	r5, [r4, #8]
 8006146:	2d00      	cmp	r5, #0
 8006148:	bfa2      	ittt	ge
 800614a:	6821      	ldrge	r1, [r4, #0]
 800614c:	f021 0104 	bicge.w	r1, r1, #4
 8006150:	6021      	strge	r1, [r4, #0]
 8006152:	b90e      	cbnz	r6, 8006158 <_printf_i+0x118>
 8006154:	2d00      	cmp	r5, #0
 8006156:	d04d      	beq.n	80061f4 <_printf_i+0x1b4>
 8006158:	4615      	mov	r5, r2
 800615a:	fbb6 f1f3 	udiv	r1, r6, r3
 800615e:	fb03 6711 	mls	r7, r3, r1, r6
 8006162:	5dc7      	ldrb	r7, [r0, r7]
 8006164:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006168:	4637      	mov	r7, r6
 800616a:	42bb      	cmp	r3, r7
 800616c:	460e      	mov	r6, r1
 800616e:	d9f4      	bls.n	800615a <_printf_i+0x11a>
 8006170:	2b08      	cmp	r3, #8
 8006172:	d10b      	bne.n	800618c <_printf_i+0x14c>
 8006174:	6823      	ldr	r3, [r4, #0]
 8006176:	07de      	lsls	r6, r3, #31
 8006178:	d508      	bpl.n	800618c <_printf_i+0x14c>
 800617a:	6923      	ldr	r3, [r4, #16]
 800617c:	6861      	ldr	r1, [r4, #4]
 800617e:	4299      	cmp	r1, r3
 8006180:	bfde      	ittt	le
 8006182:	2330      	movle	r3, #48	; 0x30
 8006184:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006188:	f105 35ff 	addle.w	r5, r5, #4294967295
 800618c:	1b52      	subs	r2, r2, r5
 800618e:	6122      	str	r2, [r4, #16]
 8006190:	f8cd a000 	str.w	sl, [sp]
 8006194:	464b      	mov	r3, r9
 8006196:	aa03      	add	r2, sp, #12
 8006198:	4621      	mov	r1, r4
 800619a:	4640      	mov	r0, r8
 800619c:	f7ff fee2 	bl	8005f64 <_printf_common>
 80061a0:	3001      	adds	r0, #1
 80061a2:	d14c      	bne.n	800623e <_printf_i+0x1fe>
 80061a4:	f04f 30ff 	mov.w	r0, #4294967295
 80061a8:	b004      	add	sp, #16
 80061aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061ae:	4835      	ldr	r0, [pc, #212]	; (8006284 <_printf_i+0x244>)
 80061b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80061b4:	6829      	ldr	r1, [r5, #0]
 80061b6:	6823      	ldr	r3, [r4, #0]
 80061b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80061bc:	6029      	str	r1, [r5, #0]
 80061be:	061d      	lsls	r5, r3, #24
 80061c0:	d514      	bpl.n	80061ec <_printf_i+0x1ac>
 80061c2:	07df      	lsls	r7, r3, #31
 80061c4:	bf44      	itt	mi
 80061c6:	f043 0320 	orrmi.w	r3, r3, #32
 80061ca:	6023      	strmi	r3, [r4, #0]
 80061cc:	b91e      	cbnz	r6, 80061d6 <_printf_i+0x196>
 80061ce:	6823      	ldr	r3, [r4, #0]
 80061d0:	f023 0320 	bic.w	r3, r3, #32
 80061d4:	6023      	str	r3, [r4, #0]
 80061d6:	2310      	movs	r3, #16
 80061d8:	e7b0      	b.n	800613c <_printf_i+0xfc>
 80061da:	6823      	ldr	r3, [r4, #0]
 80061dc:	f043 0320 	orr.w	r3, r3, #32
 80061e0:	6023      	str	r3, [r4, #0]
 80061e2:	2378      	movs	r3, #120	; 0x78
 80061e4:	4828      	ldr	r0, [pc, #160]	; (8006288 <_printf_i+0x248>)
 80061e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80061ea:	e7e3      	b.n	80061b4 <_printf_i+0x174>
 80061ec:	0659      	lsls	r1, r3, #25
 80061ee:	bf48      	it	mi
 80061f0:	b2b6      	uxthmi	r6, r6
 80061f2:	e7e6      	b.n	80061c2 <_printf_i+0x182>
 80061f4:	4615      	mov	r5, r2
 80061f6:	e7bb      	b.n	8006170 <_printf_i+0x130>
 80061f8:	682b      	ldr	r3, [r5, #0]
 80061fa:	6826      	ldr	r6, [r4, #0]
 80061fc:	6961      	ldr	r1, [r4, #20]
 80061fe:	1d18      	adds	r0, r3, #4
 8006200:	6028      	str	r0, [r5, #0]
 8006202:	0635      	lsls	r5, r6, #24
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	d501      	bpl.n	800620c <_printf_i+0x1cc>
 8006208:	6019      	str	r1, [r3, #0]
 800620a:	e002      	b.n	8006212 <_printf_i+0x1d2>
 800620c:	0670      	lsls	r0, r6, #25
 800620e:	d5fb      	bpl.n	8006208 <_printf_i+0x1c8>
 8006210:	8019      	strh	r1, [r3, #0]
 8006212:	2300      	movs	r3, #0
 8006214:	6123      	str	r3, [r4, #16]
 8006216:	4615      	mov	r5, r2
 8006218:	e7ba      	b.n	8006190 <_printf_i+0x150>
 800621a:	682b      	ldr	r3, [r5, #0]
 800621c:	1d1a      	adds	r2, r3, #4
 800621e:	602a      	str	r2, [r5, #0]
 8006220:	681d      	ldr	r5, [r3, #0]
 8006222:	6862      	ldr	r2, [r4, #4]
 8006224:	2100      	movs	r1, #0
 8006226:	4628      	mov	r0, r5
 8006228:	f7f9 fffa 	bl	8000220 <memchr>
 800622c:	b108      	cbz	r0, 8006232 <_printf_i+0x1f2>
 800622e:	1b40      	subs	r0, r0, r5
 8006230:	6060      	str	r0, [r4, #4]
 8006232:	6863      	ldr	r3, [r4, #4]
 8006234:	6123      	str	r3, [r4, #16]
 8006236:	2300      	movs	r3, #0
 8006238:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800623c:	e7a8      	b.n	8006190 <_printf_i+0x150>
 800623e:	6923      	ldr	r3, [r4, #16]
 8006240:	462a      	mov	r2, r5
 8006242:	4649      	mov	r1, r9
 8006244:	4640      	mov	r0, r8
 8006246:	47d0      	blx	sl
 8006248:	3001      	adds	r0, #1
 800624a:	d0ab      	beq.n	80061a4 <_printf_i+0x164>
 800624c:	6823      	ldr	r3, [r4, #0]
 800624e:	079b      	lsls	r3, r3, #30
 8006250:	d413      	bmi.n	800627a <_printf_i+0x23a>
 8006252:	68e0      	ldr	r0, [r4, #12]
 8006254:	9b03      	ldr	r3, [sp, #12]
 8006256:	4298      	cmp	r0, r3
 8006258:	bfb8      	it	lt
 800625a:	4618      	movlt	r0, r3
 800625c:	e7a4      	b.n	80061a8 <_printf_i+0x168>
 800625e:	2301      	movs	r3, #1
 8006260:	4632      	mov	r2, r6
 8006262:	4649      	mov	r1, r9
 8006264:	4640      	mov	r0, r8
 8006266:	47d0      	blx	sl
 8006268:	3001      	adds	r0, #1
 800626a:	d09b      	beq.n	80061a4 <_printf_i+0x164>
 800626c:	3501      	adds	r5, #1
 800626e:	68e3      	ldr	r3, [r4, #12]
 8006270:	9903      	ldr	r1, [sp, #12]
 8006272:	1a5b      	subs	r3, r3, r1
 8006274:	42ab      	cmp	r3, r5
 8006276:	dcf2      	bgt.n	800625e <_printf_i+0x21e>
 8006278:	e7eb      	b.n	8006252 <_printf_i+0x212>
 800627a:	2500      	movs	r5, #0
 800627c:	f104 0619 	add.w	r6, r4, #25
 8006280:	e7f5      	b.n	800626e <_printf_i+0x22e>
 8006282:	bf00      	nop
 8006284:	0800a352 	.word	0x0800a352
 8006288:	0800a363 	.word	0x0800a363

0800628c <_scanf_float>:
 800628c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006290:	b087      	sub	sp, #28
 8006292:	4617      	mov	r7, r2
 8006294:	9303      	str	r3, [sp, #12]
 8006296:	688b      	ldr	r3, [r1, #8]
 8006298:	1e5a      	subs	r2, r3, #1
 800629a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800629e:	bf83      	ittte	hi
 80062a0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80062a4:	195b      	addhi	r3, r3, r5
 80062a6:	9302      	strhi	r3, [sp, #8]
 80062a8:	2300      	movls	r3, #0
 80062aa:	bf86      	itte	hi
 80062ac:	f240 135d 	movwhi	r3, #349	; 0x15d
 80062b0:	608b      	strhi	r3, [r1, #8]
 80062b2:	9302      	strls	r3, [sp, #8]
 80062b4:	680b      	ldr	r3, [r1, #0]
 80062b6:	468b      	mov	fp, r1
 80062b8:	2500      	movs	r5, #0
 80062ba:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80062be:	f84b 3b1c 	str.w	r3, [fp], #28
 80062c2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80062c6:	4680      	mov	r8, r0
 80062c8:	460c      	mov	r4, r1
 80062ca:	465e      	mov	r6, fp
 80062cc:	46aa      	mov	sl, r5
 80062ce:	46a9      	mov	r9, r5
 80062d0:	9501      	str	r5, [sp, #4]
 80062d2:	68a2      	ldr	r2, [r4, #8]
 80062d4:	b152      	cbz	r2, 80062ec <_scanf_float+0x60>
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	2b4e      	cmp	r3, #78	; 0x4e
 80062dc:	d864      	bhi.n	80063a8 <_scanf_float+0x11c>
 80062de:	2b40      	cmp	r3, #64	; 0x40
 80062e0:	d83c      	bhi.n	800635c <_scanf_float+0xd0>
 80062e2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80062e6:	b2c8      	uxtb	r0, r1
 80062e8:	280e      	cmp	r0, #14
 80062ea:	d93a      	bls.n	8006362 <_scanf_float+0xd6>
 80062ec:	f1b9 0f00 	cmp.w	r9, #0
 80062f0:	d003      	beq.n	80062fa <_scanf_float+0x6e>
 80062f2:	6823      	ldr	r3, [r4, #0]
 80062f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062f8:	6023      	str	r3, [r4, #0]
 80062fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80062fe:	f1ba 0f01 	cmp.w	sl, #1
 8006302:	f200 8113 	bhi.w	800652c <_scanf_float+0x2a0>
 8006306:	455e      	cmp	r6, fp
 8006308:	f200 8105 	bhi.w	8006516 <_scanf_float+0x28a>
 800630c:	2501      	movs	r5, #1
 800630e:	4628      	mov	r0, r5
 8006310:	b007      	add	sp, #28
 8006312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006316:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800631a:	2a0d      	cmp	r2, #13
 800631c:	d8e6      	bhi.n	80062ec <_scanf_float+0x60>
 800631e:	a101      	add	r1, pc, #4	; (adr r1, 8006324 <_scanf_float+0x98>)
 8006320:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006324:	08006463 	.word	0x08006463
 8006328:	080062ed 	.word	0x080062ed
 800632c:	080062ed 	.word	0x080062ed
 8006330:	080062ed 	.word	0x080062ed
 8006334:	080064c3 	.word	0x080064c3
 8006338:	0800649b 	.word	0x0800649b
 800633c:	080062ed 	.word	0x080062ed
 8006340:	080062ed 	.word	0x080062ed
 8006344:	08006471 	.word	0x08006471
 8006348:	080062ed 	.word	0x080062ed
 800634c:	080062ed 	.word	0x080062ed
 8006350:	080062ed 	.word	0x080062ed
 8006354:	080062ed 	.word	0x080062ed
 8006358:	08006429 	.word	0x08006429
 800635c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006360:	e7db      	b.n	800631a <_scanf_float+0x8e>
 8006362:	290e      	cmp	r1, #14
 8006364:	d8c2      	bhi.n	80062ec <_scanf_float+0x60>
 8006366:	a001      	add	r0, pc, #4	; (adr r0, 800636c <_scanf_float+0xe0>)
 8006368:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800636c:	0800641b 	.word	0x0800641b
 8006370:	080062ed 	.word	0x080062ed
 8006374:	0800641b 	.word	0x0800641b
 8006378:	080064af 	.word	0x080064af
 800637c:	080062ed 	.word	0x080062ed
 8006380:	080063c9 	.word	0x080063c9
 8006384:	08006405 	.word	0x08006405
 8006388:	08006405 	.word	0x08006405
 800638c:	08006405 	.word	0x08006405
 8006390:	08006405 	.word	0x08006405
 8006394:	08006405 	.word	0x08006405
 8006398:	08006405 	.word	0x08006405
 800639c:	08006405 	.word	0x08006405
 80063a0:	08006405 	.word	0x08006405
 80063a4:	08006405 	.word	0x08006405
 80063a8:	2b6e      	cmp	r3, #110	; 0x6e
 80063aa:	d809      	bhi.n	80063c0 <_scanf_float+0x134>
 80063ac:	2b60      	cmp	r3, #96	; 0x60
 80063ae:	d8b2      	bhi.n	8006316 <_scanf_float+0x8a>
 80063b0:	2b54      	cmp	r3, #84	; 0x54
 80063b2:	d077      	beq.n	80064a4 <_scanf_float+0x218>
 80063b4:	2b59      	cmp	r3, #89	; 0x59
 80063b6:	d199      	bne.n	80062ec <_scanf_float+0x60>
 80063b8:	2d07      	cmp	r5, #7
 80063ba:	d197      	bne.n	80062ec <_scanf_float+0x60>
 80063bc:	2508      	movs	r5, #8
 80063be:	e029      	b.n	8006414 <_scanf_float+0x188>
 80063c0:	2b74      	cmp	r3, #116	; 0x74
 80063c2:	d06f      	beq.n	80064a4 <_scanf_float+0x218>
 80063c4:	2b79      	cmp	r3, #121	; 0x79
 80063c6:	e7f6      	b.n	80063b6 <_scanf_float+0x12a>
 80063c8:	6821      	ldr	r1, [r4, #0]
 80063ca:	05c8      	lsls	r0, r1, #23
 80063cc:	d51a      	bpl.n	8006404 <_scanf_float+0x178>
 80063ce:	9b02      	ldr	r3, [sp, #8]
 80063d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80063d4:	6021      	str	r1, [r4, #0]
 80063d6:	f109 0901 	add.w	r9, r9, #1
 80063da:	b11b      	cbz	r3, 80063e4 <_scanf_float+0x158>
 80063dc:	3b01      	subs	r3, #1
 80063de:	3201      	adds	r2, #1
 80063e0:	9302      	str	r3, [sp, #8]
 80063e2:	60a2      	str	r2, [r4, #8]
 80063e4:	68a3      	ldr	r3, [r4, #8]
 80063e6:	3b01      	subs	r3, #1
 80063e8:	60a3      	str	r3, [r4, #8]
 80063ea:	6923      	ldr	r3, [r4, #16]
 80063ec:	3301      	adds	r3, #1
 80063ee:	6123      	str	r3, [r4, #16]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	3b01      	subs	r3, #1
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	607b      	str	r3, [r7, #4]
 80063f8:	f340 8084 	ble.w	8006504 <_scanf_float+0x278>
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	3301      	adds	r3, #1
 8006400:	603b      	str	r3, [r7, #0]
 8006402:	e766      	b.n	80062d2 <_scanf_float+0x46>
 8006404:	eb1a 0f05 	cmn.w	sl, r5
 8006408:	f47f af70 	bne.w	80062ec <_scanf_float+0x60>
 800640c:	6822      	ldr	r2, [r4, #0]
 800640e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006412:	6022      	str	r2, [r4, #0]
 8006414:	f806 3b01 	strb.w	r3, [r6], #1
 8006418:	e7e4      	b.n	80063e4 <_scanf_float+0x158>
 800641a:	6822      	ldr	r2, [r4, #0]
 800641c:	0610      	lsls	r0, r2, #24
 800641e:	f57f af65 	bpl.w	80062ec <_scanf_float+0x60>
 8006422:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006426:	e7f4      	b.n	8006412 <_scanf_float+0x186>
 8006428:	f1ba 0f00 	cmp.w	sl, #0
 800642c:	d10e      	bne.n	800644c <_scanf_float+0x1c0>
 800642e:	f1b9 0f00 	cmp.w	r9, #0
 8006432:	d10e      	bne.n	8006452 <_scanf_float+0x1c6>
 8006434:	6822      	ldr	r2, [r4, #0]
 8006436:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800643a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800643e:	d108      	bne.n	8006452 <_scanf_float+0x1c6>
 8006440:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006444:	6022      	str	r2, [r4, #0]
 8006446:	f04f 0a01 	mov.w	sl, #1
 800644a:	e7e3      	b.n	8006414 <_scanf_float+0x188>
 800644c:	f1ba 0f02 	cmp.w	sl, #2
 8006450:	d055      	beq.n	80064fe <_scanf_float+0x272>
 8006452:	2d01      	cmp	r5, #1
 8006454:	d002      	beq.n	800645c <_scanf_float+0x1d0>
 8006456:	2d04      	cmp	r5, #4
 8006458:	f47f af48 	bne.w	80062ec <_scanf_float+0x60>
 800645c:	3501      	adds	r5, #1
 800645e:	b2ed      	uxtb	r5, r5
 8006460:	e7d8      	b.n	8006414 <_scanf_float+0x188>
 8006462:	f1ba 0f01 	cmp.w	sl, #1
 8006466:	f47f af41 	bne.w	80062ec <_scanf_float+0x60>
 800646a:	f04f 0a02 	mov.w	sl, #2
 800646e:	e7d1      	b.n	8006414 <_scanf_float+0x188>
 8006470:	b97d      	cbnz	r5, 8006492 <_scanf_float+0x206>
 8006472:	f1b9 0f00 	cmp.w	r9, #0
 8006476:	f47f af3c 	bne.w	80062f2 <_scanf_float+0x66>
 800647a:	6822      	ldr	r2, [r4, #0]
 800647c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006480:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006484:	f47f af39 	bne.w	80062fa <_scanf_float+0x6e>
 8006488:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800648c:	6022      	str	r2, [r4, #0]
 800648e:	2501      	movs	r5, #1
 8006490:	e7c0      	b.n	8006414 <_scanf_float+0x188>
 8006492:	2d03      	cmp	r5, #3
 8006494:	d0e2      	beq.n	800645c <_scanf_float+0x1d0>
 8006496:	2d05      	cmp	r5, #5
 8006498:	e7de      	b.n	8006458 <_scanf_float+0x1cc>
 800649a:	2d02      	cmp	r5, #2
 800649c:	f47f af26 	bne.w	80062ec <_scanf_float+0x60>
 80064a0:	2503      	movs	r5, #3
 80064a2:	e7b7      	b.n	8006414 <_scanf_float+0x188>
 80064a4:	2d06      	cmp	r5, #6
 80064a6:	f47f af21 	bne.w	80062ec <_scanf_float+0x60>
 80064aa:	2507      	movs	r5, #7
 80064ac:	e7b2      	b.n	8006414 <_scanf_float+0x188>
 80064ae:	6822      	ldr	r2, [r4, #0]
 80064b0:	0591      	lsls	r1, r2, #22
 80064b2:	f57f af1b 	bpl.w	80062ec <_scanf_float+0x60>
 80064b6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80064ba:	6022      	str	r2, [r4, #0]
 80064bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80064c0:	e7a8      	b.n	8006414 <_scanf_float+0x188>
 80064c2:	6822      	ldr	r2, [r4, #0]
 80064c4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80064c8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80064cc:	d006      	beq.n	80064dc <_scanf_float+0x250>
 80064ce:	0550      	lsls	r0, r2, #21
 80064d0:	f57f af0c 	bpl.w	80062ec <_scanf_float+0x60>
 80064d4:	f1b9 0f00 	cmp.w	r9, #0
 80064d8:	f43f af0f 	beq.w	80062fa <_scanf_float+0x6e>
 80064dc:	0591      	lsls	r1, r2, #22
 80064de:	bf58      	it	pl
 80064e0:	9901      	ldrpl	r1, [sp, #4]
 80064e2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80064e6:	bf58      	it	pl
 80064e8:	eba9 0101 	subpl.w	r1, r9, r1
 80064ec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80064f0:	bf58      	it	pl
 80064f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80064f6:	6022      	str	r2, [r4, #0]
 80064f8:	f04f 0900 	mov.w	r9, #0
 80064fc:	e78a      	b.n	8006414 <_scanf_float+0x188>
 80064fe:	f04f 0a03 	mov.w	sl, #3
 8006502:	e787      	b.n	8006414 <_scanf_float+0x188>
 8006504:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006508:	4639      	mov	r1, r7
 800650a:	4640      	mov	r0, r8
 800650c:	4798      	blx	r3
 800650e:	2800      	cmp	r0, #0
 8006510:	f43f aedf 	beq.w	80062d2 <_scanf_float+0x46>
 8006514:	e6ea      	b.n	80062ec <_scanf_float+0x60>
 8006516:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800651a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800651e:	463a      	mov	r2, r7
 8006520:	4640      	mov	r0, r8
 8006522:	4798      	blx	r3
 8006524:	6923      	ldr	r3, [r4, #16]
 8006526:	3b01      	subs	r3, #1
 8006528:	6123      	str	r3, [r4, #16]
 800652a:	e6ec      	b.n	8006306 <_scanf_float+0x7a>
 800652c:	1e6b      	subs	r3, r5, #1
 800652e:	2b06      	cmp	r3, #6
 8006530:	d825      	bhi.n	800657e <_scanf_float+0x2f2>
 8006532:	2d02      	cmp	r5, #2
 8006534:	d836      	bhi.n	80065a4 <_scanf_float+0x318>
 8006536:	455e      	cmp	r6, fp
 8006538:	f67f aee8 	bls.w	800630c <_scanf_float+0x80>
 800653c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006540:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006544:	463a      	mov	r2, r7
 8006546:	4640      	mov	r0, r8
 8006548:	4798      	blx	r3
 800654a:	6923      	ldr	r3, [r4, #16]
 800654c:	3b01      	subs	r3, #1
 800654e:	6123      	str	r3, [r4, #16]
 8006550:	e7f1      	b.n	8006536 <_scanf_float+0x2aa>
 8006552:	9802      	ldr	r0, [sp, #8]
 8006554:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006558:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800655c:	9002      	str	r0, [sp, #8]
 800655e:	463a      	mov	r2, r7
 8006560:	4640      	mov	r0, r8
 8006562:	4798      	blx	r3
 8006564:	6923      	ldr	r3, [r4, #16]
 8006566:	3b01      	subs	r3, #1
 8006568:	6123      	str	r3, [r4, #16]
 800656a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800656e:	fa5f fa8a 	uxtb.w	sl, sl
 8006572:	f1ba 0f02 	cmp.w	sl, #2
 8006576:	d1ec      	bne.n	8006552 <_scanf_float+0x2c6>
 8006578:	3d03      	subs	r5, #3
 800657a:	b2ed      	uxtb	r5, r5
 800657c:	1b76      	subs	r6, r6, r5
 800657e:	6823      	ldr	r3, [r4, #0]
 8006580:	05da      	lsls	r2, r3, #23
 8006582:	d52f      	bpl.n	80065e4 <_scanf_float+0x358>
 8006584:	055b      	lsls	r3, r3, #21
 8006586:	d510      	bpl.n	80065aa <_scanf_float+0x31e>
 8006588:	455e      	cmp	r6, fp
 800658a:	f67f aebf 	bls.w	800630c <_scanf_float+0x80>
 800658e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006592:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006596:	463a      	mov	r2, r7
 8006598:	4640      	mov	r0, r8
 800659a:	4798      	blx	r3
 800659c:	6923      	ldr	r3, [r4, #16]
 800659e:	3b01      	subs	r3, #1
 80065a0:	6123      	str	r3, [r4, #16]
 80065a2:	e7f1      	b.n	8006588 <_scanf_float+0x2fc>
 80065a4:	46aa      	mov	sl, r5
 80065a6:	9602      	str	r6, [sp, #8]
 80065a8:	e7df      	b.n	800656a <_scanf_float+0x2de>
 80065aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80065ae:	6923      	ldr	r3, [r4, #16]
 80065b0:	2965      	cmp	r1, #101	; 0x65
 80065b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80065b6:	f106 35ff 	add.w	r5, r6, #4294967295
 80065ba:	6123      	str	r3, [r4, #16]
 80065bc:	d00c      	beq.n	80065d8 <_scanf_float+0x34c>
 80065be:	2945      	cmp	r1, #69	; 0x45
 80065c0:	d00a      	beq.n	80065d8 <_scanf_float+0x34c>
 80065c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80065c6:	463a      	mov	r2, r7
 80065c8:	4640      	mov	r0, r8
 80065ca:	4798      	blx	r3
 80065cc:	6923      	ldr	r3, [r4, #16]
 80065ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80065d2:	3b01      	subs	r3, #1
 80065d4:	1eb5      	subs	r5, r6, #2
 80065d6:	6123      	str	r3, [r4, #16]
 80065d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80065dc:	463a      	mov	r2, r7
 80065de:	4640      	mov	r0, r8
 80065e0:	4798      	blx	r3
 80065e2:	462e      	mov	r6, r5
 80065e4:	6825      	ldr	r5, [r4, #0]
 80065e6:	f015 0510 	ands.w	r5, r5, #16
 80065ea:	d159      	bne.n	80066a0 <_scanf_float+0x414>
 80065ec:	7035      	strb	r5, [r6, #0]
 80065ee:	6823      	ldr	r3, [r4, #0]
 80065f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80065f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065f8:	d11b      	bne.n	8006632 <_scanf_float+0x3a6>
 80065fa:	9b01      	ldr	r3, [sp, #4]
 80065fc:	454b      	cmp	r3, r9
 80065fe:	eba3 0209 	sub.w	r2, r3, r9
 8006602:	d123      	bne.n	800664c <_scanf_float+0x3c0>
 8006604:	2200      	movs	r2, #0
 8006606:	4659      	mov	r1, fp
 8006608:	4640      	mov	r0, r8
 800660a:	f000 fe97 	bl	800733c <_strtod_r>
 800660e:	6822      	ldr	r2, [r4, #0]
 8006610:	9b03      	ldr	r3, [sp, #12]
 8006612:	f012 0f02 	tst.w	r2, #2
 8006616:	ec57 6b10 	vmov	r6, r7, d0
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	d021      	beq.n	8006662 <_scanf_float+0x3d6>
 800661e:	9903      	ldr	r1, [sp, #12]
 8006620:	1d1a      	adds	r2, r3, #4
 8006622:	600a      	str	r2, [r1, #0]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	e9c3 6700 	strd	r6, r7, [r3]
 800662a:	68e3      	ldr	r3, [r4, #12]
 800662c:	3301      	adds	r3, #1
 800662e:	60e3      	str	r3, [r4, #12]
 8006630:	e66d      	b.n	800630e <_scanf_float+0x82>
 8006632:	9b04      	ldr	r3, [sp, #16]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d0e5      	beq.n	8006604 <_scanf_float+0x378>
 8006638:	9905      	ldr	r1, [sp, #20]
 800663a:	230a      	movs	r3, #10
 800663c:	462a      	mov	r2, r5
 800663e:	3101      	adds	r1, #1
 8006640:	4640      	mov	r0, r8
 8006642:	f000 ff03 	bl	800744c <_strtol_r>
 8006646:	9b04      	ldr	r3, [sp, #16]
 8006648:	9e05      	ldr	r6, [sp, #20]
 800664a:	1ac2      	subs	r2, r0, r3
 800664c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006650:	429e      	cmp	r6, r3
 8006652:	bf28      	it	cs
 8006654:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006658:	4912      	ldr	r1, [pc, #72]	; (80066a4 <_scanf_float+0x418>)
 800665a:	4630      	mov	r0, r6
 800665c:	f000 f82c 	bl	80066b8 <siprintf>
 8006660:	e7d0      	b.n	8006604 <_scanf_float+0x378>
 8006662:	9903      	ldr	r1, [sp, #12]
 8006664:	f012 0f04 	tst.w	r2, #4
 8006668:	f103 0204 	add.w	r2, r3, #4
 800666c:	600a      	str	r2, [r1, #0]
 800666e:	d1d9      	bne.n	8006624 <_scanf_float+0x398>
 8006670:	f8d3 8000 	ldr.w	r8, [r3]
 8006674:	ee10 2a10 	vmov	r2, s0
 8006678:	ee10 0a10 	vmov	r0, s0
 800667c:	463b      	mov	r3, r7
 800667e:	4639      	mov	r1, r7
 8006680:	f7fa fa74 	bl	8000b6c <__aeabi_dcmpun>
 8006684:	b128      	cbz	r0, 8006692 <_scanf_float+0x406>
 8006686:	4808      	ldr	r0, [pc, #32]	; (80066a8 <_scanf_float+0x41c>)
 8006688:	f000 f810 	bl	80066ac <nanf>
 800668c:	ed88 0a00 	vstr	s0, [r8]
 8006690:	e7cb      	b.n	800662a <_scanf_float+0x39e>
 8006692:	4630      	mov	r0, r6
 8006694:	4639      	mov	r1, r7
 8006696:	f7fa fac7 	bl	8000c28 <__aeabi_d2f>
 800669a:	f8c8 0000 	str.w	r0, [r8]
 800669e:	e7c4      	b.n	800662a <_scanf_float+0x39e>
 80066a0:	2500      	movs	r5, #0
 80066a2:	e634      	b.n	800630e <_scanf_float+0x82>
 80066a4:	0800a374 	.word	0x0800a374
 80066a8:	0800a780 	.word	0x0800a780

080066ac <nanf>:
 80066ac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80066b4 <nanf+0x8>
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	7fc00000 	.word	0x7fc00000

080066b8 <siprintf>:
 80066b8:	b40e      	push	{r1, r2, r3}
 80066ba:	b500      	push	{lr}
 80066bc:	b09c      	sub	sp, #112	; 0x70
 80066be:	ab1d      	add	r3, sp, #116	; 0x74
 80066c0:	9002      	str	r0, [sp, #8]
 80066c2:	9006      	str	r0, [sp, #24]
 80066c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80066c8:	4809      	ldr	r0, [pc, #36]	; (80066f0 <siprintf+0x38>)
 80066ca:	9107      	str	r1, [sp, #28]
 80066cc:	9104      	str	r1, [sp, #16]
 80066ce:	4909      	ldr	r1, [pc, #36]	; (80066f4 <siprintf+0x3c>)
 80066d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80066d4:	9105      	str	r1, [sp, #20]
 80066d6:	6800      	ldr	r0, [r0, #0]
 80066d8:	9301      	str	r3, [sp, #4]
 80066da:	a902      	add	r1, sp, #8
 80066dc:	f002 fee2 	bl	80094a4 <_svfiprintf_r>
 80066e0:	9b02      	ldr	r3, [sp, #8]
 80066e2:	2200      	movs	r2, #0
 80066e4:	701a      	strb	r2, [r3, #0]
 80066e6:	b01c      	add	sp, #112	; 0x70
 80066e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80066ec:	b003      	add	sp, #12
 80066ee:	4770      	bx	lr
 80066f0:	20000018 	.word	0x20000018
 80066f4:	ffff0208 	.word	0xffff0208

080066f8 <sulp>:
 80066f8:	b570      	push	{r4, r5, r6, lr}
 80066fa:	4604      	mov	r4, r0
 80066fc:	460d      	mov	r5, r1
 80066fe:	ec45 4b10 	vmov	d0, r4, r5
 8006702:	4616      	mov	r6, r2
 8006704:	f002 fc2c 	bl	8008f60 <__ulp>
 8006708:	ec51 0b10 	vmov	r0, r1, d0
 800670c:	b17e      	cbz	r6, 800672e <sulp+0x36>
 800670e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006712:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006716:	2b00      	cmp	r3, #0
 8006718:	dd09      	ble.n	800672e <sulp+0x36>
 800671a:	051b      	lsls	r3, r3, #20
 800671c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006720:	2400      	movs	r4, #0
 8006722:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006726:	4622      	mov	r2, r4
 8006728:	462b      	mov	r3, r5
 800672a:	f7f9 ff85 	bl	8000638 <__aeabi_dmul>
 800672e:	bd70      	pop	{r4, r5, r6, pc}

08006730 <_strtod_l>:
 8006730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006734:	ed2d 8b02 	vpush	{d8}
 8006738:	b09d      	sub	sp, #116	; 0x74
 800673a:	461f      	mov	r7, r3
 800673c:	2300      	movs	r3, #0
 800673e:	9318      	str	r3, [sp, #96]	; 0x60
 8006740:	4ba2      	ldr	r3, [pc, #648]	; (80069cc <_strtod_l+0x29c>)
 8006742:	9213      	str	r2, [sp, #76]	; 0x4c
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	9305      	str	r3, [sp, #20]
 8006748:	4604      	mov	r4, r0
 800674a:	4618      	mov	r0, r3
 800674c:	4688      	mov	r8, r1
 800674e:	f7f9 fd5f 	bl	8000210 <strlen>
 8006752:	f04f 0a00 	mov.w	sl, #0
 8006756:	4605      	mov	r5, r0
 8006758:	f04f 0b00 	mov.w	fp, #0
 800675c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006760:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006762:	781a      	ldrb	r2, [r3, #0]
 8006764:	2a2b      	cmp	r2, #43	; 0x2b
 8006766:	d04e      	beq.n	8006806 <_strtod_l+0xd6>
 8006768:	d83b      	bhi.n	80067e2 <_strtod_l+0xb2>
 800676a:	2a0d      	cmp	r2, #13
 800676c:	d834      	bhi.n	80067d8 <_strtod_l+0xa8>
 800676e:	2a08      	cmp	r2, #8
 8006770:	d834      	bhi.n	80067dc <_strtod_l+0xac>
 8006772:	2a00      	cmp	r2, #0
 8006774:	d03e      	beq.n	80067f4 <_strtod_l+0xc4>
 8006776:	2300      	movs	r3, #0
 8006778:	930a      	str	r3, [sp, #40]	; 0x28
 800677a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800677c:	7833      	ldrb	r3, [r6, #0]
 800677e:	2b30      	cmp	r3, #48	; 0x30
 8006780:	f040 80b0 	bne.w	80068e4 <_strtod_l+0x1b4>
 8006784:	7873      	ldrb	r3, [r6, #1]
 8006786:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800678a:	2b58      	cmp	r3, #88	; 0x58
 800678c:	d168      	bne.n	8006860 <_strtod_l+0x130>
 800678e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006790:	9301      	str	r3, [sp, #4]
 8006792:	ab18      	add	r3, sp, #96	; 0x60
 8006794:	9702      	str	r7, [sp, #8]
 8006796:	9300      	str	r3, [sp, #0]
 8006798:	4a8d      	ldr	r2, [pc, #564]	; (80069d0 <_strtod_l+0x2a0>)
 800679a:	ab19      	add	r3, sp, #100	; 0x64
 800679c:	a917      	add	r1, sp, #92	; 0x5c
 800679e:	4620      	mov	r0, r4
 80067a0:	f001 fd38 	bl	8008214 <__gethex>
 80067a4:	f010 0707 	ands.w	r7, r0, #7
 80067a8:	4605      	mov	r5, r0
 80067aa:	d005      	beq.n	80067b8 <_strtod_l+0x88>
 80067ac:	2f06      	cmp	r7, #6
 80067ae:	d12c      	bne.n	800680a <_strtod_l+0xda>
 80067b0:	3601      	adds	r6, #1
 80067b2:	2300      	movs	r3, #0
 80067b4:	9617      	str	r6, [sp, #92]	; 0x5c
 80067b6:	930a      	str	r3, [sp, #40]	; 0x28
 80067b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	f040 8590 	bne.w	80072e0 <_strtod_l+0xbb0>
 80067c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067c2:	b1eb      	cbz	r3, 8006800 <_strtod_l+0xd0>
 80067c4:	4652      	mov	r2, sl
 80067c6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80067ca:	ec43 2b10 	vmov	d0, r2, r3
 80067ce:	b01d      	add	sp, #116	; 0x74
 80067d0:	ecbd 8b02 	vpop	{d8}
 80067d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067d8:	2a20      	cmp	r2, #32
 80067da:	d1cc      	bne.n	8006776 <_strtod_l+0x46>
 80067dc:	3301      	adds	r3, #1
 80067de:	9317      	str	r3, [sp, #92]	; 0x5c
 80067e0:	e7be      	b.n	8006760 <_strtod_l+0x30>
 80067e2:	2a2d      	cmp	r2, #45	; 0x2d
 80067e4:	d1c7      	bne.n	8006776 <_strtod_l+0x46>
 80067e6:	2201      	movs	r2, #1
 80067e8:	920a      	str	r2, [sp, #40]	; 0x28
 80067ea:	1c5a      	adds	r2, r3, #1
 80067ec:	9217      	str	r2, [sp, #92]	; 0x5c
 80067ee:	785b      	ldrb	r3, [r3, #1]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1c2      	bne.n	800677a <_strtod_l+0x4a>
 80067f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80067f6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	f040 856e 	bne.w	80072dc <_strtod_l+0xbac>
 8006800:	4652      	mov	r2, sl
 8006802:	465b      	mov	r3, fp
 8006804:	e7e1      	b.n	80067ca <_strtod_l+0x9a>
 8006806:	2200      	movs	r2, #0
 8006808:	e7ee      	b.n	80067e8 <_strtod_l+0xb8>
 800680a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800680c:	b13a      	cbz	r2, 800681e <_strtod_l+0xee>
 800680e:	2135      	movs	r1, #53	; 0x35
 8006810:	a81a      	add	r0, sp, #104	; 0x68
 8006812:	f002 fcb0 	bl	8009176 <__copybits>
 8006816:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006818:	4620      	mov	r0, r4
 800681a:	f002 f86f 	bl	80088fc <_Bfree>
 800681e:	3f01      	subs	r7, #1
 8006820:	2f04      	cmp	r7, #4
 8006822:	d806      	bhi.n	8006832 <_strtod_l+0x102>
 8006824:	e8df f007 	tbb	[pc, r7]
 8006828:	1714030a 	.word	0x1714030a
 800682c:	0a          	.byte	0x0a
 800682d:	00          	.byte	0x00
 800682e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006832:	0728      	lsls	r0, r5, #28
 8006834:	d5c0      	bpl.n	80067b8 <_strtod_l+0x88>
 8006836:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800683a:	e7bd      	b.n	80067b8 <_strtod_l+0x88>
 800683c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006840:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006842:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006846:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800684a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800684e:	e7f0      	b.n	8006832 <_strtod_l+0x102>
 8006850:	f8df b180 	ldr.w	fp, [pc, #384]	; 80069d4 <_strtod_l+0x2a4>
 8006854:	e7ed      	b.n	8006832 <_strtod_l+0x102>
 8006856:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800685a:	f04f 3aff 	mov.w	sl, #4294967295
 800685e:	e7e8      	b.n	8006832 <_strtod_l+0x102>
 8006860:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006862:	1c5a      	adds	r2, r3, #1
 8006864:	9217      	str	r2, [sp, #92]	; 0x5c
 8006866:	785b      	ldrb	r3, [r3, #1]
 8006868:	2b30      	cmp	r3, #48	; 0x30
 800686a:	d0f9      	beq.n	8006860 <_strtod_l+0x130>
 800686c:	2b00      	cmp	r3, #0
 800686e:	d0a3      	beq.n	80067b8 <_strtod_l+0x88>
 8006870:	2301      	movs	r3, #1
 8006872:	f04f 0900 	mov.w	r9, #0
 8006876:	9304      	str	r3, [sp, #16]
 8006878:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800687a:	9308      	str	r3, [sp, #32]
 800687c:	f8cd 901c 	str.w	r9, [sp, #28]
 8006880:	464f      	mov	r7, r9
 8006882:	220a      	movs	r2, #10
 8006884:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006886:	7806      	ldrb	r6, [r0, #0]
 8006888:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800688c:	b2d9      	uxtb	r1, r3
 800688e:	2909      	cmp	r1, #9
 8006890:	d92a      	bls.n	80068e8 <_strtod_l+0x1b8>
 8006892:	9905      	ldr	r1, [sp, #20]
 8006894:	462a      	mov	r2, r5
 8006896:	f002 ff1f 	bl	80096d8 <strncmp>
 800689a:	b398      	cbz	r0, 8006904 <_strtod_l+0x1d4>
 800689c:	2000      	movs	r0, #0
 800689e:	4632      	mov	r2, r6
 80068a0:	463d      	mov	r5, r7
 80068a2:	9005      	str	r0, [sp, #20]
 80068a4:	4603      	mov	r3, r0
 80068a6:	2a65      	cmp	r2, #101	; 0x65
 80068a8:	d001      	beq.n	80068ae <_strtod_l+0x17e>
 80068aa:	2a45      	cmp	r2, #69	; 0x45
 80068ac:	d118      	bne.n	80068e0 <_strtod_l+0x1b0>
 80068ae:	b91d      	cbnz	r5, 80068b8 <_strtod_l+0x188>
 80068b0:	9a04      	ldr	r2, [sp, #16]
 80068b2:	4302      	orrs	r2, r0
 80068b4:	d09e      	beq.n	80067f4 <_strtod_l+0xc4>
 80068b6:	2500      	movs	r5, #0
 80068b8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80068bc:	f108 0201 	add.w	r2, r8, #1
 80068c0:	9217      	str	r2, [sp, #92]	; 0x5c
 80068c2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80068c6:	2a2b      	cmp	r2, #43	; 0x2b
 80068c8:	d075      	beq.n	80069b6 <_strtod_l+0x286>
 80068ca:	2a2d      	cmp	r2, #45	; 0x2d
 80068cc:	d07b      	beq.n	80069c6 <_strtod_l+0x296>
 80068ce:	f04f 0c00 	mov.w	ip, #0
 80068d2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80068d6:	2909      	cmp	r1, #9
 80068d8:	f240 8082 	bls.w	80069e0 <_strtod_l+0x2b0>
 80068dc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80068e0:	2600      	movs	r6, #0
 80068e2:	e09d      	b.n	8006a20 <_strtod_l+0x2f0>
 80068e4:	2300      	movs	r3, #0
 80068e6:	e7c4      	b.n	8006872 <_strtod_l+0x142>
 80068e8:	2f08      	cmp	r7, #8
 80068ea:	bfd8      	it	le
 80068ec:	9907      	ldrle	r1, [sp, #28]
 80068ee:	f100 0001 	add.w	r0, r0, #1
 80068f2:	bfda      	itte	le
 80068f4:	fb02 3301 	mlale	r3, r2, r1, r3
 80068f8:	9307      	strle	r3, [sp, #28]
 80068fa:	fb02 3909 	mlagt	r9, r2, r9, r3
 80068fe:	3701      	adds	r7, #1
 8006900:	9017      	str	r0, [sp, #92]	; 0x5c
 8006902:	e7bf      	b.n	8006884 <_strtod_l+0x154>
 8006904:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006906:	195a      	adds	r2, r3, r5
 8006908:	9217      	str	r2, [sp, #92]	; 0x5c
 800690a:	5d5a      	ldrb	r2, [r3, r5]
 800690c:	2f00      	cmp	r7, #0
 800690e:	d037      	beq.n	8006980 <_strtod_l+0x250>
 8006910:	9005      	str	r0, [sp, #20]
 8006912:	463d      	mov	r5, r7
 8006914:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006918:	2b09      	cmp	r3, #9
 800691a:	d912      	bls.n	8006942 <_strtod_l+0x212>
 800691c:	2301      	movs	r3, #1
 800691e:	e7c2      	b.n	80068a6 <_strtod_l+0x176>
 8006920:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006922:	1c5a      	adds	r2, r3, #1
 8006924:	9217      	str	r2, [sp, #92]	; 0x5c
 8006926:	785a      	ldrb	r2, [r3, #1]
 8006928:	3001      	adds	r0, #1
 800692a:	2a30      	cmp	r2, #48	; 0x30
 800692c:	d0f8      	beq.n	8006920 <_strtod_l+0x1f0>
 800692e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006932:	2b08      	cmp	r3, #8
 8006934:	f200 84d9 	bhi.w	80072ea <_strtod_l+0xbba>
 8006938:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800693a:	9005      	str	r0, [sp, #20]
 800693c:	2000      	movs	r0, #0
 800693e:	9308      	str	r3, [sp, #32]
 8006940:	4605      	mov	r5, r0
 8006942:	3a30      	subs	r2, #48	; 0x30
 8006944:	f100 0301 	add.w	r3, r0, #1
 8006948:	d014      	beq.n	8006974 <_strtod_l+0x244>
 800694a:	9905      	ldr	r1, [sp, #20]
 800694c:	4419      	add	r1, r3
 800694e:	9105      	str	r1, [sp, #20]
 8006950:	462b      	mov	r3, r5
 8006952:	eb00 0e05 	add.w	lr, r0, r5
 8006956:	210a      	movs	r1, #10
 8006958:	4573      	cmp	r3, lr
 800695a:	d113      	bne.n	8006984 <_strtod_l+0x254>
 800695c:	182b      	adds	r3, r5, r0
 800695e:	2b08      	cmp	r3, #8
 8006960:	f105 0501 	add.w	r5, r5, #1
 8006964:	4405      	add	r5, r0
 8006966:	dc1c      	bgt.n	80069a2 <_strtod_l+0x272>
 8006968:	9907      	ldr	r1, [sp, #28]
 800696a:	230a      	movs	r3, #10
 800696c:	fb03 2301 	mla	r3, r3, r1, r2
 8006970:	9307      	str	r3, [sp, #28]
 8006972:	2300      	movs	r3, #0
 8006974:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006976:	1c51      	adds	r1, r2, #1
 8006978:	9117      	str	r1, [sp, #92]	; 0x5c
 800697a:	7852      	ldrb	r2, [r2, #1]
 800697c:	4618      	mov	r0, r3
 800697e:	e7c9      	b.n	8006914 <_strtod_l+0x1e4>
 8006980:	4638      	mov	r0, r7
 8006982:	e7d2      	b.n	800692a <_strtod_l+0x1fa>
 8006984:	2b08      	cmp	r3, #8
 8006986:	dc04      	bgt.n	8006992 <_strtod_l+0x262>
 8006988:	9e07      	ldr	r6, [sp, #28]
 800698a:	434e      	muls	r6, r1
 800698c:	9607      	str	r6, [sp, #28]
 800698e:	3301      	adds	r3, #1
 8006990:	e7e2      	b.n	8006958 <_strtod_l+0x228>
 8006992:	f103 0c01 	add.w	ip, r3, #1
 8006996:	f1bc 0f10 	cmp.w	ip, #16
 800699a:	bfd8      	it	le
 800699c:	fb01 f909 	mulle.w	r9, r1, r9
 80069a0:	e7f5      	b.n	800698e <_strtod_l+0x25e>
 80069a2:	2d10      	cmp	r5, #16
 80069a4:	bfdc      	itt	le
 80069a6:	230a      	movle	r3, #10
 80069a8:	fb03 2909 	mlale	r9, r3, r9, r2
 80069ac:	e7e1      	b.n	8006972 <_strtod_l+0x242>
 80069ae:	2300      	movs	r3, #0
 80069b0:	9305      	str	r3, [sp, #20]
 80069b2:	2301      	movs	r3, #1
 80069b4:	e77c      	b.n	80068b0 <_strtod_l+0x180>
 80069b6:	f04f 0c00 	mov.w	ip, #0
 80069ba:	f108 0202 	add.w	r2, r8, #2
 80069be:	9217      	str	r2, [sp, #92]	; 0x5c
 80069c0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80069c4:	e785      	b.n	80068d2 <_strtod_l+0x1a2>
 80069c6:	f04f 0c01 	mov.w	ip, #1
 80069ca:	e7f6      	b.n	80069ba <_strtod_l+0x28a>
 80069cc:	0800a5c8 	.word	0x0800a5c8
 80069d0:	0800a37c 	.word	0x0800a37c
 80069d4:	7ff00000 	.word	0x7ff00000
 80069d8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80069da:	1c51      	adds	r1, r2, #1
 80069dc:	9117      	str	r1, [sp, #92]	; 0x5c
 80069de:	7852      	ldrb	r2, [r2, #1]
 80069e0:	2a30      	cmp	r2, #48	; 0x30
 80069e2:	d0f9      	beq.n	80069d8 <_strtod_l+0x2a8>
 80069e4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80069e8:	2908      	cmp	r1, #8
 80069ea:	f63f af79 	bhi.w	80068e0 <_strtod_l+0x1b0>
 80069ee:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80069f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80069f4:	9206      	str	r2, [sp, #24]
 80069f6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80069f8:	1c51      	adds	r1, r2, #1
 80069fa:	9117      	str	r1, [sp, #92]	; 0x5c
 80069fc:	7852      	ldrb	r2, [r2, #1]
 80069fe:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006a02:	2e09      	cmp	r6, #9
 8006a04:	d937      	bls.n	8006a76 <_strtod_l+0x346>
 8006a06:	9e06      	ldr	r6, [sp, #24]
 8006a08:	1b89      	subs	r1, r1, r6
 8006a0a:	2908      	cmp	r1, #8
 8006a0c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006a10:	dc02      	bgt.n	8006a18 <_strtod_l+0x2e8>
 8006a12:	4576      	cmp	r6, lr
 8006a14:	bfa8      	it	ge
 8006a16:	4676      	movge	r6, lr
 8006a18:	f1bc 0f00 	cmp.w	ip, #0
 8006a1c:	d000      	beq.n	8006a20 <_strtod_l+0x2f0>
 8006a1e:	4276      	negs	r6, r6
 8006a20:	2d00      	cmp	r5, #0
 8006a22:	d14d      	bne.n	8006ac0 <_strtod_l+0x390>
 8006a24:	9904      	ldr	r1, [sp, #16]
 8006a26:	4301      	orrs	r1, r0
 8006a28:	f47f aec6 	bne.w	80067b8 <_strtod_l+0x88>
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f47f aee1 	bne.w	80067f4 <_strtod_l+0xc4>
 8006a32:	2a69      	cmp	r2, #105	; 0x69
 8006a34:	d027      	beq.n	8006a86 <_strtod_l+0x356>
 8006a36:	dc24      	bgt.n	8006a82 <_strtod_l+0x352>
 8006a38:	2a49      	cmp	r2, #73	; 0x49
 8006a3a:	d024      	beq.n	8006a86 <_strtod_l+0x356>
 8006a3c:	2a4e      	cmp	r2, #78	; 0x4e
 8006a3e:	f47f aed9 	bne.w	80067f4 <_strtod_l+0xc4>
 8006a42:	499f      	ldr	r1, [pc, #636]	; (8006cc0 <_strtod_l+0x590>)
 8006a44:	a817      	add	r0, sp, #92	; 0x5c
 8006a46:	f001 fe3d 	bl	80086c4 <__match>
 8006a4a:	2800      	cmp	r0, #0
 8006a4c:	f43f aed2 	beq.w	80067f4 <_strtod_l+0xc4>
 8006a50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	2b28      	cmp	r3, #40	; 0x28
 8006a56:	d12d      	bne.n	8006ab4 <_strtod_l+0x384>
 8006a58:	499a      	ldr	r1, [pc, #616]	; (8006cc4 <_strtod_l+0x594>)
 8006a5a:	aa1a      	add	r2, sp, #104	; 0x68
 8006a5c:	a817      	add	r0, sp, #92	; 0x5c
 8006a5e:	f001 fe45 	bl	80086ec <__hexnan>
 8006a62:	2805      	cmp	r0, #5
 8006a64:	d126      	bne.n	8006ab4 <_strtod_l+0x384>
 8006a66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006a68:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8006a6c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006a70:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006a74:	e6a0      	b.n	80067b8 <_strtod_l+0x88>
 8006a76:	210a      	movs	r1, #10
 8006a78:	fb01 2e0e 	mla	lr, r1, lr, r2
 8006a7c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006a80:	e7b9      	b.n	80069f6 <_strtod_l+0x2c6>
 8006a82:	2a6e      	cmp	r2, #110	; 0x6e
 8006a84:	e7db      	b.n	8006a3e <_strtod_l+0x30e>
 8006a86:	4990      	ldr	r1, [pc, #576]	; (8006cc8 <_strtod_l+0x598>)
 8006a88:	a817      	add	r0, sp, #92	; 0x5c
 8006a8a:	f001 fe1b 	bl	80086c4 <__match>
 8006a8e:	2800      	cmp	r0, #0
 8006a90:	f43f aeb0 	beq.w	80067f4 <_strtod_l+0xc4>
 8006a94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a96:	498d      	ldr	r1, [pc, #564]	; (8006ccc <_strtod_l+0x59c>)
 8006a98:	3b01      	subs	r3, #1
 8006a9a:	a817      	add	r0, sp, #92	; 0x5c
 8006a9c:	9317      	str	r3, [sp, #92]	; 0x5c
 8006a9e:	f001 fe11 	bl	80086c4 <__match>
 8006aa2:	b910      	cbnz	r0, 8006aaa <_strtod_l+0x37a>
 8006aa4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	9317      	str	r3, [sp, #92]	; 0x5c
 8006aaa:	f8df b230 	ldr.w	fp, [pc, #560]	; 8006cdc <_strtod_l+0x5ac>
 8006aae:	f04f 0a00 	mov.w	sl, #0
 8006ab2:	e681      	b.n	80067b8 <_strtod_l+0x88>
 8006ab4:	4886      	ldr	r0, [pc, #536]	; (8006cd0 <_strtod_l+0x5a0>)
 8006ab6:	f002 fdf7 	bl	80096a8 <nan>
 8006aba:	ec5b ab10 	vmov	sl, fp, d0
 8006abe:	e67b      	b.n	80067b8 <_strtod_l+0x88>
 8006ac0:	9b05      	ldr	r3, [sp, #20]
 8006ac2:	9807      	ldr	r0, [sp, #28]
 8006ac4:	1af3      	subs	r3, r6, r3
 8006ac6:	2f00      	cmp	r7, #0
 8006ac8:	bf08      	it	eq
 8006aca:	462f      	moveq	r7, r5
 8006acc:	2d10      	cmp	r5, #16
 8006ace:	9306      	str	r3, [sp, #24]
 8006ad0:	46a8      	mov	r8, r5
 8006ad2:	bfa8      	it	ge
 8006ad4:	f04f 0810 	movge.w	r8, #16
 8006ad8:	f7f9 fd34 	bl	8000544 <__aeabi_ui2d>
 8006adc:	2d09      	cmp	r5, #9
 8006ade:	4682      	mov	sl, r0
 8006ae0:	468b      	mov	fp, r1
 8006ae2:	dd13      	ble.n	8006b0c <_strtod_l+0x3dc>
 8006ae4:	4b7b      	ldr	r3, [pc, #492]	; (8006cd4 <_strtod_l+0x5a4>)
 8006ae6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006aea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006aee:	f7f9 fda3 	bl	8000638 <__aeabi_dmul>
 8006af2:	4682      	mov	sl, r0
 8006af4:	4648      	mov	r0, r9
 8006af6:	468b      	mov	fp, r1
 8006af8:	f7f9 fd24 	bl	8000544 <__aeabi_ui2d>
 8006afc:	4602      	mov	r2, r0
 8006afe:	460b      	mov	r3, r1
 8006b00:	4650      	mov	r0, sl
 8006b02:	4659      	mov	r1, fp
 8006b04:	f7f9 fbe2 	bl	80002cc <__adddf3>
 8006b08:	4682      	mov	sl, r0
 8006b0a:	468b      	mov	fp, r1
 8006b0c:	2d0f      	cmp	r5, #15
 8006b0e:	dc38      	bgt.n	8006b82 <_strtod_l+0x452>
 8006b10:	9b06      	ldr	r3, [sp, #24]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	f43f ae50 	beq.w	80067b8 <_strtod_l+0x88>
 8006b18:	dd24      	ble.n	8006b64 <_strtod_l+0x434>
 8006b1a:	2b16      	cmp	r3, #22
 8006b1c:	dc0b      	bgt.n	8006b36 <_strtod_l+0x406>
 8006b1e:	496d      	ldr	r1, [pc, #436]	; (8006cd4 <_strtod_l+0x5a4>)
 8006b20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006b24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b28:	4652      	mov	r2, sl
 8006b2a:	465b      	mov	r3, fp
 8006b2c:	f7f9 fd84 	bl	8000638 <__aeabi_dmul>
 8006b30:	4682      	mov	sl, r0
 8006b32:	468b      	mov	fp, r1
 8006b34:	e640      	b.n	80067b8 <_strtod_l+0x88>
 8006b36:	9a06      	ldr	r2, [sp, #24]
 8006b38:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	db20      	blt.n	8006b82 <_strtod_l+0x452>
 8006b40:	4c64      	ldr	r4, [pc, #400]	; (8006cd4 <_strtod_l+0x5a4>)
 8006b42:	f1c5 050f 	rsb	r5, r5, #15
 8006b46:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006b4a:	4652      	mov	r2, sl
 8006b4c:	465b      	mov	r3, fp
 8006b4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b52:	f7f9 fd71 	bl	8000638 <__aeabi_dmul>
 8006b56:	9b06      	ldr	r3, [sp, #24]
 8006b58:	1b5d      	subs	r5, r3, r5
 8006b5a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006b5e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006b62:	e7e3      	b.n	8006b2c <_strtod_l+0x3fc>
 8006b64:	9b06      	ldr	r3, [sp, #24]
 8006b66:	3316      	adds	r3, #22
 8006b68:	db0b      	blt.n	8006b82 <_strtod_l+0x452>
 8006b6a:	9b05      	ldr	r3, [sp, #20]
 8006b6c:	1b9e      	subs	r6, r3, r6
 8006b6e:	4b59      	ldr	r3, [pc, #356]	; (8006cd4 <_strtod_l+0x5a4>)
 8006b70:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006b74:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006b78:	4650      	mov	r0, sl
 8006b7a:	4659      	mov	r1, fp
 8006b7c:	f7f9 fe86 	bl	800088c <__aeabi_ddiv>
 8006b80:	e7d6      	b.n	8006b30 <_strtod_l+0x400>
 8006b82:	9b06      	ldr	r3, [sp, #24]
 8006b84:	eba5 0808 	sub.w	r8, r5, r8
 8006b88:	4498      	add	r8, r3
 8006b8a:	f1b8 0f00 	cmp.w	r8, #0
 8006b8e:	dd74      	ble.n	8006c7a <_strtod_l+0x54a>
 8006b90:	f018 030f 	ands.w	r3, r8, #15
 8006b94:	d00a      	beq.n	8006bac <_strtod_l+0x47c>
 8006b96:	494f      	ldr	r1, [pc, #316]	; (8006cd4 <_strtod_l+0x5a4>)
 8006b98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006b9c:	4652      	mov	r2, sl
 8006b9e:	465b      	mov	r3, fp
 8006ba0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ba4:	f7f9 fd48 	bl	8000638 <__aeabi_dmul>
 8006ba8:	4682      	mov	sl, r0
 8006baa:	468b      	mov	fp, r1
 8006bac:	f038 080f 	bics.w	r8, r8, #15
 8006bb0:	d04f      	beq.n	8006c52 <_strtod_l+0x522>
 8006bb2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006bb6:	dd22      	ble.n	8006bfe <_strtod_l+0x4ce>
 8006bb8:	2500      	movs	r5, #0
 8006bba:	462e      	mov	r6, r5
 8006bbc:	9507      	str	r5, [sp, #28]
 8006bbe:	9505      	str	r5, [sp, #20]
 8006bc0:	2322      	movs	r3, #34	; 0x22
 8006bc2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8006cdc <_strtod_l+0x5ac>
 8006bc6:	6023      	str	r3, [r4, #0]
 8006bc8:	f04f 0a00 	mov.w	sl, #0
 8006bcc:	9b07      	ldr	r3, [sp, #28]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	f43f adf2 	beq.w	80067b8 <_strtod_l+0x88>
 8006bd4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006bd6:	4620      	mov	r0, r4
 8006bd8:	f001 fe90 	bl	80088fc <_Bfree>
 8006bdc:	9905      	ldr	r1, [sp, #20]
 8006bde:	4620      	mov	r0, r4
 8006be0:	f001 fe8c 	bl	80088fc <_Bfree>
 8006be4:	4631      	mov	r1, r6
 8006be6:	4620      	mov	r0, r4
 8006be8:	f001 fe88 	bl	80088fc <_Bfree>
 8006bec:	9907      	ldr	r1, [sp, #28]
 8006bee:	4620      	mov	r0, r4
 8006bf0:	f001 fe84 	bl	80088fc <_Bfree>
 8006bf4:	4629      	mov	r1, r5
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	f001 fe80 	bl	80088fc <_Bfree>
 8006bfc:	e5dc      	b.n	80067b8 <_strtod_l+0x88>
 8006bfe:	4b36      	ldr	r3, [pc, #216]	; (8006cd8 <_strtod_l+0x5a8>)
 8006c00:	9304      	str	r3, [sp, #16]
 8006c02:	2300      	movs	r3, #0
 8006c04:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006c08:	4650      	mov	r0, sl
 8006c0a:	4659      	mov	r1, fp
 8006c0c:	4699      	mov	r9, r3
 8006c0e:	f1b8 0f01 	cmp.w	r8, #1
 8006c12:	dc21      	bgt.n	8006c58 <_strtod_l+0x528>
 8006c14:	b10b      	cbz	r3, 8006c1a <_strtod_l+0x4ea>
 8006c16:	4682      	mov	sl, r0
 8006c18:	468b      	mov	fp, r1
 8006c1a:	4b2f      	ldr	r3, [pc, #188]	; (8006cd8 <_strtod_l+0x5a8>)
 8006c1c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006c20:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006c24:	4652      	mov	r2, sl
 8006c26:	465b      	mov	r3, fp
 8006c28:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006c2c:	f7f9 fd04 	bl	8000638 <__aeabi_dmul>
 8006c30:	4b2a      	ldr	r3, [pc, #168]	; (8006cdc <_strtod_l+0x5ac>)
 8006c32:	460a      	mov	r2, r1
 8006c34:	400b      	ands	r3, r1
 8006c36:	492a      	ldr	r1, [pc, #168]	; (8006ce0 <_strtod_l+0x5b0>)
 8006c38:	428b      	cmp	r3, r1
 8006c3a:	4682      	mov	sl, r0
 8006c3c:	d8bc      	bhi.n	8006bb8 <_strtod_l+0x488>
 8006c3e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006c42:	428b      	cmp	r3, r1
 8006c44:	bf86      	itte	hi
 8006c46:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8006ce4 <_strtod_l+0x5b4>
 8006c4a:	f04f 3aff 	movhi.w	sl, #4294967295
 8006c4e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006c52:	2300      	movs	r3, #0
 8006c54:	9304      	str	r3, [sp, #16]
 8006c56:	e084      	b.n	8006d62 <_strtod_l+0x632>
 8006c58:	f018 0f01 	tst.w	r8, #1
 8006c5c:	d005      	beq.n	8006c6a <_strtod_l+0x53a>
 8006c5e:	9b04      	ldr	r3, [sp, #16]
 8006c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c64:	f7f9 fce8 	bl	8000638 <__aeabi_dmul>
 8006c68:	2301      	movs	r3, #1
 8006c6a:	9a04      	ldr	r2, [sp, #16]
 8006c6c:	3208      	adds	r2, #8
 8006c6e:	f109 0901 	add.w	r9, r9, #1
 8006c72:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006c76:	9204      	str	r2, [sp, #16]
 8006c78:	e7c9      	b.n	8006c0e <_strtod_l+0x4de>
 8006c7a:	d0ea      	beq.n	8006c52 <_strtod_l+0x522>
 8006c7c:	f1c8 0800 	rsb	r8, r8, #0
 8006c80:	f018 020f 	ands.w	r2, r8, #15
 8006c84:	d00a      	beq.n	8006c9c <_strtod_l+0x56c>
 8006c86:	4b13      	ldr	r3, [pc, #76]	; (8006cd4 <_strtod_l+0x5a4>)
 8006c88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c8c:	4650      	mov	r0, sl
 8006c8e:	4659      	mov	r1, fp
 8006c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c94:	f7f9 fdfa 	bl	800088c <__aeabi_ddiv>
 8006c98:	4682      	mov	sl, r0
 8006c9a:	468b      	mov	fp, r1
 8006c9c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006ca0:	d0d7      	beq.n	8006c52 <_strtod_l+0x522>
 8006ca2:	f1b8 0f1f 	cmp.w	r8, #31
 8006ca6:	dd1f      	ble.n	8006ce8 <_strtod_l+0x5b8>
 8006ca8:	2500      	movs	r5, #0
 8006caa:	462e      	mov	r6, r5
 8006cac:	9507      	str	r5, [sp, #28]
 8006cae:	9505      	str	r5, [sp, #20]
 8006cb0:	2322      	movs	r3, #34	; 0x22
 8006cb2:	f04f 0a00 	mov.w	sl, #0
 8006cb6:	f04f 0b00 	mov.w	fp, #0
 8006cba:	6023      	str	r3, [r4, #0]
 8006cbc:	e786      	b.n	8006bcc <_strtod_l+0x49c>
 8006cbe:	bf00      	nop
 8006cc0:	0800a34d 	.word	0x0800a34d
 8006cc4:	0800a390 	.word	0x0800a390
 8006cc8:	0800a345 	.word	0x0800a345
 8006ccc:	0800a4d4 	.word	0x0800a4d4
 8006cd0:	0800a780 	.word	0x0800a780
 8006cd4:	0800a660 	.word	0x0800a660
 8006cd8:	0800a638 	.word	0x0800a638
 8006cdc:	7ff00000 	.word	0x7ff00000
 8006ce0:	7ca00000 	.word	0x7ca00000
 8006ce4:	7fefffff 	.word	0x7fefffff
 8006ce8:	f018 0310 	ands.w	r3, r8, #16
 8006cec:	bf18      	it	ne
 8006cee:	236a      	movne	r3, #106	; 0x6a
 8006cf0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80070a0 <_strtod_l+0x970>
 8006cf4:	9304      	str	r3, [sp, #16]
 8006cf6:	4650      	mov	r0, sl
 8006cf8:	4659      	mov	r1, fp
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	f018 0f01 	tst.w	r8, #1
 8006d00:	d004      	beq.n	8006d0c <_strtod_l+0x5dc>
 8006d02:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006d06:	f7f9 fc97 	bl	8000638 <__aeabi_dmul>
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006d10:	f109 0908 	add.w	r9, r9, #8
 8006d14:	d1f2      	bne.n	8006cfc <_strtod_l+0x5cc>
 8006d16:	b10b      	cbz	r3, 8006d1c <_strtod_l+0x5ec>
 8006d18:	4682      	mov	sl, r0
 8006d1a:	468b      	mov	fp, r1
 8006d1c:	9b04      	ldr	r3, [sp, #16]
 8006d1e:	b1c3      	cbz	r3, 8006d52 <_strtod_l+0x622>
 8006d20:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006d24:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	4659      	mov	r1, fp
 8006d2c:	dd11      	ble.n	8006d52 <_strtod_l+0x622>
 8006d2e:	2b1f      	cmp	r3, #31
 8006d30:	f340 8124 	ble.w	8006f7c <_strtod_l+0x84c>
 8006d34:	2b34      	cmp	r3, #52	; 0x34
 8006d36:	bfde      	ittt	le
 8006d38:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006d3c:	f04f 33ff 	movle.w	r3, #4294967295
 8006d40:	fa03 f202 	lslle.w	r2, r3, r2
 8006d44:	f04f 0a00 	mov.w	sl, #0
 8006d48:	bfcc      	ite	gt
 8006d4a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006d4e:	ea02 0b01 	andle.w	fp, r2, r1
 8006d52:	2200      	movs	r2, #0
 8006d54:	2300      	movs	r3, #0
 8006d56:	4650      	mov	r0, sl
 8006d58:	4659      	mov	r1, fp
 8006d5a:	f7f9 fed5 	bl	8000b08 <__aeabi_dcmpeq>
 8006d5e:	2800      	cmp	r0, #0
 8006d60:	d1a2      	bne.n	8006ca8 <_strtod_l+0x578>
 8006d62:	9b07      	ldr	r3, [sp, #28]
 8006d64:	9300      	str	r3, [sp, #0]
 8006d66:	9908      	ldr	r1, [sp, #32]
 8006d68:	462b      	mov	r3, r5
 8006d6a:	463a      	mov	r2, r7
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	f001 fe2d 	bl	80089cc <__s2b>
 8006d72:	9007      	str	r0, [sp, #28]
 8006d74:	2800      	cmp	r0, #0
 8006d76:	f43f af1f 	beq.w	8006bb8 <_strtod_l+0x488>
 8006d7a:	9b05      	ldr	r3, [sp, #20]
 8006d7c:	1b9e      	subs	r6, r3, r6
 8006d7e:	9b06      	ldr	r3, [sp, #24]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	bfb4      	ite	lt
 8006d84:	4633      	movlt	r3, r6
 8006d86:	2300      	movge	r3, #0
 8006d88:	930c      	str	r3, [sp, #48]	; 0x30
 8006d8a:	9b06      	ldr	r3, [sp, #24]
 8006d8c:	2500      	movs	r5, #0
 8006d8e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006d92:	9312      	str	r3, [sp, #72]	; 0x48
 8006d94:	462e      	mov	r6, r5
 8006d96:	9b07      	ldr	r3, [sp, #28]
 8006d98:	4620      	mov	r0, r4
 8006d9a:	6859      	ldr	r1, [r3, #4]
 8006d9c:	f001 fd6e 	bl	800887c <_Balloc>
 8006da0:	9005      	str	r0, [sp, #20]
 8006da2:	2800      	cmp	r0, #0
 8006da4:	f43f af0c 	beq.w	8006bc0 <_strtod_l+0x490>
 8006da8:	9b07      	ldr	r3, [sp, #28]
 8006daa:	691a      	ldr	r2, [r3, #16]
 8006dac:	3202      	adds	r2, #2
 8006dae:	f103 010c 	add.w	r1, r3, #12
 8006db2:	0092      	lsls	r2, r2, #2
 8006db4:	300c      	adds	r0, #12
 8006db6:	f001 fd53 	bl	8008860 <memcpy>
 8006dba:	ec4b ab10 	vmov	d0, sl, fp
 8006dbe:	aa1a      	add	r2, sp, #104	; 0x68
 8006dc0:	a919      	add	r1, sp, #100	; 0x64
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	f002 f948 	bl	8009058 <__d2b>
 8006dc8:	ec4b ab18 	vmov	d8, sl, fp
 8006dcc:	9018      	str	r0, [sp, #96]	; 0x60
 8006dce:	2800      	cmp	r0, #0
 8006dd0:	f43f aef6 	beq.w	8006bc0 <_strtod_l+0x490>
 8006dd4:	2101      	movs	r1, #1
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	f001 fe92 	bl	8008b00 <__i2b>
 8006ddc:	4606      	mov	r6, r0
 8006dde:	2800      	cmp	r0, #0
 8006de0:	f43f aeee 	beq.w	8006bc0 <_strtod_l+0x490>
 8006de4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006de6:	9904      	ldr	r1, [sp, #16]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	bfab      	itete	ge
 8006dec:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8006dee:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006df0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006df2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8006df6:	bfac      	ite	ge
 8006df8:	eb03 0902 	addge.w	r9, r3, r2
 8006dfc:	1ad7      	sublt	r7, r2, r3
 8006dfe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006e00:	eba3 0801 	sub.w	r8, r3, r1
 8006e04:	4490      	add	r8, r2
 8006e06:	4ba1      	ldr	r3, [pc, #644]	; (800708c <_strtod_l+0x95c>)
 8006e08:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e0c:	4598      	cmp	r8, r3
 8006e0e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006e12:	f280 80c7 	bge.w	8006fa4 <_strtod_l+0x874>
 8006e16:	eba3 0308 	sub.w	r3, r3, r8
 8006e1a:	2b1f      	cmp	r3, #31
 8006e1c:	eba2 0203 	sub.w	r2, r2, r3
 8006e20:	f04f 0101 	mov.w	r1, #1
 8006e24:	f300 80b1 	bgt.w	8006f8a <_strtod_l+0x85a>
 8006e28:	fa01 f303 	lsl.w	r3, r1, r3
 8006e2c:	930d      	str	r3, [sp, #52]	; 0x34
 8006e2e:	2300      	movs	r3, #0
 8006e30:	9308      	str	r3, [sp, #32]
 8006e32:	eb09 0802 	add.w	r8, r9, r2
 8006e36:	9b04      	ldr	r3, [sp, #16]
 8006e38:	45c1      	cmp	r9, r8
 8006e3a:	4417      	add	r7, r2
 8006e3c:	441f      	add	r7, r3
 8006e3e:	464b      	mov	r3, r9
 8006e40:	bfa8      	it	ge
 8006e42:	4643      	movge	r3, r8
 8006e44:	42bb      	cmp	r3, r7
 8006e46:	bfa8      	it	ge
 8006e48:	463b      	movge	r3, r7
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	bfc2      	ittt	gt
 8006e4e:	eba8 0803 	subgt.w	r8, r8, r3
 8006e52:	1aff      	subgt	r7, r7, r3
 8006e54:	eba9 0903 	subgt.w	r9, r9, r3
 8006e58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	dd17      	ble.n	8006e8e <_strtod_l+0x75e>
 8006e5e:	4631      	mov	r1, r6
 8006e60:	461a      	mov	r2, r3
 8006e62:	4620      	mov	r0, r4
 8006e64:	f001 ff0c 	bl	8008c80 <__pow5mult>
 8006e68:	4606      	mov	r6, r0
 8006e6a:	2800      	cmp	r0, #0
 8006e6c:	f43f aea8 	beq.w	8006bc0 <_strtod_l+0x490>
 8006e70:	4601      	mov	r1, r0
 8006e72:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006e74:	4620      	mov	r0, r4
 8006e76:	f001 fe59 	bl	8008b2c <__multiply>
 8006e7a:	900b      	str	r0, [sp, #44]	; 0x2c
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	f43f ae9f 	beq.w	8006bc0 <_strtod_l+0x490>
 8006e82:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006e84:	4620      	mov	r0, r4
 8006e86:	f001 fd39 	bl	80088fc <_Bfree>
 8006e8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e8c:	9318      	str	r3, [sp, #96]	; 0x60
 8006e8e:	f1b8 0f00 	cmp.w	r8, #0
 8006e92:	f300 808c 	bgt.w	8006fae <_strtod_l+0x87e>
 8006e96:	9b06      	ldr	r3, [sp, #24]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	dd08      	ble.n	8006eae <_strtod_l+0x77e>
 8006e9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006e9e:	9905      	ldr	r1, [sp, #20]
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	f001 feed 	bl	8008c80 <__pow5mult>
 8006ea6:	9005      	str	r0, [sp, #20]
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	f43f ae89 	beq.w	8006bc0 <_strtod_l+0x490>
 8006eae:	2f00      	cmp	r7, #0
 8006eb0:	dd08      	ble.n	8006ec4 <_strtod_l+0x794>
 8006eb2:	9905      	ldr	r1, [sp, #20]
 8006eb4:	463a      	mov	r2, r7
 8006eb6:	4620      	mov	r0, r4
 8006eb8:	f001 ff3c 	bl	8008d34 <__lshift>
 8006ebc:	9005      	str	r0, [sp, #20]
 8006ebe:	2800      	cmp	r0, #0
 8006ec0:	f43f ae7e 	beq.w	8006bc0 <_strtod_l+0x490>
 8006ec4:	f1b9 0f00 	cmp.w	r9, #0
 8006ec8:	dd08      	ble.n	8006edc <_strtod_l+0x7ac>
 8006eca:	4631      	mov	r1, r6
 8006ecc:	464a      	mov	r2, r9
 8006ece:	4620      	mov	r0, r4
 8006ed0:	f001 ff30 	bl	8008d34 <__lshift>
 8006ed4:	4606      	mov	r6, r0
 8006ed6:	2800      	cmp	r0, #0
 8006ed8:	f43f ae72 	beq.w	8006bc0 <_strtod_l+0x490>
 8006edc:	9a05      	ldr	r2, [sp, #20]
 8006ede:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006ee0:	4620      	mov	r0, r4
 8006ee2:	f001 ffb3 	bl	8008e4c <__mdiff>
 8006ee6:	4605      	mov	r5, r0
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	f43f ae69 	beq.w	8006bc0 <_strtod_l+0x490>
 8006eee:	68c3      	ldr	r3, [r0, #12]
 8006ef0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	60c3      	str	r3, [r0, #12]
 8006ef6:	4631      	mov	r1, r6
 8006ef8:	f001 ff8c 	bl	8008e14 <__mcmp>
 8006efc:	2800      	cmp	r0, #0
 8006efe:	da60      	bge.n	8006fc2 <_strtod_l+0x892>
 8006f00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f02:	ea53 030a 	orrs.w	r3, r3, sl
 8006f06:	f040 8082 	bne.w	800700e <_strtod_l+0x8de>
 8006f0a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d17d      	bne.n	800700e <_strtod_l+0x8de>
 8006f12:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006f16:	0d1b      	lsrs	r3, r3, #20
 8006f18:	051b      	lsls	r3, r3, #20
 8006f1a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006f1e:	d976      	bls.n	800700e <_strtod_l+0x8de>
 8006f20:	696b      	ldr	r3, [r5, #20]
 8006f22:	b913      	cbnz	r3, 8006f2a <_strtod_l+0x7fa>
 8006f24:	692b      	ldr	r3, [r5, #16]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	dd71      	ble.n	800700e <_strtod_l+0x8de>
 8006f2a:	4629      	mov	r1, r5
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	4620      	mov	r0, r4
 8006f30:	f001 ff00 	bl	8008d34 <__lshift>
 8006f34:	4631      	mov	r1, r6
 8006f36:	4605      	mov	r5, r0
 8006f38:	f001 ff6c 	bl	8008e14 <__mcmp>
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	dd66      	ble.n	800700e <_strtod_l+0x8de>
 8006f40:	9904      	ldr	r1, [sp, #16]
 8006f42:	4a53      	ldr	r2, [pc, #332]	; (8007090 <_strtod_l+0x960>)
 8006f44:	465b      	mov	r3, fp
 8006f46:	2900      	cmp	r1, #0
 8006f48:	f000 8081 	beq.w	800704e <_strtod_l+0x91e>
 8006f4c:	ea02 010b 	and.w	r1, r2, fp
 8006f50:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006f54:	dc7b      	bgt.n	800704e <_strtod_l+0x91e>
 8006f56:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006f5a:	f77f aea9 	ble.w	8006cb0 <_strtod_l+0x580>
 8006f5e:	4b4d      	ldr	r3, [pc, #308]	; (8007094 <_strtod_l+0x964>)
 8006f60:	4650      	mov	r0, sl
 8006f62:	4659      	mov	r1, fp
 8006f64:	2200      	movs	r2, #0
 8006f66:	f7f9 fb67 	bl	8000638 <__aeabi_dmul>
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	4303      	orrs	r3, r0
 8006f6e:	bf08      	it	eq
 8006f70:	2322      	moveq	r3, #34	; 0x22
 8006f72:	4682      	mov	sl, r0
 8006f74:	468b      	mov	fp, r1
 8006f76:	bf08      	it	eq
 8006f78:	6023      	streq	r3, [r4, #0]
 8006f7a:	e62b      	b.n	8006bd4 <_strtod_l+0x4a4>
 8006f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f80:	fa02 f303 	lsl.w	r3, r2, r3
 8006f84:	ea03 0a0a 	and.w	sl, r3, sl
 8006f88:	e6e3      	b.n	8006d52 <_strtod_l+0x622>
 8006f8a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006f8e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006f92:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006f96:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006f9a:	fa01 f308 	lsl.w	r3, r1, r8
 8006f9e:	9308      	str	r3, [sp, #32]
 8006fa0:	910d      	str	r1, [sp, #52]	; 0x34
 8006fa2:	e746      	b.n	8006e32 <_strtod_l+0x702>
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	9308      	str	r3, [sp, #32]
 8006fa8:	2301      	movs	r3, #1
 8006faa:	930d      	str	r3, [sp, #52]	; 0x34
 8006fac:	e741      	b.n	8006e32 <_strtod_l+0x702>
 8006fae:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006fb0:	4642      	mov	r2, r8
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	f001 febe 	bl	8008d34 <__lshift>
 8006fb8:	9018      	str	r0, [sp, #96]	; 0x60
 8006fba:	2800      	cmp	r0, #0
 8006fbc:	f47f af6b 	bne.w	8006e96 <_strtod_l+0x766>
 8006fc0:	e5fe      	b.n	8006bc0 <_strtod_l+0x490>
 8006fc2:	465f      	mov	r7, fp
 8006fc4:	d16e      	bne.n	80070a4 <_strtod_l+0x974>
 8006fc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006fc8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006fcc:	b342      	cbz	r2, 8007020 <_strtod_l+0x8f0>
 8006fce:	4a32      	ldr	r2, [pc, #200]	; (8007098 <_strtod_l+0x968>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d128      	bne.n	8007026 <_strtod_l+0x8f6>
 8006fd4:	9b04      	ldr	r3, [sp, #16]
 8006fd6:	4651      	mov	r1, sl
 8006fd8:	b1eb      	cbz	r3, 8007016 <_strtod_l+0x8e6>
 8006fda:	4b2d      	ldr	r3, [pc, #180]	; (8007090 <_strtod_l+0x960>)
 8006fdc:	403b      	ands	r3, r7
 8006fde:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8006fe6:	d819      	bhi.n	800701c <_strtod_l+0x8ec>
 8006fe8:	0d1b      	lsrs	r3, r3, #20
 8006fea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006fee:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff2:	4299      	cmp	r1, r3
 8006ff4:	d117      	bne.n	8007026 <_strtod_l+0x8f6>
 8006ff6:	4b29      	ldr	r3, [pc, #164]	; (800709c <_strtod_l+0x96c>)
 8006ff8:	429f      	cmp	r7, r3
 8006ffa:	d102      	bne.n	8007002 <_strtod_l+0x8d2>
 8006ffc:	3101      	adds	r1, #1
 8006ffe:	f43f addf 	beq.w	8006bc0 <_strtod_l+0x490>
 8007002:	4b23      	ldr	r3, [pc, #140]	; (8007090 <_strtod_l+0x960>)
 8007004:	403b      	ands	r3, r7
 8007006:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800700a:	f04f 0a00 	mov.w	sl, #0
 800700e:	9b04      	ldr	r3, [sp, #16]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d1a4      	bne.n	8006f5e <_strtod_l+0x82e>
 8007014:	e5de      	b.n	8006bd4 <_strtod_l+0x4a4>
 8007016:	f04f 33ff 	mov.w	r3, #4294967295
 800701a:	e7ea      	b.n	8006ff2 <_strtod_l+0x8c2>
 800701c:	4613      	mov	r3, r2
 800701e:	e7e8      	b.n	8006ff2 <_strtod_l+0x8c2>
 8007020:	ea53 030a 	orrs.w	r3, r3, sl
 8007024:	d08c      	beq.n	8006f40 <_strtod_l+0x810>
 8007026:	9b08      	ldr	r3, [sp, #32]
 8007028:	b1db      	cbz	r3, 8007062 <_strtod_l+0x932>
 800702a:	423b      	tst	r3, r7
 800702c:	d0ef      	beq.n	800700e <_strtod_l+0x8de>
 800702e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007030:	9a04      	ldr	r2, [sp, #16]
 8007032:	4650      	mov	r0, sl
 8007034:	4659      	mov	r1, fp
 8007036:	b1c3      	cbz	r3, 800706a <_strtod_l+0x93a>
 8007038:	f7ff fb5e 	bl	80066f8 <sulp>
 800703c:	4602      	mov	r2, r0
 800703e:	460b      	mov	r3, r1
 8007040:	ec51 0b18 	vmov	r0, r1, d8
 8007044:	f7f9 f942 	bl	80002cc <__adddf3>
 8007048:	4682      	mov	sl, r0
 800704a:	468b      	mov	fp, r1
 800704c:	e7df      	b.n	800700e <_strtod_l+0x8de>
 800704e:	4013      	ands	r3, r2
 8007050:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007054:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007058:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800705c:	f04f 3aff 	mov.w	sl, #4294967295
 8007060:	e7d5      	b.n	800700e <_strtod_l+0x8de>
 8007062:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007064:	ea13 0f0a 	tst.w	r3, sl
 8007068:	e7e0      	b.n	800702c <_strtod_l+0x8fc>
 800706a:	f7ff fb45 	bl	80066f8 <sulp>
 800706e:	4602      	mov	r2, r0
 8007070:	460b      	mov	r3, r1
 8007072:	ec51 0b18 	vmov	r0, r1, d8
 8007076:	f7f9 f927 	bl	80002c8 <__aeabi_dsub>
 800707a:	2200      	movs	r2, #0
 800707c:	2300      	movs	r3, #0
 800707e:	4682      	mov	sl, r0
 8007080:	468b      	mov	fp, r1
 8007082:	f7f9 fd41 	bl	8000b08 <__aeabi_dcmpeq>
 8007086:	2800      	cmp	r0, #0
 8007088:	d0c1      	beq.n	800700e <_strtod_l+0x8de>
 800708a:	e611      	b.n	8006cb0 <_strtod_l+0x580>
 800708c:	fffffc02 	.word	0xfffffc02
 8007090:	7ff00000 	.word	0x7ff00000
 8007094:	39500000 	.word	0x39500000
 8007098:	000fffff 	.word	0x000fffff
 800709c:	7fefffff 	.word	0x7fefffff
 80070a0:	0800a3a8 	.word	0x0800a3a8
 80070a4:	4631      	mov	r1, r6
 80070a6:	4628      	mov	r0, r5
 80070a8:	f002 f832 	bl	8009110 <__ratio>
 80070ac:	ec59 8b10 	vmov	r8, r9, d0
 80070b0:	ee10 0a10 	vmov	r0, s0
 80070b4:	2200      	movs	r2, #0
 80070b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80070ba:	4649      	mov	r1, r9
 80070bc:	f7f9 fd38 	bl	8000b30 <__aeabi_dcmple>
 80070c0:	2800      	cmp	r0, #0
 80070c2:	d07a      	beq.n	80071ba <_strtod_l+0xa8a>
 80070c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d04a      	beq.n	8007160 <_strtod_l+0xa30>
 80070ca:	4b95      	ldr	r3, [pc, #596]	; (8007320 <_strtod_l+0xbf0>)
 80070cc:	2200      	movs	r2, #0
 80070ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80070d2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007320 <_strtod_l+0xbf0>
 80070d6:	f04f 0800 	mov.w	r8, #0
 80070da:	4b92      	ldr	r3, [pc, #584]	; (8007324 <_strtod_l+0xbf4>)
 80070dc:	403b      	ands	r3, r7
 80070de:	930d      	str	r3, [sp, #52]	; 0x34
 80070e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80070e2:	4b91      	ldr	r3, [pc, #580]	; (8007328 <_strtod_l+0xbf8>)
 80070e4:	429a      	cmp	r2, r3
 80070e6:	f040 80b0 	bne.w	800724a <_strtod_l+0xb1a>
 80070ea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80070ee:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80070f2:	ec4b ab10 	vmov	d0, sl, fp
 80070f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80070fa:	f001 ff31 	bl	8008f60 <__ulp>
 80070fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007102:	ec53 2b10 	vmov	r2, r3, d0
 8007106:	f7f9 fa97 	bl	8000638 <__aeabi_dmul>
 800710a:	4652      	mov	r2, sl
 800710c:	465b      	mov	r3, fp
 800710e:	f7f9 f8dd 	bl	80002cc <__adddf3>
 8007112:	460b      	mov	r3, r1
 8007114:	4983      	ldr	r1, [pc, #524]	; (8007324 <_strtod_l+0xbf4>)
 8007116:	4a85      	ldr	r2, [pc, #532]	; (800732c <_strtod_l+0xbfc>)
 8007118:	4019      	ands	r1, r3
 800711a:	4291      	cmp	r1, r2
 800711c:	4682      	mov	sl, r0
 800711e:	d960      	bls.n	80071e2 <_strtod_l+0xab2>
 8007120:	ee18 3a90 	vmov	r3, s17
 8007124:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007128:	4293      	cmp	r3, r2
 800712a:	d104      	bne.n	8007136 <_strtod_l+0xa06>
 800712c:	ee18 3a10 	vmov	r3, s16
 8007130:	3301      	adds	r3, #1
 8007132:	f43f ad45 	beq.w	8006bc0 <_strtod_l+0x490>
 8007136:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007338 <_strtod_l+0xc08>
 800713a:	f04f 3aff 	mov.w	sl, #4294967295
 800713e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007140:	4620      	mov	r0, r4
 8007142:	f001 fbdb 	bl	80088fc <_Bfree>
 8007146:	9905      	ldr	r1, [sp, #20]
 8007148:	4620      	mov	r0, r4
 800714a:	f001 fbd7 	bl	80088fc <_Bfree>
 800714e:	4631      	mov	r1, r6
 8007150:	4620      	mov	r0, r4
 8007152:	f001 fbd3 	bl	80088fc <_Bfree>
 8007156:	4629      	mov	r1, r5
 8007158:	4620      	mov	r0, r4
 800715a:	f001 fbcf 	bl	80088fc <_Bfree>
 800715e:	e61a      	b.n	8006d96 <_strtod_l+0x666>
 8007160:	f1ba 0f00 	cmp.w	sl, #0
 8007164:	d11b      	bne.n	800719e <_strtod_l+0xa6e>
 8007166:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800716a:	b9f3      	cbnz	r3, 80071aa <_strtod_l+0xa7a>
 800716c:	4b6c      	ldr	r3, [pc, #432]	; (8007320 <_strtod_l+0xbf0>)
 800716e:	2200      	movs	r2, #0
 8007170:	4640      	mov	r0, r8
 8007172:	4649      	mov	r1, r9
 8007174:	f7f9 fcd2 	bl	8000b1c <__aeabi_dcmplt>
 8007178:	b9d0      	cbnz	r0, 80071b0 <_strtod_l+0xa80>
 800717a:	4640      	mov	r0, r8
 800717c:	4649      	mov	r1, r9
 800717e:	4b6c      	ldr	r3, [pc, #432]	; (8007330 <_strtod_l+0xc00>)
 8007180:	2200      	movs	r2, #0
 8007182:	f7f9 fa59 	bl	8000638 <__aeabi_dmul>
 8007186:	4680      	mov	r8, r0
 8007188:	4689      	mov	r9, r1
 800718a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800718e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007192:	9315      	str	r3, [sp, #84]	; 0x54
 8007194:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007198:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800719c:	e79d      	b.n	80070da <_strtod_l+0x9aa>
 800719e:	f1ba 0f01 	cmp.w	sl, #1
 80071a2:	d102      	bne.n	80071aa <_strtod_l+0xa7a>
 80071a4:	2f00      	cmp	r7, #0
 80071a6:	f43f ad83 	beq.w	8006cb0 <_strtod_l+0x580>
 80071aa:	4b62      	ldr	r3, [pc, #392]	; (8007334 <_strtod_l+0xc04>)
 80071ac:	2200      	movs	r2, #0
 80071ae:	e78e      	b.n	80070ce <_strtod_l+0x99e>
 80071b0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007330 <_strtod_l+0xc00>
 80071b4:	f04f 0800 	mov.w	r8, #0
 80071b8:	e7e7      	b.n	800718a <_strtod_l+0xa5a>
 80071ba:	4b5d      	ldr	r3, [pc, #372]	; (8007330 <_strtod_l+0xc00>)
 80071bc:	4640      	mov	r0, r8
 80071be:	4649      	mov	r1, r9
 80071c0:	2200      	movs	r2, #0
 80071c2:	f7f9 fa39 	bl	8000638 <__aeabi_dmul>
 80071c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071c8:	4680      	mov	r8, r0
 80071ca:	4689      	mov	r9, r1
 80071cc:	b933      	cbnz	r3, 80071dc <_strtod_l+0xaac>
 80071ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80071d2:	900e      	str	r0, [sp, #56]	; 0x38
 80071d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80071d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80071da:	e7dd      	b.n	8007198 <_strtod_l+0xa68>
 80071dc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80071e0:	e7f9      	b.n	80071d6 <_strtod_l+0xaa6>
 80071e2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80071e6:	9b04      	ldr	r3, [sp, #16]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d1a8      	bne.n	800713e <_strtod_l+0xa0e>
 80071ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80071f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80071f2:	0d1b      	lsrs	r3, r3, #20
 80071f4:	051b      	lsls	r3, r3, #20
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d1a1      	bne.n	800713e <_strtod_l+0xa0e>
 80071fa:	4640      	mov	r0, r8
 80071fc:	4649      	mov	r1, r9
 80071fe:	f7f9 fdcb 	bl	8000d98 <__aeabi_d2lz>
 8007202:	f7f9 f9eb 	bl	80005dc <__aeabi_l2d>
 8007206:	4602      	mov	r2, r0
 8007208:	460b      	mov	r3, r1
 800720a:	4640      	mov	r0, r8
 800720c:	4649      	mov	r1, r9
 800720e:	f7f9 f85b 	bl	80002c8 <__aeabi_dsub>
 8007212:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007214:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007218:	ea43 030a 	orr.w	r3, r3, sl
 800721c:	4313      	orrs	r3, r2
 800721e:	4680      	mov	r8, r0
 8007220:	4689      	mov	r9, r1
 8007222:	d055      	beq.n	80072d0 <_strtod_l+0xba0>
 8007224:	a336      	add	r3, pc, #216	; (adr r3, 8007300 <_strtod_l+0xbd0>)
 8007226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722a:	f7f9 fc77 	bl	8000b1c <__aeabi_dcmplt>
 800722e:	2800      	cmp	r0, #0
 8007230:	f47f acd0 	bne.w	8006bd4 <_strtod_l+0x4a4>
 8007234:	a334      	add	r3, pc, #208	; (adr r3, 8007308 <_strtod_l+0xbd8>)
 8007236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723a:	4640      	mov	r0, r8
 800723c:	4649      	mov	r1, r9
 800723e:	f7f9 fc8b 	bl	8000b58 <__aeabi_dcmpgt>
 8007242:	2800      	cmp	r0, #0
 8007244:	f43f af7b 	beq.w	800713e <_strtod_l+0xa0e>
 8007248:	e4c4      	b.n	8006bd4 <_strtod_l+0x4a4>
 800724a:	9b04      	ldr	r3, [sp, #16]
 800724c:	b333      	cbz	r3, 800729c <_strtod_l+0xb6c>
 800724e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007250:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007254:	d822      	bhi.n	800729c <_strtod_l+0xb6c>
 8007256:	a32e      	add	r3, pc, #184	; (adr r3, 8007310 <_strtod_l+0xbe0>)
 8007258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725c:	4640      	mov	r0, r8
 800725e:	4649      	mov	r1, r9
 8007260:	f7f9 fc66 	bl	8000b30 <__aeabi_dcmple>
 8007264:	b1a0      	cbz	r0, 8007290 <_strtod_l+0xb60>
 8007266:	4649      	mov	r1, r9
 8007268:	4640      	mov	r0, r8
 800726a:	f7f9 fcbd 	bl	8000be8 <__aeabi_d2uiz>
 800726e:	2801      	cmp	r0, #1
 8007270:	bf38      	it	cc
 8007272:	2001      	movcc	r0, #1
 8007274:	f7f9 f966 	bl	8000544 <__aeabi_ui2d>
 8007278:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800727a:	4680      	mov	r8, r0
 800727c:	4689      	mov	r9, r1
 800727e:	bb23      	cbnz	r3, 80072ca <_strtod_l+0xb9a>
 8007280:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007284:	9010      	str	r0, [sp, #64]	; 0x40
 8007286:	9311      	str	r3, [sp, #68]	; 0x44
 8007288:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800728c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007292:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007294:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007298:	1a9b      	subs	r3, r3, r2
 800729a:	9309      	str	r3, [sp, #36]	; 0x24
 800729c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80072a0:	eeb0 0a48 	vmov.f32	s0, s16
 80072a4:	eef0 0a68 	vmov.f32	s1, s17
 80072a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80072ac:	f001 fe58 	bl	8008f60 <__ulp>
 80072b0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80072b4:	ec53 2b10 	vmov	r2, r3, d0
 80072b8:	f7f9 f9be 	bl	8000638 <__aeabi_dmul>
 80072bc:	ec53 2b18 	vmov	r2, r3, d8
 80072c0:	f7f9 f804 	bl	80002cc <__adddf3>
 80072c4:	4682      	mov	sl, r0
 80072c6:	468b      	mov	fp, r1
 80072c8:	e78d      	b.n	80071e6 <_strtod_l+0xab6>
 80072ca:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80072ce:	e7db      	b.n	8007288 <_strtod_l+0xb58>
 80072d0:	a311      	add	r3, pc, #68	; (adr r3, 8007318 <_strtod_l+0xbe8>)
 80072d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d6:	f7f9 fc21 	bl	8000b1c <__aeabi_dcmplt>
 80072da:	e7b2      	b.n	8007242 <_strtod_l+0xb12>
 80072dc:	2300      	movs	r3, #0
 80072de:	930a      	str	r3, [sp, #40]	; 0x28
 80072e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80072e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072e4:	6013      	str	r3, [r2, #0]
 80072e6:	f7ff ba6b 	b.w	80067c0 <_strtod_l+0x90>
 80072ea:	2a65      	cmp	r2, #101	; 0x65
 80072ec:	f43f ab5f 	beq.w	80069ae <_strtod_l+0x27e>
 80072f0:	2a45      	cmp	r2, #69	; 0x45
 80072f2:	f43f ab5c 	beq.w	80069ae <_strtod_l+0x27e>
 80072f6:	2301      	movs	r3, #1
 80072f8:	f7ff bb94 	b.w	8006a24 <_strtod_l+0x2f4>
 80072fc:	f3af 8000 	nop.w
 8007300:	94a03595 	.word	0x94a03595
 8007304:	3fdfffff 	.word	0x3fdfffff
 8007308:	35afe535 	.word	0x35afe535
 800730c:	3fe00000 	.word	0x3fe00000
 8007310:	ffc00000 	.word	0xffc00000
 8007314:	41dfffff 	.word	0x41dfffff
 8007318:	94a03595 	.word	0x94a03595
 800731c:	3fcfffff 	.word	0x3fcfffff
 8007320:	3ff00000 	.word	0x3ff00000
 8007324:	7ff00000 	.word	0x7ff00000
 8007328:	7fe00000 	.word	0x7fe00000
 800732c:	7c9fffff 	.word	0x7c9fffff
 8007330:	3fe00000 	.word	0x3fe00000
 8007334:	bff00000 	.word	0xbff00000
 8007338:	7fefffff 	.word	0x7fefffff

0800733c <_strtod_r>:
 800733c:	4b01      	ldr	r3, [pc, #4]	; (8007344 <_strtod_r+0x8>)
 800733e:	f7ff b9f7 	b.w	8006730 <_strtod_l>
 8007342:	bf00      	nop
 8007344:	20000080 	.word	0x20000080

08007348 <_strtol_l.constprop.0>:
 8007348:	2b01      	cmp	r3, #1
 800734a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800734e:	d001      	beq.n	8007354 <_strtol_l.constprop.0+0xc>
 8007350:	2b24      	cmp	r3, #36	; 0x24
 8007352:	d906      	bls.n	8007362 <_strtol_l.constprop.0+0x1a>
 8007354:	f7fe fafe 	bl	8005954 <__errno>
 8007358:	2316      	movs	r3, #22
 800735a:	6003      	str	r3, [r0, #0]
 800735c:	2000      	movs	r0, #0
 800735e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007362:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007448 <_strtol_l.constprop.0+0x100>
 8007366:	460d      	mov	r5, r1
 8007368:	462e      	mov	r6, r5
 800736a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800736e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007372:	f017 0708 	ands.w	r7, r7, #8
 8007376:	d1f7      	bne.n	8007368 <_strtol_l.constprop.0+0x20>
 8007378:	2c2d      	cmp	r4, #45	; 0x2d
 800737a:	d132      	bne.n	80073e2 <_strtol_l.constprop.0+0x9a>
 800737c:	782c      	ldrb	r4, [r5, #0]
 800737e:	2701      	movs	r7, #1
 8007380:	1cb5      	adds	r5, r6, #2
 8007382:	2b00      	cmp	r3, #0
 8007384:	d05b      	beq.n	800743e <_strtol_l.constprop.0+0xf6>
 8007386:	2b10      	cmp	r3, #16
 8007388:	d109      	bne.n	800739e <_strtol_l.constprop.0+0x56>
 800738a:	2c30      	cmp	r4, #48	; 0x30
 800738c:	d107      	bne.n	800739e <_strtol_l.constprop.0+0x56>
 800738e:	782c      	ldrb	r4, [r5, #0]
 8007390:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007394:	2c58      	cmp	r4, #88	; 0x58
 8007396:	d14d      	bne.n	8007434 <_strtol_l.constprop.0+0xec>
 8007398:	786c      	ldrb	r4, [r5, #1]
 800739a:	2310      	movs	r3, #16
 800739c:	3502      	adds	r5, #2
 800739e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80073a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80073a6:	f04f 0c00 	mov.w	ip, #0
 80073aa:	fbb8 f9f3 	udiv	r9, r8, r3
 80073ae:	4666      	mov	r6, ip
 80073b0:	fb03 8a19 	mls	sl, r3, r9, r8
 80073b4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80073b8:	f1be 0f09 	cmp.w	lr, #9
 80073bc:	d816      	bhi.n	80073ec <_strtol_l.constprop.0+0xa4>
 80073be:	4674      	mov	r4, lr
 80073c0:	42a3      	cmp	r3, r4
 80073c2:	dd24      	ble.n	800740e <_strtol_l.constprop.0+0xc6>
 80073c4:	f1bc 0f00 	cmp.w	ip, #0
 80073c8:	db1e      	blt.n	8007408 <_strtol_l.constprop.0+0xc0>
 80073ca:	45b1      	cmp	r9, r6
 80073cc:	d31c      	bcc.n	8007408 <_strtol_l.constprop.0+0xc0>
 80073ce:	d101      	bne.n	80073d4 <_strtol_l.constprop.0+0x8c>
 80073d0:	45a2      	cmp	sl, r4
 80073d2:	db19      	blt.n	8007408 <_strtol_l.constprop.0+0xc0>
 80073d4:	fb06 4603 	mla	r6, r6, r3, r4
 80073d8:	f04f 0c01 	mov.w	ip, #1
 80073dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80073e0:	e7e8      	b.n	80073b4 <_strtol_l.constprop.0+0x6c>
 80073e2:	2c2b      	cmp	r4, #43	; 0x2b
 80073e4:	bf04      	itt	eq
 80073e6:	782c      	ldrbeq	r4, [r5, #0]
 80073e8:	1cb5      	addeq	r5, r6, #2
 80073ea:	e7ca      	b.n	8007382 <_strtol_l.constprop.0+0x3a>
 80073ec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80073f0:	f1be 0f19 	cmp.w	lr, #25
 80073f4:	d801      	bhi.n	80073fa <_strtol_l.constprop.0+0xb2>
 80073f6:	3c37      	subs	r4, #55	; 0x37
 80073f8:	e7e2      	b.n	80073c0 <_strtol_l.constprop.0+0x78>
 80073fa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80073fe:	f1be 0f19 	cmp.w	lr, #25
 8007402:	d804      	bhi.n	800740e <_strtol_l.constprop.0+0xc6>
 8007404:	3c57      	subs	r4, #87	; 0x57
 8007406:	e7db      	b.n	80073c0 <_strtol_l.constprop.0+0x78>
 8007408:	f04f 3cff 	mov.w	ip, #4294967295
 800740c:	e7e6      	b.n	80073dc <_strtol_l.constprop.0+0x94>
 800740e:	f1bc 0f00 	cmp.w	ip, #0
 8007412:	da05      	bge.n	8007420 <_strtol_l.constprop.0+0xd8>
 8007414:	2322      	movs	r3, #34	; 0x22
 8007416:	6003      	str	r3, [r0, #0]
 8007418:	4646      	mov	r6, r8
 800741a:	b942      	cbnz	r2, 800742e <_strtol_l.constprop.0+0xe6>
 800741c:	4630      	mov	r0, r6
 800741e:	e79e      	b.n	800735e <_strtol_l.constprop.0+0x16>
 8007420:	b107      	cbz	r7, 8007424 <_strtol_l.constprop.0+0xdc>
 8007422:	4276      	negs	r6, r6
 8007424:	2a00      	cmp	r2, #0
 8007426:	d0f9      	beq.n	800741c <_strtol_l.constprop.0+0xd4>
 8007428:	f1bc 0f00 	cmp.w	ip, #0
 800742c:	d000      	beq.n	8007430 <_strtol_l.constprop.0+0xe8>
 800742e:	1e69      	subs	r1, r5, #1
 8007430:	6011      	str	r1, [r2, #0]
 8007432:	e7f3      	b.n	800741c <_strtol_l.constprop.0+0xd4>
 8007434:	2430      	movs	r4, #48	; 0x30
 8007436:	2b00      	cmp	r3, #0
 8007438:	d1b1      	bne.n	800739e <_strtol_l.constprop.0+0x56>
 800743a:	2308      	movs	r3, #8
 800743c:	e7af      	b.n	800739e <_strtol_l.constprop.0+0x56>
 800743e:	2c30      	cmp	r4, #48	; 0x30
 8007440:	d0a5      	beq.n	800738e <_strtol_l.constprop.0+0x46>
 8007442:	230a      	movs	r3, #10
 8007444:	e7ab      	b.n	800739e <_strtol_l.constprop.0+0x56>
 8007446:	bf00      	nop
 8007448:	0800a3d1 	.word	0x0800a3d1

0800744c <_strtol_r>:
 800744c:	f7ff bf7c 	b.w	8007348 <_strtol_l.constprop.0>

08007450 <quorem>:
 8007450:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007454:	6903      	ldr	r3, [r0, #16]
 8007456:	690c      	ldr	r4, [r1, #16]
 8007458:	42a3      	cmp	r3, r4
 800745a:	4607      	mov	r7, r0
 800745c:	f2c0 8081 	blt.w	8007562 <quorem+0x112>
 8007460:	3c01      	subs	r4, #1
 8007462:	f101 0814 	add.w	r8, r1, #20
 8007466:	f100 0514 	add.w	r5, r0, #20
 800746a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800746e:	9301      	str	r3, [sp, #4]
 8007470:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007474:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007478:	3301      	adds	r3, #1
 800747a:	429a      	cmp	r2, r3
 800747c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007480:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007484:	fbb2 f6f3 	udiv	r6, r2, r3
 8007488:	d331      	bcc.n	80074ee <quorem+0x9e>
 800748a:	f04f 0e00 	mov.w	lr, #0
 800748e:	4640      	mov	r0, r8
 8007490:	46ac      	mov	ip, r5
 8007492:	46f2      	mov	sl, lr
 8007494:	f850 2b04 	ldr.w	r2, [r0], #4
 8007498:	b293      	uxth	r3, r2
 800749a:	fb06 e303 	mla	r3, r6, r3, lr
 800749e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	ebaa 0303 	sub.w	r3, sl, r3
 80074a8:	f8dc a000 	ldr.w	sl, [ip]
 80074ac:	0c12      	lsrs	r2, r2, #16
 80074ae:	fa13 f38a 	uxtah	r3, r3, sl
 80074b2:	fb06 e202 	mla	r2, r6, r2, lr
 80074b6:	9300      	str	r3, [sp, #0]
 80074b8:	9b00      	ldr	r3, [sp, #0]
 80074ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80074be:	b292      	uxth	r2, r2
 80074c0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80074c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80074c8:	f8bd 3000 	ldrh.w	r3, [sp]
 80074cc:	4581      	cmp	r9, r0
 80074ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074d2:	f84c 3b04 	str.w	r3, [ip], #4
 80074d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80074da:	d2db      	bcs.n	8007494 <quorem+0x44>
 80074dc:	f855 300b 	ldr.w	r3, [r5, fp]
 80074e0:	b92b      	cbnz	r3, 80074ee <quorem+0x9e>
 80074e2:	9b01      	ldr	r3, [sp, #4]
 80074e4:	3b04      	subs	r3, #4
 80074e6:	429d      	cmp	r5, r3
 80074e8:	461a      	mov	r2, r3
 80074ea:	d32e      	bcc.n	800754a <quorem+0xfa>
 80074ec:	613c      	str	r4, [r7, #16]
 80074ee:	4638      	mov	r0, r7
 80074f0:	f001 fc90 	bl	8008e14 <__mcmp>
 80074f4:	2800      	cmp	r0, #0
 80074f6:	db24      	blt.n	8007542 <quorem+0xf2>
 80074f8:	3601      	adds	r6, #1
 80074fa:	4628      	mov	r0, r5
 80074fc:	f04f 0c00 	mov.w	ip, #0
 8007500:	f858 2b04 	ldr.w	r2, [r8], #4
 8007504:	f8d0 e000 	ldr.w	lr, [r0]
 8007508:	b293      	uxth	r3, r2
 800750a:	ebac 0303 	sub.w	r3, ip, r3
 800750e:	0c12      	lsrs	r2, r2, #16
 8007510:	fa13 f38e 	uxtah	r3, r3, lr
 8007514:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007518:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800751c:	b29b      	uxth	r3, r3
 800751e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007522:	45c1      	cmp	r9, r8
 8007524:	f840 3b04 	str.w	r3, [r0], #4
 8007528:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800752c:	d2e8      	bcs.n	8007500 <quorem+0xb0>
 800752e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007532:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007536:	b922      	cbnz	r2, 8007542 <quorem+0xf2>
 8007538:	3b04      	subs	r3, #4
 800753a:	429d      	cmp	r5, r3
 800753c:	461a      	mov	r2, r3
 800753e:	d30a      	bcc.n	8007556 <quorem+0x106>
 8007540:	613c      	str	r4, [r7, #16]
 8007542:	4630      	mov	r0, r6
 8007544:	b003      	add	sp, #12
 8007546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800754a:	6812      	ldr	r2, [r2, #0]
 800754c:	3b04      	subs	r3, #4
 800754e:	2a00      	cmp	r2, #0
 8007550:	d1cc      	bne.n	80074ec <quorem+0x9c>
 8007552:	3c01      	subs	r4, #1
 8007554:	e7c7      	b.n	80074e6 <quorem+0x96>
 8007556:	6812      	ldr	r2, [r2, #0]
 8007558:	3b04      	subs	r3, #4
 800755a:	2a00      	cmp	r2, #0
 800755c:	d1f0      	bne.n	8007540 <quorem+0xf0>
 800755e:	3c01      	subs	r4, #1
 8007560:	e7eb      	b.n	800753a <quorem+0xea>
 8007562:	2000      	movs	r0, #0
 8007564:	e7ee      	b.n	8007544 <quorem+0xf4>
	...

08007568 <_dtoa_r>:
 8007568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800756c:	ed2d 8b04 	vpush	{d8-d9}
 8007570:	ec57 6b10 	vmov	r6, r7, d0
 8007574:	b093      	sub	sp, #76	; 0x4c
 8007576:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007578:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800757c:	9106      	str	r1, [sp, #24]
 800757e:	ee10 aa10 	vmov	sl, s0
 8007582:	4604      	mov	r4, r0
 8007584:	9209      	str	r2, [sp, #36]	; 0x24
 8007586:	930c      	str	r3, [sp, #48]	; 0x30
 8007588:	46bb      	mov	fp, r7
 800758a:	b975      	cbnz	r5, 80075aa <_dtoa_r+0x42>
 800758c:	2010      	movs	r0, #16
 800758e:	f001 f94d 	bl	800882c <malloc>
 8007592:	4602      	mov	r2, r0
 8007594:	6260      	str	r0, [r4, #36]	; 0x24
 8007596:	b920      	cbnz	r0, 80075a2 <_dtoa_r+0x3a>
 8007598:	4ba7      	ldr	r3, [pc, #668]	; (8007838 <_dtoa_r+0x2d0>)
 800759a:	21ea      	movs	r1, #234	; 0xea
 800759c:	48a7      	ldr	r0, [pc, #668]	; (800783c <_dtoa_r+0x2d4>)
 800759e:	f002 f8bd 	bl	800971c <__assert_func>
 80075a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80075a6:	6005      	str	r5, [r0, #0]
 80075a8:	60c5      	str	r5, [r0, #12]
 80075aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075ac:	6819      	ldr	r1, [r3, #0]
 80075ae:	b151      	cbz	r1, 80075c6 <_dtoa_r+0x5e>
 80075b0:	685a      	ldr	r2, [r3, #4]
 80075b2:	604a      	str	r2, [r1, #4]
 80075b4:	2301      	movs	r3, #1
 80075b6:	4093      	lsls	r3, r2
 80075b8:	608b      	str	r3, [r1, #8]
 80075ba:	4620      	mov	r0, r4
 80075bc:	f001 f99e 	bl	80088fc <_Bfree>
 80075c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075c2:	2200      	movs	r2, #0
 80075c4:	601a      	str	r2, [r3, #0]
 80075c6:	1e3b      	subs	r3, r7, #0
 80075c8:	bfaa      	itet	ge
 80075ca:	2300      	movge	r3, #0
 80075cc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80075d0:	f8c8 3000 	strge.w	r3, [r8]
 80075d4:	4b9a      	ldr	r3, [pc, #616]	; (8007840 <_dtoa_r+0x2d8>)
 80075d6:	bfbc      	itt	lt
 80075d8:	2201      	movlt	r2, #1
 80075da:	f8c8 2000 	strlt.w	r2, [r8]
 80075de:	ea33 030b 	bics.w	r3, r3, fp
 80075e2:	d11b      	bne.n	800761c <_dtoa_r+0xb4>
 80075e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075e6:	f242 730f 	movw	r3, #9999	; 0x270f
 80075ea:	6013      	str	r3, [r2, #0]
 80075ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80075f0:	4333      	orrs	r3, r6
 80075f2:	f000 8592 	beq.w	800811a <_dtoa_r+0xbb2>
 80075f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075f8:	b963      	cbnz	r3, 8007614 <_dtoa_r+0xac>
 80075fa:	4b92      	ldr	r3, [pc, #584]	; (8007844 <_dtoa_r+0x2dc>)
 80075fc:	e022      	b.n	8007644 <_dtoa_r+0xdc>
 80075fe:	4b92      	ldr	r3, [pc, #584]	; (8007848 <_dtoa_r+0x2e0>)
 8007600:	9301      	str	r3, [sp, #4]
 8007602:	3308      	adds	r3, #8
 8007604:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007606:	6013      	str	r3, [r2, #0]
 8007608:	9801      	ldr	r0, [sp, #4]
 800760a:	b013      	add	sp, #76	; 0x4c
 800760c:	ecbd 8b04 	vpop	{d8-d9}
 8007610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007614:	4b8b      	ldr	r3, [pc, #556]	; (8007844 <_dtoa_r+0x2dc>)
 8007616:	9301      	str	r3, [sp, #4]
 8007618:	3303      	adds	r3, #3
 800761a:	e7f3      	b.n	8007604 <_dtoa_r+0x9c>
 800761c:	2200      	movs	r2, #0
 800761e:	2300      	movs	r3, #0
 8007620:	4650      	mov	r0, sl
 8007622:	4659      	mov	r1, fp
 8007624:	f7f9 fa70 	bl	8000b08 <__aeabi_dcmpeq>
 8007628:	ec4b ab19 	vmov	d9, sl, fp
 800762c:	4680      	mov	r8, r0
 800762e:	b158      	cbz	r0, 8007648 <_dtoa_r+0xe0>
 8007630:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007632:	2301      	movs	r3, #1
 8007634:	6013      	str	r3, [r2, #0]
 8007636:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007638:	2b00      	cmp	r3, #0
 800763a:	f000 856b 	beq.w	8008114 <_dtoa_r+0xbac>
 800763e:	4883      	ldr	r0, [pc, #524]	; (800784c <_dtoa_r+0x2e4>)
 8007640:	6018      	str	r0, [r3, #0]
 8007642:	1e43      	subs	r3, r0, #1
 8007644:	9301      	str	r3, [sp, #4]
 8007646:	e7df      	b.n	8007608 <_dtoa_r+0xa0>
 8007648:	ec4b ab10 	vmov	d0, sl, fp
 800764c:	aa10      	add	r2, sp, #64	; 0x40
 800764e:	a911      	add	r1, sp, #68	; 0x44
 8007650:	4620      	mov	r0, r4
 8007652:	f001 fd01 	bl	8009058 <__d2b>
 8007656:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800765a:	ee08 0a10 	vmov	s16, r0
 800765e:	2d00      	cmp	r5, #0
 8007660:	f000 8084 	beq.w	800776c <_dtoa_r+0x204>
 8007664:	ee19 3a90 	vmov	r3, s19
 8007668:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800766c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007670:	4656      	mov	r6, sl
 8007672:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007676:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800767a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800767e:	4b74      	ldr	r3, [pc, #464]	; (8007850 <_dtoa_r+0x2e8>)
 8007680:	2200      	movs	r2, #0
 8007682:	4630      	mov	r0, r6
 8007684:	4639      	mov	r1, r7
 8007686:	f7f8 fe1f 	bl	80002c8 <__aeabi_dsub>
 800768a:	a365      	add	r3, pc, #404	; (adr r3, 8007820 <_dtoa_r+0x2b8>)
 800768c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007690:	f7f8 ffd2 	bl	8000638 <__aeabi_dmul>
 8007694:	a364      	add	r3, pc, #400	; (adr r3, 8007828 <_dtoa_r+0x2c0>)
 8007696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769a:	f7f8 fe17 	bl	80002cc <__adddf3>
 800769e:	4606      	mov	r6, r0
 80076a0:	4628      	mov	r0, r5
 80076a2:	460f      	mov	r7, r1
 80076a4:	f7f8 ff5e 	bl	8000564 <__aeabi_i2d>
 80076a8:	a361      	add	r3, pc, #388	; (adr r3, 8007830 <_dtoa_r+0x2c8>)
 80076aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ae:	f7f8 ffc3 	bl	8000638 <__aeabi_dmul>
 80076b2:	4602      	mov	r2, r0
 80076b4:	460b      	mov	r3, r1
 80076b6:	4630      	mov	r0, r6
 80076b8:	4639      	mov	r1, r7
 80076ba:	f7f8 fe07 	bl	80002cc <__adddf3>
 80076be:	4606      	mov	r6, r0
 80076c0:	460f      	mov	r7, r1
 80076c2:	f7f9 fa69 	bl	8000b98 <__aeabi_d2iz>
 80076c6:	2200      	movs	r2, #0
 80076c8:	9000      	str	r0, [sp, #0]
 80076ca:	2300      	movs	r3, #0
 80076cc:	4630      	mov	r0, r6
 80076ce:	4639      	mov	r1, r7
 80076d0:	f7f9 fa24 	bl	8000b1c <__aeabi_dcmplt>
 80076d4:	b150      	cbz	r0, 80076ec <_dtoa_r+0x184>
 80076d6:	9800      	ldr	r0, [sp, #0]
 80076d8:	f7f8 ff44 	bl	8000564 <__aeabi_i2d>
 80076dc:	4632      	mov	r2, r6
 80076de:	463b      	mov	r3, r7
 80076e0:	f7f9 fa12 	bl	8000b08 <__aeabi_dcmpeq>
 80076e4:	b910      	cbnz	r0, 80076ec <_dtoa_r+0x184>
 80076e6:	9b00      	ldr	r3, [sp, #0]
 80076e8:	3b01      	subs	r3, #1
 80076ea:	9300      	str	r3, [sp, #0]
 80076ec:	9b00      	ldr	r3, [sp, #0]
 80076ee:	2b16      	cmp	r3, #22
 80076f0:	d85a      	bhi.n	80077a8 <_dtoa_r+0x240>
 80076f2:	9a00      	ldr	r2, [sp, #0]
 80076f4:	4b57      	ldr	r3, [pc, #348]	; (8007854 <_dtoa_r+0x2ec>)
 80076f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fe:	ec51 0b19 	vmov	r0, r1, d9
 8007702:	f7f9 fa0b 	bl	8000b1c <__aeabi_dcmplt>
 8007706:	2800      	cmp	r0, #0
 8007708:	d050      	beq.n	80077ac <_dtoa_r+0x244>
 800770a:	9b00      	ldr	r3, [sp, #0]
 800770c:	3b01      	subs	r3, #1
 800770e:	9300      	str	r3, [sp, #0]
 8007710:	2300      	movs	r3, #0
 8007712:	930b      	str	r3, [sp, #44]	; 0x2c
 8007714:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007716:	1b5d      	subs	r5, r3, r5
 8007718:	1e6b      	subs	r3, r5, #1
 800771a:	9305      	str	r3, [sp, #20]
 800771c:	bf45      	ittet	mi
 800771e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007722:	9304      	strmi	r3, [sp, #16]
 8007724:	2300      	movpl	r3, #0
 8007726:	2300      	movmi	r3, #0
 8007728:	bf4c      	ite	mi
 800772a:	9305      	strmi	r3, [sp, #20]
 800772c:	9304      	strpl	r3, [sp, #16]
 800772e:	9b00      	ldr	r3, [sp, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	db3d      	blt.n	80077b0 <_dtoa_r+0x248>
 8007734:	9b05      	ldr	r3, [sp, #20]
 8007736:	9a00      	ldr	r2, [sp, #0]
 8007738:	920a      	str	r2, [sp, #40]	; 0x28
 800773a:	4413      	add	r3, r2
 800773c:	9305      	str	r3, [sp, #20]
 800773e:	2300      	movs	r3, #0
 8007740:	9307      	str	r3, [sp, #28]
 8007742:	9b06      	ldr	r3, [sp, #24]
 8007744:	2b09      	cmp	r3, #9
 8007746:	f200 8089 	bhi.w	800785c <_dtoa_r+0x2f4>
 800774a:	2b05      	cmp	r3, #5
 800774c:	bfc4      	itt	gt
 800774e:	3b04      	subgt	r3, #4
 8007750:	9306      	strgt	r3, [sp, #24]
 8007752:	9b06      	ldr	r3, [sp, #24]
 8007754:	f1a3 0302 	sub.w	r3, r3, #2
 8007758:	bfcc      	ite	gt
 800775a:	2500      	movgt	r5, #0
 800775c:	2501      	movle	r5, #1
 800775e:	2b03      	cmp	r3, #3
 8007760:	f200 8087 	bhi.w	8007872 <_dtoa_r+0x30a>
 8007764:	e8df f003 	tbb	[pc, r3]
 8007768:	59383a2d 	.word	0x59383a2d
 800776c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007770:	441d      	add	r5, r3
 8007772:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007776:	2b20      	cmp	r3, #32
 8007778:	bfc1      	itttt	gt
 800777a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800777e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007782:	fa0b f303 	lslgt.w	r3, fp, r3
 8007786:	fa26 f000 	lsrgt.w	r0, r6, r0
 800778a:	bfda      	itte	le
 800778c:	f1c3 0320 	rsble	r3, r3, #32
 8007790:	fa06 f003 	lslle.w	r0, r6, r3
 8007794:	4318      	orrgt	r0, r3
 8007796:	f7f8 fed5 	bl	8000544 <__aeabi_ui2d>
 800779a:	2301      	movs	r3, #1
 800779c:	4606      	mov	r6, r0
 800779e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80077a2:	3d01      	subs	r5, #1
 80077a4:	930e      	str	r3, [sp, #56]	; 0x38
 80077a6:	e76a      	b.n	800767e <_dtoa_r+0x116>
 80077a8:	2301      	movs	r3, #1
 80077aa:	e7b2      	b.n	8007712 <_dtoa_r+0x1aa>
 80077ac:	900b      	str	r0, [sp, #44]	; 0x2c
 80077ae:	e7b1      	b.n	8007714 <_dtoa_r+0x1ac>
 80077b0:	9b04      	ldr	r3, [sp, #16]
 80077b2:	9a00      	ldr	r2, [sp, #0]
 80077b4:	1a9b      	subs	r3, r3, r2
 80077b6:	9304      	str	r3, [sp, #16]
 80077b8:	4253      	negs	r3, r2
 80077ba:	9307      	str	r3, [sp, #28]
 80077bc:	2300      	movs	r3, #0
 80077be:	930a      	str	r3, [sp, #40]	; 0x28
 80077c0:	e7bf      	b.n	8007742 <_dtoa_r+0x1da>
 80077c2:	2300      	movs	r3, #0
 80077c4:	9308      	str	r3, [sp, #32]
 80077c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	dc55      	bgt.n	8007878 <_dtoa_r+0x310>
 80077cc:	2301      	movs	r3, #1
 80077ce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80077d2:	461a      	mov	r2, r3
 80077d4:	9209      	str	r2, [sp, #36]	; 0x24
 80077d6:	e00c      	b.n	80077f2 <_dtoa_r+0x28a>
 80077d8:	2301      	movs	r3, #1
 80077da:	e7f3      	b.n	80077c4 <_dtoa_r+0x25c>
 80077dc:	2300      	movs	r3, #0
 80077de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077e0:	9308      	str	r3, [sp, #32]
 80077e2:	9b00      	ldr	r3, [sp, #0]
 80077e4:	4413      	add	r3, r2
 80077e6:	9302      	str	r3, [sp, #8]
 80077e8:	3301      	adds	r3, #1
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	9303      	str	r3, [sp, #12]
 80077ee:	bfb8      	it	lt
 80077f0:	2301      	movlt	r3, #1
 80077f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80077f4:	2200      	movs	r2, #0
 80077f6:	6042      	str	r2, [r0, #4]
 80077f8:	2204      	movs	r2, #4
 80077fa:	f102 0614 	add.w	r6, r2, #20
 80077fe:	429e      	cmp	r6, r3
 8007800:	6841      	ldr	r1, [r0, #4]
 8007802:	d93d      	bls.n	8007880 <_dtoa_r+0x318>
 8007804:	4620      	mov	r0, r4
 8007806:	f001 f839 	bl	800887c <_Balloc>
 800780a:	9001      	str	r0, [sp, #4]
 800780c:	2800      	cmp	r0, #0
 800780e:	d13b      	bne.n	8007888 <_dtoa_r+0x320>
 8007810:	4b11      	ldr	r3, [pc, #68]	; (8007858 <_dtoa_r+0x2f0>)
 8007812:	4602      	mov	r2, r0
 8007814:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007818:	e6c0      	b.n	800759c <_dtoa_r+0x34>
 800781a:	2301      	movs	r3, #1
 800781c:	e7df      	b.n	80077de <_dtoa_r+0x276>
 800781e:	bf00      	nop
 8007820:	636f4361 	.word	0x636f4361
 8007824:	3fd287a7 	.word	0x3fd287a7
 8007828:	8b60c8b3 	.word	0x8b60c8b3
 800782c:	3fc68a28 	.word	0x3fc68a28
 8007830:	509f79fb 	.word	0x509f79fb
 8007834:	3fd34413 	.word	0x3fd34413
 8007838:	0800a4de 	.word	0x0800a4de
 800783c:	0800a4f5 	.word	0x0800a4f5
 8007840:	7ff00000 	.word	0x7ff00000
 8007844:	0800a4da 	.word	0x0800a4da
 8007848:	0800a4d1 	.word	0x0800a4d1
 800784c:	0800a351 	.word	0x0800a351
 8007850:	3ff80000 	.word	0x3ff80000
 8007854:	0800a660 	.word	0x0800a660
 8007858:	0800a550 	.word	0x0800a550
 800785c:	2501      	movs	r5, #1
 800785e:	2300      	movs	r3, #0
 8007860:	9306      	str	r3, [sp, #24]
 8007862:	9508      	str	r5, [sp, #32]
 8007864:	f04f 33ff 	mov.w	r3, #4294967295
 8007868:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800786c:	2200      	movs	r2, #0
 800786e:	2312      	movs	r3, #18
 8007870:	e7b0      	b.n	80077d4 <_dtoa_r+0x26c>
 8007872:	2301      	movs	r3, #1
 8007874:	9308      	str	r3, [sp, #32]
 8007876:	e7f5      	b.n	8007864 <_dtoa_r+0x2fc>
 8007878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800787a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800787e:	e7b8      	b.n	80077f2 <_dtoa_r+0x28a>
 8007880:	3101      	adds	r1, #1
 8007882:	6041      	str	r1, [r0, #4]
 8007884:	0052      	lsls	r2, r2, #1
 8007886:	e7b8      	b.n	80077fa <_dtoa_r+0x292>
 8007888:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800788a:	9a01      	ldr	r2, [sp, #4]
 800788c:	601a      	str	r2, [r3, #0]
 800788e:	9b03      	ldr	r3, [sp, #12]
 8007890:	2b0e      	cmp	r3, #14
 8007892:	f200 809d 	bhi.w	80079d0 <_dtoa_r+0x468>
 8007896:	2d00      	cmp	r5, #0
 8007898:	f000 809a 	beq.w	80079d0 <_dtoa_r+0x468>
 800789c:	9b00      	ldr	r3, [sp, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	dd32      	ble.n	8007908 <_dtoa_r+0x3a0>
 80078a2:	4ab7      	ldr	r2, [pc, #732]	; (8007b80 <_dtoa_r+0x618>)
 80078a4:	f003 030f 	and.w	r3, r3, #15
 80078a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80078ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80078b0:	9b00      	ldr	r3, [sp, #0]
 80078b2:	05d8      	lsls	r0, r3, #23
 80078b4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80078b8:	d516      	bpl.n	80078e8 <_dtoa_r+0x380>
 80078ba:	4bb2      	ldr	r3, [pc, #712]	; (8007b84 <_dtoa_r+0x61c>)
 80078bc:	ec51 0b19 	vmov	r0, r1, d9
 80078c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80078c4:	f7f8 ffe2 	bl	800088c <__aeabi_ddiv>
 80078c8:	f007 070f 	and.w	r7, r7, #15
 80078cc:	4682      	mov	sl, r0
 80078ce:	468b      	mov	fp, r1
 80078d0:	2503      	movs	r5, #3
 80078d2:	4eac      	ldr	r6, [pc, #688]	; (8007b84 <_dtoa_r+0x61c>)
 80078d4:	b957      	cbnz	r7, 80078ec <_dtoa_r+0x384>
 80078d6:	4642      	mov	r2, r8
 80078d8:	464b      	mov	r3, r9
 80078da:	4650      	mov	r0, sl
 80078dc:	4659      	mov	r1, fp
 80078de:	f7f8 ffd5 	bl	800088c <__aeabi_ddiv>
 80078e2:	4682      	mov	sl, r0
 80078e4:	468b      	mov	fp, r1
 80078e6:	e028      	b.n	800793a <_dtoa_r+0x3d2>
 80078e8:	2502      	movs	r5, #2
 80078ea:	e7f2      	b.n	80078d2 <_dtoa_r+0x36a>
 80078ec:	07f9      	lsls	r1, r7, #31
 80078ee:	d508      	bpl.n	8007902 <_dtoa_r+0x39a>
 80078f0:	4640      	mov	r0, r8
 80078f2:	4649      	mov	r1, r9
 80078f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80078f8:	f7f8 fe9e 	bl	8000638 <__aeabi_dmul>
 80078fc:	3501      	adds	r5, #1
 80078fe:	4680      	mov	r8, r0
 8007900:	4689      	mov	r9, r1
 8007902:	107f      	asrs	r7, r7, #1
 8007904:	3608      	adds	r6, #8
 8007906:	e7e5      	b.n	80078d4 <_dtoa_r+0x36c>
 8007908:	f000 809b 	beq.w	8007a42 <_dtoa_r+0x4da>
 800790c:	9b00      	ldr	r3, [sp, #0]
 800790e:	4f9d      	ldr	r7, [pc, #628]	; (8007b84 <_dtoa_r+0x61c>)
 8007910:	425e      	negs	r6, r3
 8007912:	4b9b      	ldr	r3, [pc, #620]	; (8007b80 <_dtoa_r+0x618>)
 8007914:	f006 020f 	and.w	r2, r6, #15
 8007918:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800791c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007920:	ec51 0b19 	vmov	r0, r1, d9
 8007924:	f7f8 fe88 	bl	8000638 <__aeabi_dmul>
 8007928:	1136      	asrs	r6, r6, #4
 800792a:	4682      	mov	sl, r0
 800792c:	468b      	mov	fp, r1
 800792e:	2300      	movs	r3, #0
 8007930:	2502      	movs	r5, #2
 8007932:	2e00      	cmp	r6, #0
 8007934:	d17a      	bne.n	8007a2c <_dtoa_r+0x4c4>
 8007936:	2b00      	cmp	r3, #0
 8007938:	d1d3      	bne.n	80078e2 <_dtoa_r+0x37a>
 800793a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800793c:	2b00      	cmp	r3, #0
 800793e:	f000 8082 	beq.w	8007a46 <_dtoa_r+0x4de>
 8007942:	4b91      	ldr	r3, [pc, #580]	; (8007b88 <_dtoa_r+0x620>)
 8007944:	2200      	movs	r2, #0
 8007946:	4650      	mov	r0, sl
 8007948:	4659      	mov	r1, fp
 800794a:	f7f9 f8e7 	bl	8000b1c <__aeabi_dcmplt>
 800794e:	2800      	cmp	r0, #0
 8007950:	d079      	beq.n	8007a46 <_dtoa_r+0x4de>
 8007952:	9b03      	ldr	r3, [sp, #12]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d076      	beq.n	8007a46 <_dtoa_r+0x4de>
 8007958:	9b02      	ldr	r3, [sp, #8]
 800795a:	2b00      	cmp	r3, #0
 800795c:	dd36      	ble.n	80079cc <_dtoa_r+0x464>
 800795e:	9b00      	ldr	r3, [sp, #0]
 8007960:	4650      	mov	r0, sl
 8007962:	4659      	mov	r1, fp
 8007964:	1e5f      	subs	r7, r3, #1
 8007966:	2200      	movs	r2, #0
 8007968:	4b88      	ldr	r3, [pc, #544]	; (8007b8c <_dtoa_r+0x624>)
 800796a:	f7f8 fe65 	bl	8000638 <__aeabi_dmul>
 800796e:	9e02      	ldr	r6, [sp, #8]
 8007970:	4682      	mov	sl, r0
 8007972:	468b      	mov	fp, r1
 8007974:	3501      	adds	r5, #1
 8007976:	4628      	mov	r0, r5
 8007978:	f7f8 fdf4 	bl	8000564 <__aeabi_i2d>
 800797c:	4652      	mov	r2, sl
 800797e:	465b      	mov	r3, fp
 8007980:	f7f8 fe5a 	bl	8000638 <__aeabi_dmul>
 8007984:	4b82      	ldr	r3, [pc, #520]	; (8007b90 <_dtoa_r+0x628>)
 8007986:	2200      	movs	r2, #0
 8007988:	f7f8 fca0 	bl	80002cc <__adddf3>
 800798c:	46d0      	mov	r8, sl
 800798e:	46d9      	mov	r9, fp
 8007990:	4682      	mov	sl, r0
 8007992:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007996:	2e00      	cmp	r6, #0
 8007998:	d158      	bne.n	8007a4c <_dtoa_r+0x4e4>
 800799a:	4b7e      	ldr	r3, [pc, #504]	; (8007b94 <_dtoa_r+0x62c>)
 800799c:	2200      	movs	r2, #0
 800799e:	4640      	mov	r0, r8
 80079a0:	4649      	mov	r1, r9
 80079a2:	f7f8 fc91 	bl	80002c8 <__aeabi_dsub>
 80079a6:	4652      	mov	r2, sl
 80079a8:	465b      	mov	r3, fp
 80079aa:	4680      	mov	r8, r0
 80079ac:	4689      	mov	r9, r1
 80079ae:	f7f9 f8d3 	bl	8000b58 <__aeabi_dcmpgt>
 80079b2:	2800      	cmp	r0, #0
 80079b4:	f040 8295 	bne.w	8007ee2 <_dtoa_r+0x97a>
 80079b8:	4652      	mov	r2, sl
 80079ba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80079be:	4640      	mov	r0, r8
 80079c0:	4649      	mov	r1, r9
 80079c2:	f7f9 f8ab 	bl	8000b1c <__aeabi_dcmplt>
 80079c6:	2800      	cmp	r0, #0
 80079c8:	f040 8289 	bne.w	8007ede <_dtoa_r+0x976>
 80079cc:	ec5b ab19 	vmov	sl, fp, d9
 80079d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f2c0 8148 	blt.w	8007c68 <_dtoa_r+0x700>
 80079d8:	9a00      	ldr	r2, [sp, #0]
 80079da:	2a0e      	cmp	r2, #14
 80079dc:	f300 8144 	bgt.w	8007c68 <_dtoa_r+0x700>
 80079e0:	4b67      	ldr	r3, [pc, #412]	; (8007b80 <_dtoa_r+0x618>)
 80079e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80079ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	f280 80d5 	bge.w	8007b9c <_dtoa_r+0x634>
 80079f2:	9b03      	ldr	r3, [sp, #12]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	f300 80d1 	bgt.w	8007b9c <_dtoa_r+0x634>
 80079fa:	f040 826f 	bne.w	8007edc <_dtoa_r+0x974>
 80079fe:	4b65      	ldr	r3, [pc, #404]	; (8007b94 <_dtoa_r+0x62c>)
 8007a00:	2200      	movs	r2, #0
 8007a02:	4640      	mov	r0, r8
 8007a04:	4649      	mov	r1, r9
 8007a06:	f7f8 fe17 	bl	8000638 <__aeabi_dmul>
 8007a0a:	4652      	mov	r2, sl
 8007a0c:	465b      	mov	r3, fp
 8007a0e:	f7f9 f899 	bl	8000b44 <__aeabi_dcmpge>
 8007a12:	9e03      	ldr	r6, [sp, #12]
 8007a14:	4637      	mov	r7, r6
 8007a16:	2800      	cmp	r0, #0
 8007a18:	f040 8245 	bne.w	8007ea6 <_dtoa_r+0x93e>
 8007a1c:	9d01      	ldr	r5, [sp, #4]
 8007a1e:	2331      	movs	r3, #49	; 0x31
 8007a20:	f805 3b01 	strb.w	r3, [r5], #1
 8007a24:	9b00      	ldr	r3, [sp, #0]
 8007a26:	3301      	adds	r3, #1
 8007a28:	9300      	str	r3, [sp, #0]
 8007a2a:	e240      	b.n	8007eae <_dtoa_r+0x946>
 8007a2c:	07f2      	lsls	r2, r6, #31
 8007a2e:	d505      	bpl.n	8007a3c <_dtoa_r+0x4d4>
 8007a30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a34:	f7f8 fe00 	bl	8000638 <__aeabi_dmul>
 8007a38:	3501      	adds	r5, #1
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	1076      	asrs	r6, r6, #1
 8007a3e:	3708      	adds	r7, #8
 8007a40:	e777      	b.n	8007932 <_dtoa_r+0x3ca>
 8007a42:	2502      	movs	r5, #2
 8007a44:	e779      	b.n	800793a <_dtoa_r+0x3d2>
 8007a46:	9f00      	ldr	r7, [sp, #0]
 8007a48:	9e03      	ldr	r6, [sp, #12]
 8007a4a:	e794      	b.n	8007976 <_dtoa_r+0x40e>
 8007a4c:	9901      	ldr	r1, [sp, #4]
 8007a4e:	4b4c      	ldr	r3, [pc, #304]	; (8007b80 <_dtoa_r+0x618>)
 8007a50:	4431      	add	r1, r6
 8007a52:	910d      	str	r1, [sp, #52]	; 0x34
 8007a54:	9908      	ldr	r1, [sp, #32]
 8007a56:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007a5a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007a5e:	2900      	cmp	r1, #0
 8007a60:	d043      	beq.n	8007aea <_dtoa_r+0x582>
 8007a62:	494d      	ldr	r1, [pc, #308]	; (8007b98 <_dtoa_r+0x630>)
 8007a64:	2000      	movs	r0, #0
 8007a66:	f7f8 ff11 	bl	800088c <__aeabi_ddiv>
 8007a6a:	4652      	mov	r2, sl
 8007a6c:	465b      	mov	r3, fp
 8007a6e:	f7f8 fc2b 	bl	80002c8 <__aeabi_dsub>
 8007a72:	9d01      	ldr	r5, [sp, #4]
 8007a74:	4682      	mov	sl, r0
 8007a76:	468b      	mov	fp, r1
 8007a78:	4649      	mov	r1, r9
 8007a7a:	4640      	mov	r0, r8
 8007a7c:	f7f9 f88c 	bl	8000b98 <__aeabi_d2iz>
 8007a80:	4606      	mov	r6, r0
 8007a82:	f7f8 fd6f 	bl	8000564 <__aeabi_i2d>
 8007a86:	4602      	mov	r2, r0
 8007a88:	460b      	mov	r3, r1
 8007a8a:	4640      	mov	r0, r8
 8007a8c:	4649      	mov	r1, r9
 8007a8e:	f7f8 fc1b 	bl	80002c8 <__aeabi_dsub>
 8007a92:	3630      	adds	r6, #48	; 0x30
 8007a94:	f805 6b01 	strb.w	r6, [r5], #1
 8007a98:	4652      	mov	r2, sl
 8007a9a:	465b      	mov	r3, fp
 8007a9c:	4680      	mov	r8, r0
 8007a9e:	4689      	mov	r9, r1
 8007aa0:	f7f9 f83c 	bl	8000b1c <__aeabi_dcmplt>
 8007aa4:	2800      	cmp	r0, #0
 8007aa6:	d163      	bne.n	8007b70 <_dtoa_r+0x608>
 8007aa8:	4642      	mov	r2, r8
 8007aaa:	464b      	mov	r3, r9
 8007aac:	4936      	ldr	r1, [pc, #216]	; (8007b88 <_dtoa_r+0x620>)
 8007aae:	2000      	movs	r0, #0
 8007ab0:	f7f8 fc0a 	bl	80002c8 <__aeabi_dsub>
 8007ab4:	4652      	mov	r2, sl
 8007ab6:	465b      	mov	r3, fp
 8007ab8:	f7f9 f830 	bl	8000b1c <__aeabi_dcmplt>
 8007abc:	2800      	cmp	r0, #0
 8007abe:	f040 80b5 	bne.w	8007c2c <_dtoa_r+0x6c4>
 8007ac2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ac4:	429d      	cmp	r5, r3
 8007ac6:	d081      	beq.n	80079cc <_dtoa_r+0x464>
 8007ac8:	4b30      	ldr	r3, [pc, #192]	; (8007b8c <_dtoa_r+0x624>)
 8007aca:	2200      	movs	r2, #0
 8007acc:	4650      	mov	r0, sl
 8007ace:	4659      	mov	r1, fp
 8007ad0:	f7f8 fdb2 	bl	8000638 <__aeabi_dmul>
 8007ad4:	4b2d      	ldr	r3, [pc, #180]	; (8007b8c <_dtoa_r+0x624>)
 8007ad6:	4682      	mov	sl, r0
 8007ad8:	468b      	mov	fp, r1
 8007ada:	4640      	mov	r0, r8
 8007adc:	4649      	mov	r1, r9
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f7f8 fdaa 	bl	8000638 <__aeabi_dmul>
 8007ae4:	4680      	mov	r8, r0
 8007ae6:	4689      	mov	r9, r1
 8007ae8:	e7c6      	b.n	8007a78 <_dtoa_r+0x510>
 8007aea:	4650      	mov	r0, sl
 8007aec:	4659      	mov	r1, fp
 8007aee:	f7f8 fda3 	bl	8000638 <__aeabi_dmul>
 8007af2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007af4:	9d01      	ldr	r5, [sp, #4]
 8007af6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007af8:	4682      	mov	sl, r0
 8007afa:	468b      	mov	fp, r1
 8007afc:	4649      	mov	r1, r9
 8007afe:	4640      	mov	r0, r8
 8007b00:	f7f9 f84a 	bl	8000b98 <__aeabi_d2iz>
 8007b04:	4606      	mov	r6, r0
 8007b06:	f7f8 fd2d 	bl	8000564 <__aeabi_i2d>
 8007b0a:	3630      	adds	r6, #48	; 0x30
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	460b      	mov	r3, r1
 8007b10:	4640      	mov	r0, r8
 8007b12:	4649      	mov	r1, r9
 8007b14:	f7f8 fbd8 	bl	80002c8 <__aeabi_dsub>
 8007b18:	f805 6b01 	strb.w	r6, [r5], #1
 8007b1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b1e:	429d      	cmp	r5, r3
 8007b20:	4680      	mov	r8, r0
 8007b22:	4689      	mov	r9, r1
 8007b24:	f04f 0200 	mov.w	r2, #0
 8007b28:	d124      	bne.n	8007b74 <_dtoa_r+0x60c>
 8007b2a:	4b1b      	ldr	r3, [pc, #108]	; (8007b98 <_dtoa_r+0x630>)
 8007b2c:	4650      	mov	r0, sl
 8007b2e:	4659      	mov	r1, fp
 8007b30:	f7f8 fbcc 	bl	80002cc <__adddf3>
 8007b34:	4602      	mov	r2, r0
 8007b36:	460b      	mov	r3, r1
 8007b38:	4640      	mov	r0, r8
 8007b3a:	4649      	mov	r1, r9
 8007b3c:	f7f9 f80c 	bl	8000b58 <__aeabi_dcmpgt>
 8007b40:	2800      	cmp	r0, #0
 8007b42:	d173      	bne.n	8007c2c <_dtoa_r+0x6c4>
 8007b44:	4652      	mov	r2, sl
 8007b46:	465b      	mov	r3, fp
 8007b48:	4913      	ldr	r1, [pc, #76]	; (8007b98 <_dtoa_r+0x630>)
 8007b4a:	2000      	movs	r0, #0
 8007b4c:	f7f8 fbbc 	bl	80002c8 <__aeabi_dsub>
 8007b50:	4602      	mov	r2, r0
 8007b52:	460b      	mov	r3, r1
 8007b54:	4640      	mov	r0, r8
 8007b56:	4649      	mov	r1, r9
 8007b58:	f7f8 ffe0 	bl	8000b1c <__aeabi_dcmplt>
 8007b5c:	2800      	cmp	r0, #0
 8007b5e:	f43f af35 	beq.w	80079cc <_dtoa_r+0x464>
 8007b62:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007b64:	1e6b      	subs	r3, r5, #1
 8007b66:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b68:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007b6c:	2b30      	cmp	r3, #48	; 0x30
 8007b6e:	d0f8      	beq.n	8007b62 <_dtoa_r+0x5fa>
 8007b70:	9700      	str	r7, [sp, #0]
 8007b72:	e049      	b.n	8007c08 <_dtoa_r+0x6a0>
 8007b74:	4b05      	ldr	r3, [pc, #20]	; (8007b8c <_dtoa_r+0x624>)
 8007b76:	f7f8 fd5f 	bl	8000638 <__aeabi_dmul>
 8007b7a:	4680      	mov	r8, r0
 8007b7c:	4689      	mov	r9, r1
 8007b7e:	e7bd      	b.n	8007afc <_dtoa_r+0x594>
 8007b80:	0800a660 	.word	0x0800a660
 8007b84:	0800a638 	.word	0x0800a638
 8007b88:	3ff00000 	.word	0x3ff00000
 8007b8c:	40240000 	.word	0x40240000
 8007b90:	401c0000 	.word	0x401c0000
 8007b94:	40140000 	.word	0x40140000
 8007b98:	3fe00000 	.word	0x3fe00000
 8007b9c:	9d01      	ldr	r5, [sp, #4]
 8007b9e:	4656      	mov	r6, sl
 8007ba0:	465f      	mov	r7, fp
 8007ba2:	4642      	mov	r2, r8
 8007ba4:	464b      	mov	r3, r9
 8007ba6:	4630      	mov	r0, r6
 8007ba8:	4639      	mov	r1, r7
 8007baa:	f7f8 fe6f 	bl	800088c <__aeabi_ddiv>
 8007bae:	f7f8 fff3 	bl	8000b98 <__aeabi_d2iz>
 8007bb2:	4682      	mov	sl, r0
 8007bb4:	f7f8 fcd6 	bl	8000564 <__aeabi_i2d>
 8007bb8:	4642      	mov	r2, r8
 8007bba:	464b      	mov	r3, r9
 8007bbc:	f7f8 fd3c 	bl	8000638 <__aeabi_dmul>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	460b      	mov	r3, r1
 8007bc4:	4630      	mov	r0, r6
 8007bc6:	4639      	mov	r1, r7
 8007bc8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007bcc:	f7f8 fb7c 	bl	80002c8 <__aeabi_dsub>
 8007bd0:	f805 6b01 	strb.w	r6, [r5], #1
 8007bd4:	9e01      	ldr	r6, [sp, #4]
 8007bd6:	9f03      	ldr	r7, [sp, #12]
 8007bd8:	1bae      	subs	r6, r5, r6
 8007bda:	42b7      	cmp	r7, r6
 8007bdc:	4602      	mov	r2, r0
 8007bde:	460b      	mov	r3, r1
 8007be0:	d135      	bne.n	8007c4e <_dtoa_r+0x6e6>
 8007be2:	f7f8 fb73 	bl	80002cc <__adddf3>
 8007be6:	4642      	mov	r2, r8
 8007be8:	464b      	mov	r3, r9
 8007bea:	4606      	mov	r6, r0
 8007bec:	460f      	mov	r7, r1
 8007bee:	f7f8 ffb3 	bl	8000b58 <__aeabi_dcmpgt>
 8007bf2:	b9d0      	cbnz	r0, 8007c2a <_dtoa_r+0x6c2>
 8007bf4:	4642      	mov	r2, r8
 8007bf6:	464b      	mov	r3, r9
 8007bf8:	4630      	mov	r0, r6
 8007bfa:	4639      	mov	r1, r7
 8007bfc:	f7f8 ff84 	bl	8000b08 <__aeabi_dcmpeq>
 8007c00:	b110      	cbz	r0, 8007c08 <_dtoa_r+0x6a0>
 8007c02:	f01a 0f01 	tst.w	sl, #1
 8007c06:	d110      	bne.n	8007c2a <_dtoa_r+0x6c2>
 8007c08:	4620      	mov	r0, r4
 8007c0a:	ee18 1a10 	vmov	r1, s16
 8007c0e:	f000 fe75 	bl	80088fc <_Bfree>
 8007c12:	2300      	movs	r3, #0
 8007c14:	9800      	ldr	r0, [sp, #0]
 8007c16:	702b      	strb	r3, [r5, #0]
 8007c18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c1a:	3001      	adds	r0, #1
 8007c1c:	6018      	str	r0, [r3, #0]
 8007c1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	f43f acf1 	beq.w	8007608 <_dtoa_r+0xa0>
 8007c26:	601d      	str	r5, [r3, #0]
 8007c28:	e4ee      	b.n	8007608 <_dtoa_r+0xa0>
 8007c2a:	9f00      	ldr	r7, [sp, #0]
 8007c2c:	462b      	mov	r3, r5
 8007c2e:	461d      	mov	r5, r3
 8007c30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c34:	2a39      	cmp	r2, #57	; 0x39
 8007c36:	d106      	bne.n	8007c46 <_dtoa_r+0x6de>
 8007c38:	9a01      	ldr	r2, [sp, #4]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d1f7      	bne.n	8007c2e <_dtoa_r+0x6c6>
 8007c3e:	9901      	ldr	r1, [sp, #4]
 8007c40:	2230      	movs	r2, #48	; 0x30
 8007c42:	3701      	adds	r7, #1
 8007c44:	700a      	strb	r2, [r1, #0]
 8007c46:	781a      	ldrb	r2, [r3, #0]
 8007c48:	3201      	adds	r2, #1
 8007c4a:	701a      	strb	r2, [r3, #0]
 8007c4c:	e790      	b.n	8007b70 <_dtoa_r+0x608>
 8007c4e:	4ba6      	ldr	r3, [pc, #664]	; (8007ee8 <_dtoa_r+0x980>)
 8007c50:	2200      	movs	r2, #0
 8007c52:	f7f8 fcf1 	bl	8000638 <__aeabi_dmul>
 8007c56:	2200      	movs	r2, #0
 8007c58:	2300      	movs	r3, #0
 8007c5a:	4606      	mov	r6, r0
 8007c5c:	460f      	mov	r7, r1
 8007c5e:	f7f8 ff53 	bl	8000b08 <__aeabi_dcmpeq>
 8007c62:	2800      	cmp	r0, #0
 8007c64:	d09d      	beq.n	8007ba2 <_dtoa_r+0x63a>
 8007c66:	e7cf      	b.n	8007c08 <_dtoa_r+0x6a0>
 8007c68:	9a08      	ldr	r2, [sp, #32]
 8007c6a:	2a00      	cmp	r2, #0
 8007c6c:	f000 80d7 	beq.w	8007e1e <_dtoa_r+0x8b6>
 8007c70:	9a06      	ldr	r2, [sp, #24]
 8007c72:	2a01      	cmp	r2, #1
 8007c74:	f300 80ba 	bgt.w	8007dec <_dtoa_r+0x884>
 8007c78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c7a:	2a00      	cmp	r2, #0
 8007c7c:	f000 80b2 	beq.w	8007de4 <_dtoa_r+0x87c>
 8007c80:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007c84:	9e07      	ldr	r6, [sp, #28]
 8007c86:	9d04      	ldr	r5, [sp, #16]
 8007c88:	9a04      	ldr	r2, [sp, #16]
 8007c8a:	441a      	add	r2, r3
 8007c8c:	9204      	str	r2, [sp, #16]
 8007c8e:	9a05      	ldr	r2, [sp, #20]
 8007c90:	2101      	movs	r1, #1
 8007c92:	441a      	add	r2, r3
 8007c94:	4620      	mov	r0, r4
 8007c96:	9205      	str	r2, [sp, #20]
 8007c98:	f000 ff32 	bl	8008b00 <__i2b>
 8007c9c:	4607      	mov	r7, r0
 8007c9e:	2d00      	cmp	r5, #0
 8007ca0:	dd0c      	ble.n	8007cbc <_dtoa_r+0x754>
 8007ca2:	9b05      	ldr	r3, [sp, #20]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	dd09      	ble.n	8007cbc <_dtoa_r+0x754>
 8007ca8:	42ab      	cmp	r3, r5
 8007caa:	9a04      	ldr	r2, [sp, #16]
 8007cac:	bfa8      	it	ge
 8007cae:	462b      	movge	r3, r5
 8007cb0:	1ad2      	subs	r2, r2, r3
 8007cb2:	9204      	str	r2, [sp, #16]
 8007cb4:	9a05      	ldr	r2, [sp, #20]
 8007cb6:	1aed      	subs	r5, r5, r3
 8007cb8:	1ad3      	subs	r3, r2, r3
 8007cba:	9305      	str	r3, [sp, #20]
 8007cbc:	9b07      	ldr	r3, [sp, #28]
 8007cbe:	b31b      	cbz	r3, 8007d08 <_dtoa_r+0x7a0>
 8007cc0:	9b08      	ldr	r3, [sp, #32]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	f000 80af 	beq.w	8007e26 <_dtoa_r+0x8be>
 8007cc8:	2e00      	cmp	r6, #0
 8007cca:	dd13      	ble.n	8007cf4 <_dtoa_r+0x78c>
 8007ccc:	4639      	mov	r1, r7
 8007cce:	4632      	mov	r2, r6
 8007cd0:	4620      	mov	r0, r4
 8007cd2:	f000 ffd5 	bl	8008c80 <__pow5mult>
 8007cd6:	ee18 2a10 	vmov	r2, s16
 8007cda:	4601      	mov	r1, r0
 8007cdc:	4607      	mov	r7, r0
 8007cde:	4620      	mov	r0, r4
 8007ce0:	f000 ff24 	bl	8008b2c <__multiply>
 8007ce4:	ee18 1a10 	vmov	r1, s16
 8007ce8:	4680      	mov	r8, r0
 8007cea:	4620      	mov	r0, r4
 8007cec:	f000 fe06 	bl	80088fc <_Bfree>
 8007cf0:	ee08 8a10 	vmov	s16, r8
 8007cf4:	9b07      	ldr	r3, [sp, #28]
 8007cf6:	1b9a      	subs	r2, r3, r6
 8007cf8:	d006      	beq.n	8007d08 <_dtoa_r+0x7a0>
 8007cfa:	ee18 1a10 	vmov	r1, s16
 8007cfe:	4620      	mov	r0, r4
 8007d00:	f000 ffbe 	bl	8008c80 <__pow5mult>
 8007d04:	ee08 0a10 	vmov	s16, r0
 8007d08:	2101      	movs	r1, #1
 8007d0a:	4620      	mov	r0, r4
 8007d0c:	f000 fef8 	bl	8008b00 <__i2b>
 8007d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	4606      	mov	r6, r0
 8007d16:	f340 8088 	ble.w	8007e2a <_dtoa_r+0x8c2>
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	4601      	mov	r1, r0
 8007d1e:	4620      	mov	r0, r4
 8007d20:	f000 ffae 	bl	8008c80 <__pow5mult>
 8007d24:	9b06      	ldr	r3, [sp, #24]
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	4606      	mov	r6, r0
 8007d2a:	f340 8081 	ble.w	8007e30 <_dtoa_r+0x8c8>
 8007d2e:	f04f 0800 	mov.w	r8, #0
 8007d32:	6933      	ldr	r3, [r6, #16]
 8007d34:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007d38:	6918      	ldr	r0, [r3, #16]
 8007d3a:	f000 fe91 	bl	8008a60 <__hi0bits>
 8007d3e:	f1c0 0020 	rsb	r0, r0, #32
 8007d42:	9b05      	ldr	r3, [sp, #20]
 8007d44:	4418      	add	r0, r3
 8007d46:	f010 001f 	ands.w	r0, r0, #31
 8007d4a:	f000 8092 	beq.w	8007e72 <_dtoa_r+0x90a>
 8007d4e:	f1c0 0320 	rsb	r3, r0, #32
 8007d52:	2b04      	cmp	r3, #4
 8007d54:	f340 808a 	ble.w	8007e6c <_dtoa_r+0x904>
 8007d58:	f1c0 001c 	rsb	r0, r0, #28
 8007d5c:	9b04      	ldr	r3, [sp, #16]
 8007d5e:	4403      	add	r3, r0
 8007d60:	9304      	str	r3, [sp, #16]
 8007d62:	9b05      	ldr	r3, [sp, #20]
 8007d64:	4403      	add	r3, r0
 8007d66:	4405      	add	r5, r0
 8007d68:	9305      	str	r3, [sp, #20]
 8007d6a:	9b04      	ldr	r3, [sp, #16]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	dd07      	ble.n	8007d80 <_dtoa_r+0x818>
 8007d70:	ee18 1a10 	vmov	r1, s16
 8007d74:	461a      	mov	r2, r3
 8007d76:	4620      	mov	r0, r4
 8007d78:	f000 ffdc 	bl	8008d34 <__lshift>
 8007d7c:	ee08 0a10 	vmov	s16, r0
 8007d80:	9b05      	ldr	r3, [sp, #20]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	dd05      	ble.n	8007d92 <_dtoa_r+0x82a>
 8007d86:	4631      	mov	r1, r6
 8007d88:	461a      	mov	r2, r3
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	f000 ffd2 	bl	8008d34 <__lshift>
 8007d90:	4606      	mov	r6, r0
 8007d92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d06e      	beq.n	8007e76 <_dtoa_r+0x90e>
 8007d98:	ee18 0a10 	vmov	r0, s16
 8007d9c:	4631      	mov	r1, r6
 8007d9e:	f001 f839 	bl	8008e14 <__mcmp>
 8007da2:	2800      	cmp	r0, #0
 8007da4:	da67      	bge.n	8007e76 <_dtoa_r+0x90e>
 8007da6:	9b00      	ldr	r3, [sp, #0]
 8007da8:	3b01      	subs	r3, #1
 8007daa:	ee18 1a10 	vmov	r1, s16
 8007dae:	9300      	str	r3, [sp, #0]
 8007db0:	220a      	movs	r2, #10
 8007db2:	2300      	movs	r3, #0
 8007db4:	4620      	mov	r0, r4
 8007db6:	f000 fdc3 	bl	8008940 <__multadd>
 8007dba:	9b08      	ldr	r3, [sp, #32]
 8007dbc:	ee08 0a10 	vmov	s16, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	f000 81b1 	beq.w	8008128 <_dtoa_r+0xbc0>
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	4639      	mov	r1, r7
 8007dca:	220a      	movs	r2, #10
 8007dcc:	4620      	mov	r0, r4
 8007dce:	f000 fdb7 	bl	8008940 <__multadd>
 8007dd2:	9b02      	ldr	r3, [sp, #8]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	4607      	mov	r7, r0
 8007dd8:	f300 808e 	bgt.w	8007ef8 <_dtoa_r+0x990>
 8007ddc:	9b06      	ldr	r3, [sp, #24]
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	dc51      	bgt.n	8007e86 <_dtoa_r+0x91e>
 8007de2:	e089      	b.n	8007ef8 <_dtoa_r+0x990>
 8007de4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007de6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007dea:	e74b      	b.n	8007c84 <_dtoa_r+0x71c>
 8007dec:	9b03      	ldr	r3, [sp, #12]
 8007dee:	1e5e      	subs	r6, r3, #1
 8007df0:	9b07      	ldr	r3, [sp, #28]
 8007df2:	42b3      	cmp	r3, r6
 8007df4:	bfbf      	itttt	lt
 8007df6:	9b07      	ldrlt	r3, [sp, #28]
 8007df8:	9607      	strlt	r6, [sp, #28]
 8007dfa:	1af2      	sublt	r2, r6, r3
 8007dfc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007dfe:	bfb6      	itet	lt
 8007e00:	189b      	addlt	r3, r3, r2
 8007e02:	1b9e      	subge	r6, r3, r6
 8007e04:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007e06:	9b03      	ldr	r3, [sp, #12]
 8007e08:	bfb8      	it	lt
 8007e0a:	2600      	movlt	r6, #0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	bfb7      	itett	lt
 8007e10:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007e14:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007e18:	1a9d      	sublt	r5, r3, r2
 8007e1a:	2300      	movlt	r3, #0
 8007e1c:	e734      	b.n	8007c88 <_dtoa_r+0x720>
 8007e1e:	9e07      	ldr	r6, [sp, #28]
 8007e20:	9d04      	ldr	r5, [sp, #16]
 8007e22:	9f08      	ldr	r7, [sp, #32]
 8007e24:	e73b      	b.n	8007c9e <_dtoa_r+0x736>
 8007e26:	9a07      	ldr	r2, [sp, #28]
 8007e28:	e767      	b.n	8007cfa <_dtoa_r+0x792>
 8007e2a:	9b06      	ldr	r3, [sp, #24]
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	dc18      	bgt.n	8007e62 <_dtoa_r+0x8fa>
 8007e30:	f1ba 0f00 	cmp.w	sl, #0
 8007e34:	d115      	bne.n	8007e62 <_dtoa_r+0x8fa>
 8007e36:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e3a:	b993      	cbnz	r3, 8007e62 <_dtoa_r+0x8fa>
 8007e3c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007e40:	0d1b      	lsrs	r3, r3, #20
 8007e42:	051b      	lsls	r3, r3, #20
 8007e44:	b183      	cbz	r3, 8007e68 <_dtoa_r+0x900>
 8007e46:	9b04      	ldr	r3, [sp, #16]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	9304      	str	r3, [sp, #16]
 8007e4c:	9b05      	ldr	r3, [sp, #20]
 8007e4e:	3301      	adds	r3, #1
 8007e50:	9305      	str	r3, [sp, #20]
 8007e52:	f04f 0801 	mov.w	r8, #1
 8007e56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f47f af6a 	bne.w	8007d32 <_dtoa_r+0x7ca>
 8007e5e:	2001      	movs	r0, #1
 8007e60:	e76f      	b.n	8007d42 <_dtoa_r+0x7da>
 8007e62:	f04f 0800 	mov.w	r8, #0
 8007e66:	e7f6      	b.n	8007e56 <_dtoa_r+0x8ee>
 8007e68:	4698      	mov	r8, r3
 8007e6a:	e7f4      	b.n	8007e56 <_dtoa_r+0x8ee>
 8007e6c:	f43f af7d 	beq.w	8007d6a <_dtoa_r+0x802>
 8007e70:	4618      	mov	r0, r3
 8007e72:	301c      	adds	r0, #28
 8007e74:	e772      	b.n	8007d5c <_dtoa_r+0x7f4>
 8007e76:	9b03      	ldr	r3, [sp, #12]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	dc37      	bgt.n	8007eec <_dtoa_r+0x984>
 8007e7c:	9b06      	ldr	r3, [sp, #24]
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	dd34      	ble.n	8007eec <_dtoa_r+0x984>
 8007e82:	9b03      	ldr	r3, [sp, #12]
 8007e84:	9302      	str	r3, [sp, #8]
 8007e86:	9b02      	ldr	r3, [sp, #8]
 8007e88:	b96b      	cbnz	r3, 8007ea6 <_dtoa_r+0x93e>
 8007e8a:	4631      	mov	r1, r6
 8007e8c:	2205      	movs	r2, #5
 8007e8e:	4620      	mov	r0, r4
 8007e90:	f000 fd56 	bl	8008940 <__multadd>
 8007e94:	4601      	mov	r1, r0
 8007e96:	4606      	mov	r6, r0
 8007e98:	ee18 0a10 	vmov	r0, s16
 8007e9c:	f000 ffba 	bl	8008e14 <__mcmp>
 8007ea0:	2800      	cmp	r0, #0
 8007ea2:	f73f adbb 	bgt.w	8007a1c <_dtoa_r+0x4b4>
 8007ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ea8:	9d01      	ldr	r5, [sp, #4]
 8007eaa:	43db      	mvns	r3, r3
 8007eac:	9300      	str	r3, [sp, #0]
 8007eae:	f04f 0800 	mov.w	r8, #0
 8007eb2:	4631      	mov	r1, r6
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	f000 fd21 	bl	80088fc <_Bfree>
 8007eba:	2f00      	cmp	r7, #0
 8007ebc:	f43f aea4 	beq.w	8007c08 <_dtoa_r+0x6a0>
 8007ec0:	f1b8 0f00 	cmp.w	r8, #0
 8007ec4:	d005      	beq.n	8007ed2 <_dtoa_r+0x96a>
 8007ec6:	45b8      	cmp	r8, r7
 8007ec8:	d003      	beq.n	8007ed2 <_dtoa_r+0x96a>
 8007eca:	4641      	mov	r1, r8
 8007ecc:	4620      	mov	r0, r4
 8007ece:	f000 fd15 	bl	80088fc <_Bfree>
 8007ed2:	4639      	mov	r1, r7
 8007ed4:	4620      	mov	r0, r4
 8007ed6:	f000 fd11 	bl	80088fc <_Bfree>
 8007eda:	e695      	b.n	8007c08 <_dtoa_r+0x6a0>
 8007edc:	2600      	movs	r6, #0
 8007ede:	4637      	mov	r7, r6
 8007ee0:	e7e1      	b.n	8007ea6 <_dtoa_r+0x93e>
 8007ee2:	9700      	str	r7, [sp, #0]
 8007ee4:	4637      	mov	r7, r6
 8007ee6:	e599      	b.n	8007a1c <_dtoa_r+0x4b4>
 8007ee8:	40240000 	.word	0x40240000
 8007eec:	9b08      	ldr	r3, [sp, #32]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f000 80ca 	beq.w	8008088 <_dtoa_r+0xb20>
 8007ef4:	9b03      	ldr	r3, [sp, #12]
 8007ef6:	9302      	str	r3, [sp, #8]
 8007ef8:	2d00      	cmp	r5, #0
 8007efa:	dd05      	ble.n	8007f08 <_dtoa_r+0x9a0>
 8007efc:	4639      	mov	r1, r7
 8007efe:	462a      	mov	r2, r5
 8007f00:	4620      	mov	r0, r4
 8007f02:	f000 ff17 	bl	8008d34 <__lshift>
 8007f06:	4607      	mov	r7, r0
 8007f08:	f1b8 0f00 	cmp.w	r8, #0
 8007f0c:	d05b      	beq.n	8007fc6 <_dtoa_r+0xa5e>
 8007f0e:	6879      	ldr	r1, [r7, #4]
 8007f10:	4620      	mov	r0, r4
 8007f12:	f000 fcb3 	bl	800887c <_Balloc>
 8007f16:	4605      	mov	r5, r0
 8007f18:	b928      	cbnz	r0, 8007f26 <_dtoa_r+0x9be>
 8007f1a:	4b87      	ldr	r3, [pc, #540]	; (8008138 <_dtoa_r+0xbd0>)
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007f22:	f7ff bb3b 	b.w	800759c <_dtoa_r+0x34>
 8007f26:	693a      	ldr	r2, [r7, #16]
 8007f28:	3202      	adds	r2, #2
 8007f2a:	0092      	lsls	r2, r2, #2
 8007f2c:	f107 010c 	add.w	r1, r7, #12
 8007f30:	300c      	adds	r0, #12
 8007f32:	f000 fc95 	bl	8008860 <memcpy>
 8007f36:	2201      	movs	r2, #1
 8007f38:	4629      	mov	r1, r5
 8007f3a:	4620      	mov	r0, r4
 8007f3c:	f000 fefa 	bl	8008d34 <__lshift>
 8007f40:	9b01      	ldr	r3, [sp, #4]
 8007f42:	f103 0901 	add.w	r9, r3, #1
 8007f46:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007f4a:	4413      	add	r3, r2
 8007f4c:	9305      	str	r3, [sp, #20]
 8007f4e:	f00a 0301 	and.w	r3, sl, #1
 8007f52:	46b8      	mov	r8, r7
 8007f54:	9304      	str	r3, [sp, #16]
 8007f56:	4607      	mov	r7, r0
 8007f58:	4631      	mov	r1, r6
 8007f5a:	ee18 0a10 	vmov	r0, s16
 8007f5e:	f7ff fa77 	bl	8007450 <quorem>
 8007f62:	4641      	mov	r1, r8
 8007f64:	9002      	str	r0, [sp, #8]
 8007f66:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007f6a:	ee18 0a10 	vmov	r0, s16
 8007f6e:	f000 ff51 	bl	8008e14 <__mcmp>
 8007f72:	463a      	mov	r2, r7
 8007f74:	9003      	str	r0, [sp, #12]
 8007f76:	4631      	mov	r1, r6
 8007f78:	4620      	mov	r0, r4
 8007f7a:	f000 ff67 	bl	8008e4c <__mdiff>
 8007f7e:	68c2      	ldr	r2, [r0, #12]
 8007f80:	f109 3bff 	add.w	fp, r9, #4294967295
 8007f84:	4605      	mov	r5, r0
 8007f86:	bb02      	cbnz	r2, 8007fca <_dtoa_r+0xa62>
 8007f88:	4601      	mov	r1, r0
 8007f8a:	ee18 0a10 	vmov	r0, s16
 8007f8e:	f000 ff41 	bl	8008e14 <__mcmp>
 8007f92:	4602      	mov	r2, r0
 8007f94:	4629      	mov	r1, r5
 8007f96:	4620      	mov	r0, r4
 8007f98:	9207      	str	r2, [sp, #28]
 8007f9a:	f000 fcaf 	bl	80088fc <_Bfree>
 8007f9e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007fa2:	ea43 0102 	orr.w	r1, r3, r2
 8007fa6:	9b04      	ldr	r3, [sp, #16]
 8007fa8:	430b      	orrs	r3, r1
 8007faa:	464d      	mov	r5, r9
 8007fac:	d10f      	bne.n	8007fce <_dtoa_r+0xa66>
 8007fae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007fb2:	d02a      	beq.n	800800a <_dtoa_r+0xaa2>
 8007fb4:	9b03      	ldr	r3, [sp, #12]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	dd02      	ble.n	8007fc0 <_dtoa_r+0xa58>
 8007fba:	9b02      	ldr	r3, [sp, #8]
 8007fbc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007fc0:	f88b a000 	strb.w	sl, [fp]
 8007fc4:	e775      	b.n	8007eb2 <_dtoa_r+0x94a>
 8007fc6:	4638      	mov	r0, r7
 8007fc8:	e7ba      	b.n	8007f40 <_dtoa_r+0x9d8>
 8007fca:	2201      	movs	r2, #1
 8007fcc:	e7e2      	b.n	8007f94 <_dtoa_r+0xa2c>
 8007fce:	9b03      	ldr	r3, [sp, #12]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	db04      	blt.n	8007fde <_dtoa_r+0xa76>
 8007fd4:	9906      	ldr	r1, [sp, #24]
 8007fd6:	430b      	orrs	r3, r1
 8007fd8:	9904      	ldr	r1, [sp, #16]
 8007fda:	430b      	orrs	r3, r1
 8007fdc:	d122      	bne.n	8008024 <_dtoa_r+0xabc>
 8007fde:	2a00      	cmp	r2, #0
 8007fe0:	ddee      	ble.n	8007fc0 <_dtoa_r+0xa58>
 8007fe2:	ee18 1a10 	vmov	r1, s16
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	4620      	mov	r0, r4
 8007fea:	f000 fea3 	bl	8008d34 <__lshift>
 8007fee:	4631      	mov	r1, r6
 8007ff0:	ee08 0a10 	vmov	s16, r0
 8007ff4:	f000 ff0e 	bl	8008e14 <__mcmp>
 8007ff8:	2800      	cmp	r0, #0
 8007ffa:	dc03      	bgt.n	8008004 <_dtoa_r+0xa9c>
 8007ffc:	d1e0      	bne.n	8007fc0 <_dtoa_r+0xa58>
 8007ffe:	f01a 0f01 	tst.w	sl, #1
 8008002:	d0dd      	beq.n	8007fc0 <_dtoa_r+0xa58>
 8008004:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008008:	d1d7      	bne.n	8007fba <_dtoa_r+0xa52>
 800800a:	2339      	movs	r3, #57	; 0x39
 800800c:	f88b 3000 	strb.w	r3, [fp]
 8008010:	462b      	mov	r3, r5
 8008012:	461d      	mov	r5, r3
 8008014:	3b01      	subs	r3, #1
 8008016:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800801a:	2a39      	cmp	r2, #57	; 0x39
 800801c:	d071      	beq.n	8008102 <_dtoa_r+0xb9a>
 800801e:	3201      	adds	r2, #1
 8008020:	701a      	strb	r2, [r3, #0]
 8008022:	e746      	b.n	8007eb2 <_dtoa_r+0x94a>
 8008024:	2a00      	cmp	r2, #0
 8008026:	dd07      	ble.n	8008038 <_dtoa_r+0xad0>
 8008028:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800802c:	d0ed      	beq.n	800800a <_dtoa_r+0xaa2>
 800802e:	f10a 0301 	add.w	r3, sl, #1
 8008032:	f88b 3000 	strb.w	r3, [fp]
 8008036:	e73c      	b.n	8007eb2 <_dtoa_r+0x94a>
 8008038:	9b05      	ldr	r3, [sp, #20]
 800803a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800803e:	4599      	cmp	r9, r3
 8008040:	d047      	beq.n	80080d2 <_dtoa_r+0xb6a>
 8008042:	ee18 1a10 	vmov	r1, s16
 8008046:	2300      	movs	r3, #0
 8008048:	220a      	movs	r2, #10
 800804a:	4620      	mov	r0, r4
 800804c:	f000 fc78 	bl	8008940 <__multadd>
 8008050:	45b8      	cmp	r8, r7
 8008052:	ee08 0a10 	vmov	s16, r0
 8008056:	f04f 0300 	mov.w	r3, #0
 800805a:	f04f 020a 	mov.w	r2, #10
 800805e:	4641      	mov	r1, r8
 8008060:	4620      	mov	r0, r4
 8008062:	d106      	bne.n	8008072 <_dtoa_r+0xb0a>
 8008064:	f000 fc6c 	bl	8008940 <__multadd>
 8008068:	4680      	mov	r8, r0
 800806a:	4607      	mov	r7, r0
 800806c:	f109 0901 	add.w	r9, r9, #1
 8008070:	e772      	b.n	8007f58 <_dtoa_r+0x9f0>
 8008072:	f000 fc65 	bl	8008940 <__multadd>
 8008076:	4639      	mov	r1, r7
 8008078:	4680      	mov	r8, r0
 800807a:	2300      	movs	r3, #0
 800807c:	220a      	movs	r2, #10
 800807e:	4620      	mov	r0, r4
 8008080:	f000 fc5e 	bl	8008940 <__multadd>
 8008084:	4607      	mov	r7, r0
 8008086:	e7f1      	b.n	800806c <_dtoa_r+0xb04>
 8008088:	9b03      	ldr	r3, [sp, #12]
 800808a:	9302      	str	r3, [sp, #8]
 800808c:	9d01      	ldr	r5, [sp, #4]
 800808e:	ee18 0a10 	vmov	r0, s16
 8008092:	4631      	mov	r1, r6
 8008094:	f7ff f9dc 	bl	8007450 <quorem>
 8008098:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800809c:	9b01      	ldr	r3, [sp, #4]
 800809e:	f805 ab01 	strb.w	sl, [r5], #1
 80080a2:	1aea      	subs	r2, r5, r3
 80080a4:	9b02      	ldr	r3, [sp, #8]
 80080a6:	4293      	cmp	r3, r2
 80080a8:	dd09      	ble.n	80080be <_dtoa_r+0xb56>
 80080aa:	ee18 1a10 	vmov	r1, s16
 80080ae:	2300      	movs	r3, #0
 80080b0:	220a      	movs	r2, #10
 80080b2:	4620      	mov	r0, r4
 80080b4:	f000 fc44 	bl	8008940 <__multadd>
 80080b8:	ee08 0a10 	vmov	s16, r0
 80080bc:	e7e7      	b.n	800808e <_dtoa_r+0xb26>
 80080be:	9b02      	ldr	r3, [sp, #8]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	bfc8      	it	gt
 80080c4:	461d      	movgt	r5, r3
 80080c6:	9b01      	ldr	r3, [sp, #4]
 80080c8:	bfd8      	it	le
 80080ca:	2501      	movle	r5, #1
 80080cc:	441d      	add	r5, r3
 80080ce:	f04f 0800 	mov.w	r8, #0
 80080d2:	ee18 1a10 	vmov	r1, s16
 80080d6:	2201      	movs	r2, #1
 80080d8:	4620      	mov	r0, r4
 80080da:	f000 fe2b 	bl	8008d34 <__lshift>
 80080de:	4631      	mov	r1, r6
 80080e0:	ee08 0a10 	vmov	s16, r0
 80080e4:	f000 fe96 	bl	8008e14 <__mcmp>
 80080e8:	2800      	cmp	r0, #0
 80080ea:	dc91      	bgt.n	8008010 <_dtoa_r+0xaa8>
 80080ec:	d102      	bne.n	80080f4 <_dtoa_r+0xb8c>
 80080ee:	f01a 0f01 	tst.w	sl, #1
 80080f2:	d18d      	bne.n	8008010 <_dtoa_r+0xaa8>
 80080f4:	462b      	mov	r3, r5
 80080f6:	461d      	mov	r5, r3
 80080f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80080fc:	2a30      	cmp	r2, #48	; 0x30
 80080fe:	d0fa      	beq.n	80080f6 <_dtoa_r+0xb8e>
 8008100:	e6d7      	b.n	8007eb2 <_dtoa_r+0x94a>
 8008102:	9a01      	ldr	r2, [sp, #4]
 8008104:	429a      	cmp	r2, r3
 8008106:	d184      	bne.n	8008012 <_dtoa_r+0xaaa>
 8008108:	9b00      	ldr	r3, [sp, #0]
 800810a:	3301      	adds	r3, #1
 800810c:	9300      	str	r3, [sp, #0]
 800810e:	2331      	movs	r3, #49	; 0x31
 8008110:	7013      	strb	r3, [r2, #0]
 8008112:	e6ce      	b.n	8007eb2 <_dtoa_r+0x94a>
 8008114:	4b09      	ldr	r3, [pc, #36]	; (800813c <_dtoa_r+0xbd4>)
 8008116:	f7ff ba95 	b.w	8007644 <_dtoa_r+0xdc>
 800811a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800811c:	2b00      	cmp	r3, #0
 800811e:	f47f aa6e 	bne.w	80075fe <_dtoa_r+0x96>
 8008122:	4b07      	ldr	r3, [pc, #28]	; (8008140 <_dtoa_r+0xbd8>)
 8008124:	f7ff ba8e 	b.w	8007644 <_dtoa_r+0xdc>
 8008128:	9b02      	ldr	r3, [sp, #8]
 800812a:	2b00      	cmp	r3, #0
 800812c:	dcae      	bgt.n	800808c <_dtoa_r+0xb24>
 800812e:	9b06      	ldr	r3, [sp, #24]
 8008130:	2b02      	cmp	r3, #2
 8008132:	f73f aea8 	bgt.w	8007e86 <_dtoa_r+0x91e>
 8008136:	e7a9      	b.n	800808c <_dtoa_r+0xb24>
 8008138:	0800a550 	.word	0x0800a550
 800813c:	0800a350 	.word	0x0800a350
 8008140:	0800a4d1 	.word	0x0800a4d1

08008144 <rshift>:
 8008144:	6903      	ldr	r3, [r0, #16]
 8008146:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800814a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800814e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008152:	f100 0414 	add.w	r4, r0, #20
 8008156:	dd45      	ble.n	80081e4 <rshift+0xa0>
 8008158:	f011 011f 	ands.w	r1, r1, #31
 800815c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008160:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008164:	d10c      	bne.n	8008180 <rshift+0x3c>
 8008166:	f100 0710 	add.w	r7, r0, #16
 800816a:	4629      	mov	r1, r5
 800816c:	42b1      	cmp	r1, r6
 800816e:	d334      	bcc.n	80081da <rshift+0x96>
 8008170:	1a9b      	subs	r3, r3, r2
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	1eea      	subs	r2, r5, #3
 8008176:	4296      	cmp	r6, r2
 8008178:	bf38      	it	cc
 800817a:	2300      	movcc	r3, #0
 800817c:	4423      	add	r3, r4
 800817e:	e015      	b.n	80081ac <rshift+0x68>
 8008180:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008184:	f1c1 0820 	rsb	r8, r1, #32
 8008188:	40cf      	lsrs	r7, r1
 800818a:	f105 0e04 	add.w	lr, r5, #4
 800818e:	46a1      	mov	r9, r4
 8008190:	4576      	cmp	r6, lr
 8008192:	46f4      	mov	ip, lr
 8008194:	d815      	bhi.n	80081c2 <rshift+0x7e>
 8008196:	1a9a      	subs	r2, r3, r2
 8008198:	0092      	lsls	r2, r2, #2
 800819a:	3a04      	subs	r2, #4
 800819c:	3501      	adds	r5, #1
 800819e:	42ae      	cmp	r6, r5
 80081a0:	bf38      	it	cc
 80081a2:	2200      	movcc	r2, #0
 80081a4:	18a3      	adds	r3, r4, r2
 80081a6:	50a7      	str	r7, [r4, r2]
 80081a8:	b107      	cbz	r7, 80081ac <rshift+0x68>
 80081aa:	3304      	adds	r3, #4
 80081ac:	1b1a      	subs	r2, r3, r4
 80081ae:	42a3      	cmp	r3, r4
 80081b0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80081b4:	bf08      	it	eq
 80081b6:	2300      	moveq	r3, #0
 80081b8:	6102      	str	r2, [r0, #16]
 80081ba:	bf08      	it	eq
 80081bc:	6143      	streq	r3, [r0, #20]
 80081be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081c2:	f8dc c000 	ldr.w	ip, [ip]
 80081c6:	fa0c fc08 	lsl.w	ip, ip, r8
 80081ca:	ea4c 0707 	orr.w	r7, ip, r7
 80081ce:	f849 7b04 	str.w	r7, [r9], #4
 80081d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80081d6:	40cf      	lsrs	r7, r1
 80081d8:	e7da      	b.n	8008190 <rshift+0x4c>
 80081da:	f851 cb04 	ldr.w	ip, [r1], #4
 80081de:	f847 cf04 	str.w	ip, [r7, #4]!
 80081e2:	e7c3      	b.n	800816c <rshift+0x28>
 80081e4:	4623      	mov	r3, r4
 80081e6:	e7e1      	b.n	80081ac <rshift+0x68>

080081e8 <__hexdig_fun>:
 80081e8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80081ec:	2b09      	cmp	r3, #9
 80081ee:	d802      	bhi.n	80081f6 <__hexdig_fun+0xe>
 80081f0:	3820      	subs	r0, #32
 80081f2:	b2c0      	uxtb	r0, r0
 80081f4:	4770      	bx	lr
 80081f6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80081fa:	2b05      	cmp	r3, #5
 80081fc:	d801      	bhi.n	8008202 <__hexdig_fun+0x1a>
 80081fe:	3847      	subs	r0, #71	; 0x47
 8008200:	e7f7      	b.n	80081f2 <__hexdig_fun+0xa>
 8008202:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008206:	2b05      	cmp	r3, #5
 8008208:	d801      	bhi.n	800820e <__hexdig_fun+0x26>
 800820a:	3827      	subs	r0, #39	; 0x27
 800820c:	e7f1      	b.n	80081f2 <__hexdig_fun+0xa>
 800820e:	2000      	movs	r0, #0
 8008210:	4770      	bx	lr
	...

08008214 <__gethex>:
 8008214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008218:	ed2d 8b02 	vpush	{d8}
 800821c:	b089      	sub	sp, #36	; 0x24
 800821e:	ee08 0a10 	vmov	s16, r0
 8008222:	9304      	str	r3, [sp, #16]
 8008224:	4bb4      	ldr	r3, [pc, #720]	; (80084f8 <__gethex+0x2e4>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	9301      	str	r3, [sp, #4]
 800822a:	4618      	mov	r0, r3
 800822c:	468b      	mov	fp, r1
 800822e:	4690      	mov	r8, r2
 8008230:	f7f7 ffee 	bl	8000210 <strlen>
 8008234:	9b01      	ldr	r3, [sp, #4]
 8008236:	f8db 2000 	ldr.w	r2, [fp]
 800823a:	4403      	add	r3, r0
 800823c:	4682      	mov	sl, r0
 800823e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008242:	9305      	str	r3, [sp, #20]
 8008244:	1c93      	adds	r3, r2, #2
 8008246:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800824a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800824e:	32fe      	adds	r2, #254	; 0xfe
 8008250:	18d1      	adds	r1, r2, r3
 8008252:	461f      	mov	r7, r3
 8008254:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008258:	9100      	str	r1, [sp, #0]
 800825a:	2830      	cmp	r0, #48	; 0x30
 800825c:	d0f8      	beq.n	8008250 <__gethex+0x3c>
 800825e:	f7ff ffc3 	bl	80081e8 <__hexdig_fun>
 8008262:	4604      	mov	r4, r0
 8008264:	2800      	cmp	r0, #0
 8008266:	d13a      	bne.n	80082de <__gethex+0xca>
 8008268:	9901      	ldr	r1, [sp, #4]
 800826a:	4652      	mov	r2, sl
 800826c:	4638      	mov	r0, r7
 800826e:	f001 fa33 	bl	80096d8 <strncmp>
 8008272:	4605      	mov	r5, r0
 8008274:	2800      	cmp	r0, #0
 8008276:	d168      	bne.n	800834a <__gethex+0x136>
 8008278:	f817 000a 	ldrb.w	r0, [r7, sl]
 800827c:	eb07 060a 	add.w	r6, r7, sl
 8008280:	f7ff ffb2 	bl	80081e8 <__hexdig_fun>
 8008284:	2800      	cmp	r0, #0
 8008286:	d062      	beq.n	800834e <__gethex+0x13a>
 8008288:	4633      	mov	r3, r6
 800828a:	7818      	ldrb	r0, [r3, #0]
 800828c:	2830      	cmp	r0, #48	; 0x30
 800828e:	461f      	mov	r7, r3
 8008290:	f103 0301 	add.w	r3, r3, #1
 8008294:	d0f9      	beq.n	800828a <__gethex+0x76>
 8008296:	f7ff ffa7 	bl	80081e8 <__hexdig_fun>
 800829a:	2301      	movs	r3, #1
 800829c:	fab0 f480 	clz	r4, r0
 80082a0:	0964      	lsrs	r4, r4, #5
 80082a2:	4635      	mov	r5, r6
 80082a4:	9300      	str	r3, [sp, #0]
 80082a6:	463a      	mov	r2, r7
 80082a8:	4616      	mov	r6, r2
 80082aa:	3201      	adds	r2, #1
 80082ac:	7830      	ldrb	r0, [r6, #0]
 80082ae:	f7ff ff9b 	bl	80081e8 <__hexdig_fun>
 80082b2:	2800      	cmp	r0, #0
 80082b4:	d1f8      	bne.n	80082a8 <__gethex+0x94>
 80082b6:	9901      	ldr	r1, [sp, #4]
 80082b8:	4652      	mov	r2, sl
 80082ba:	4630      	mov	r0, r6
 80082bc:	f001 fa0c 	bl	80096d8 <strncmp>
 80082c0:	b980      	cbnz	r0, 80082e4 <__gethex+0xd0>
 80082c2:	b94d      	cbnz	r5, 80082d8 <__gethex+0xc4>
 80082c4:	eb06 050a 	add.w	r5, r6, sl
 80082c8:	462a      	mov	r2, r5
 80082ca:	4616      	mov	r6, r2
 80082cc:	3201      	adds	r2, #1
 80082ce:	7830      	ldrb	r0, [r6, #0]
 80082d0:	f7ff ff8a 	bl	80081e8 <__hexdig_fun>
 80082d4:	2800      	cmp	r0, #0
 80082d6:	d1f8      	bne.n	80082ca <__gethex+0xb6>
 80082d8:	1bad      	subs	r5, r5, r6
 80082da:	00ad      	lsls	r5, r5, #2
 80082dc:	e004      	b.n	80082e8 <__gethex+0xd4>
 80082de:	2400      	movs	r4, #0
 80082e0:	4625      	mov	r5, r4
 80082e2:	e7e0      	b.n	80082a6 <__gethex+0x92>
 80082e4:	2d00      	cmp	r5, #0
 80082e6:	d1f7      	bne.n	80082d8 <__gethex+0xc4>
 80082e8:	7833      	ldrb	r3, [r6, #0]
 80082ea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80082ee:	2b50      	cmp	r3, #80	; 0x50
 80082f0:	d13b      	bne.n	800836a <__gethex+0x156>
 80082f2:	7873      	ldrb	r3, [r6, #1]
 80082f4:	2b2b      	cmp	r3, #43	; 0x2b
 80082f6:	d02c      	beq.n	8008352 <__gethex+0x13e>
 80082f8:	2b2d      	cmp	r3, #45	; 0x2d
 80082fa:	d02e      	beq.n	800835a <__gethex+0x146>
 80082fc:	1c71      	adds	r1, r6, #1
 80082fe:	f04f 0900 	mov.w	r9, #0
 8008302:	7808      	ldrb	r0, [r1, #0]
 8008304:	f7ff ff70 	bl	80081e8 <__hexdig_fun>
 8008308:	1e43      	subs	r3, r0, #1
 800830a:	b2db      	uxtb	r3, r3
 800830c:	2b18      	cmp	r3, #24
 800830e:	d82c      	bhi.n	800836a <__gethex+0x156>
 8008310:	f1a0 0210 	sub.w	r2, r0, #16
 8008314:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008318:	f7ff ff66 	bl	80081e8 <__hexdig_fun>
 800831c:	1e43      	subs	r3, r0, #1
 800831e:	b2db      	uxtb	r3, r3
 8008320:	2b18      	cmp	r3, #24
 8008322:	d91d      	bls.n	8008360 <__gethex+0x14c>
 8008324:	f1b9 0f00 	cmp.w	r9, #0
 8008328:	d000      	beq.n	800832c <__gethex+0x118>
 800832a:	4252      	negs	r2, r2
 800832c:	4415      	add	r5, r2
 800832e:	f8cb 1000 	str.w	r1, [fp]
 8008332:	b1e4      	cbz	r4, 800836e <__gethex+0x15a>
 8008334:	9b00      	ldr	r3, [sp, #0]
 8008336:	2b00      	cmp	r3, #0
 8008338:	bf14      	ite	ne
 800833a:	2700      	movne	r7, #0
 800833c:	2706      	moveq	r7, #6
 800833e:	4638      	mov	r0, r7
 8008340:	b009      	add	sp, #36	; 0x24
 8008342:	ecbd 8b02 	vpop	{d8}
 8008346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800834a:	463e      	mov	r6, r7
 800834c:	4625      	mov	r5, r4
 800834e:	2401      	movs	r4, #1
 8008350:	e7ca      	b.n	80082e8 <__gethex+0xd4>
 8008352:	f04f 0900 	mov.w	r9, #0
 8008356:	1cb1      	adds	r1, r6, #2
 8008358:	e7d3      	b.n	8008302 <__gethex+0xee>
 800835a:	f04f 0901 	mov.w	r9, #1
 800835e:	e7fa      	b.n	8008356 <__gethex+0x142>
 8008360:	230a      	movs	r3, #10
 8008362:	fb03 0202 	mla	r2, r3, r2, r0
 8008366:	3a10      	subs	r2, #16
 8008368:	e7d4      	b.n	8008314 <__gethex+0x100>
 800836a:	4631      	mov	r1, r6
 800836c:	e7df      	b.n	800832e <__gethex+0x11a>
 800836e:	1bf3      	subs	r3, r6, r7
 8008370:	3b01      	subs	r3, #1
 8008372:	4621      	mov	r1, r4
 8008374:	2b07      	cmp	r3, #7
 8008376:	dc0b      	bgt.n	8008390 <__gethex+0x17c>
 8008378:	ee18 0a10 	vmov	r0, s16
 800837c:	f000 fa7e 	bl	800887c <_Balloc>
 8008380:	4604      	mov	r4, r0
 8008382:	b940      	cbnz	r0, 8008396 <__gethex+0x182>
 8008384:	4b5d      	ldr	r3, [pc, #372]	; (80084fc <__gethex+0x2e8>)
 8008386:	4602      	mov	r2, r0
 8008388:	21de      	movs	r1, #222	; 0xde
 800838a:	485d      	ldr	r0, [pc, #372]	; (8008500 <__gethex+0x2ec>)
 800838c:	f001 f9c6 	bl	800971c <__assert_func>
 8008390:	3101      	adds	r1, #1
 8008392:	105b      	asrs	r3, r3, #1
 8008394:	e7ee      	b.n	8008374 <__gethex+0x160>
 8008396:	f100 0914 	add.w	r9, r0, #20
 800839a:	f04f 0b00 	mov.w	fp, #0
 800839e:	f1ca 0301 	rsb	r3, sl, #1
 80083a2:	f8cd 9008 	str.w	r9, [sp, #8]
 80083a6:	f8cd b000 	str.w	fp, [sp]
 80083aa:	9306      	str	r3, [sp, #24]
 80083ac:	42b7      	cmp	r7, r6
 80083ae:	d340      	bcc.n	8008432 <__gethex+0x21e>
 80083b0:	9802      	ldr	r0, [sp, #8]
 80083b2:	9b00      	ldr	r3, [sp, #0]
 80083b4:	f840 3b04 	str.w	r3, [r0], #4
 80083b8:	eba0 0009 	sub.w	r0, r0, r9
 80083bc:	1080      	asrs	r0, r0, #2
 80083be:	0146      	lsls	r6, r0, #5
 80083c0:	6120      	str	r0, [r4, #16]
 80083c2:	4618      	mov	r0, r3
 80083c4:	f000 fb4c 	bl	8008a60 <__hi0bits>
 80083c8:	1a30      	subs	r0, r6, r0
 80083ca:	f8d8 6000 	ldr.w	r6, [r8]
 80083ce:	42b0      	cmp	r0, r6
 80083d0:	dd63      	ble.n	800849a <__gethex+0x286>
 80083d2:	1b87      	subs	r7, r0, r6
 80083d4:	4639      	mov	r1, r7
 80083d6:	4620      	mov	r0, r4
 80083d8:	f000 fef0 	bl	80091bc <__any_on>
 80083dc:	4682      	mov	sl, r0
 80083de:	b1a8      	cbz	r0, 800840c <__gethex+0x1f8>
 80083e0:	1e7b      	subs	r3, r7, #1
 80083e2:	1159      	asrs	r1, r3, #5
 80083e4:	f003 021f 	and.w	r2, r3, #31
 80083e8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80083ec:	f04f 0a01 	mov.w	sl, #1
 80083f0:	fa0a f202 	lsl.w	r2, sl, r2
 80083f4:	420a      	tst	r2, r1
 80083f6:	d009      	beq.n	800840c <__gethex+0x1f8>
 80083f8:	4553      	cmp	r3, sl
 80083fa:	dd05      	ble.n	8008408 <__gethex+0x1f4>
 80083fc:	1eb9      	subs	r1, r7, #2
 80083fe:	4620      	mov	r0, r4
 8008400:	f000 fedc 	bl	80091bc <__any_on>
 8008404:	2800      	cmp	r0, #0
 8008406:	d145      	bne.n	8008494 <__gethex+0x280>
 8008408:	f04f 0a02 	mov.w	sl, #2
 800840c:	4639      	mov	r1, r7
 800840e:	4620      	mov	r0, r4
 8008410:	f7ff fe98 	bl	8008144 <rshift>
 8008414:	443d      	add	r5, r7
 8008416:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800841a:	42ab      	cmp	r3, r5
 800841c:	da4c      	bge.n	80084b8 <__gethex+0x2a4>
 800841e:	ee18 0a10 	vmov	r0, s16
 8008422:	4621      	mov	r1, r4
 8008424:	f000 fa6a 	bl	80088fc <_Bfree>
 8008428:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800842a:	2300      	movs	r3, #0
 800842c:	6013      	str	r3, [r2, #0]
 800842e:	27a3      	movs	r7, #163	; 0xa3
 8008430:	e785      	b.n	800833e <__gethex+0x12a>
 8008432:	1e73      	subs	r3, r6, #1
 8008434:	9a05      	ldr	r2, [sp, #20]
 8008436:	9303      	str	r3, [sp, #12]
 8008438:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800843c:	4293      	cmp	r3, r2
 800843e:	d019      	beq.n	8008474 <__gethex+0x260>
 8008440:	f1bb 0f20 	cmp.w	fp, #32
 8008444:	d107      	bne.n	8008456 <__gethex+0x242>
 8008446:	9b02      	ldr	r3, [sp, #8]
 8008448:	9a00      	ldr	r2, [sp, #0]
 800844a:	f843 2b04 	str.w	r2, [r3], #4
 800844e:	9302      	str	r3, [sp, #8]
 8008450:	2300      	movs	r3, #0
 8008452:	9300      	str	r3, [sp, #0]
 8008454:	469b      	mov	fp, r3
 8008456:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800845a:	f7ff fec5 	bl	80081e8 <__hexdig_fun>
 800845e:	9b00      	ldr	r3, [sp, #0]
 8008460:	f000 000f 	and.w	r0, r0, #15
 8008464:	fa00 f00b 	lsl.w	r0, r0, fp
 8008468:	4303      	orrs	r3, r0
 800846a:	9300      	str	r3, [sp, #0]
 800846c:	f10b 0b04 	add.w	fp, fp, #4
 8008470:	9b03      	ldr	r3, [sp, #12]
 8008472:	e00d      	b.n	8008490 <__gethex+0x27c>
 8008474:	9b03      	ldr	r3, [sp, #12]
 8008476:	9a06      	ldr	r2, [sp, #24]
 8008478:	4413      	add	r3, r2
 800847a:	42bb      	cmp	r3, r7
 800847c:	d3e0      	bcc.n	8008440 <__gethex+0x22c>
 800847e:	4618      	mov	r0, r3
 8008480:	9901      	ldr	r1, [sp, #4]
 8008482:	9307      	str	r3, [sp, #28]
 8008484:	4652      	mov	r2, sl
 8008486:	f001 f927 	bl	80096d8 <strncmp>
 800848a:	9b07      	ldr	r3, [sp, #28]
 800848c:	2800      	cmp	r0, #0
 800848e:	d1d7      	bne.n	8008440 <__gethex+0x22c>
 8008490:	461e      	mov	r6, r3
 8008492:	e78b      	b.n	80083ac <__gethex+0x198>
 8008494:	f04f 0a03 	mov.w	sl, #3
 8008498:	e7b8      	b.n	800840c <__gethex+0x1f8>
 800849a:	da0a      	bge.n	80084b2 <__gethex+0x29e>
 800849c:	1a37      	subs	r7, r6, r0
 800849e:	4621      	mov	r1, r4
 80084a0:	ee18 0a10 	vmov	r0, s16
 80084a4:	463a      	mov	r2, r7
 80084a6:	f000 fc45 	bl	8008d34 <__lshift>
 80084aa:	1bed      	subs	r5, r5, r7
 80084ac:	4604      	mov	r4, r0
 80084ae:	f100 0914 	add.w	r9, r0, #20
 80084b2:	f04f 0a00 	mov.w	sl, #0
 80084b6:	e7ae      	b.n	8008416 <__gethex+0x202>
 80084b8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80084bc:	42a8      	cmp	r0, r5
 80084be:	dd72      	ble.n	80085a6 <__gethex+0x392>
 80084c0:	1b45      	subs	r5, r0, r5
 80084c2:	42ae      	cmp	r6, r5
 80084c4:	dc36      	bgt.n	8008534 <__gethex+0x320>
 80084c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80084ca:	2b02      	cmp	r3, #2
 80084cc:	d02a      	beq.n	8008524 <__gethex+0x310>
 80084ce:	2b03      	cmp	r3, #3
 80084d0:	d02c      	beq.n	800852c <__gethex+0x318>
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d11c      	bne.n	8008510 <__gethex+0x2fc>
 80084d6:	42ae      	cmp	r6, r5
 80084d8:	d11a      	bne.n	8008510 <__gethex+0x2fc>
 80084da:	2e01      	cmp	r6, #1
 80084dc:	d112      	bne.n	8008504 <__gethex+0x2f0>
 80084de:	9a04      	ldr	r2, [sp, #16]
 80084e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80084e4:	6013      	str	r3, [r2, #0]
 80084e6:	2301      	movs	r3, #1
 80084e8:	6123      	str	r3, [r4, #16]
 80084ea:	f8c9 3000 	str.w	r3, [r9]
 80084ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80084f0:	2762      	movs	r7, #98	; 0x62
 80084f2:	601c      	str	r4, [r3, #0]
 80084f4:	e723      	b.n	800833e <__gethex+0x12a>
 80084f6:	bf00      	nop
 80084f8:	0800a5c8 	.word	0x0800a5c8
 80084fc:	0800a550 	.word	0x0800a550
 8008500:	0800a561 	.word	0x0800a561
 8008504:	1e71      	subs	r1, r6, #1
 8008506:	4620      	mov	r0, r4
 8008508:	f000 fe58 	bl	80091bc <__any_on>
 800850c:	2800      	cmp	r0, #0
 800850e:	d1e6      	bne.n	80084de <__gethex+0x2ca>
 8008510:	ee18 0a10 	vmov	r0, s16
 8008514:	4621      	mov	r1, r4
 8008516:	f000 f9f1 	bl	80088fc <_Bfree>
 800851a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800851c:	2300      	movs	r3, #0
 800851e:	6013      	str	r3, [r2, #0]
 8008520:	2750      	movs	r7, #80	; 0x50
 8008522:	e70c      	b.n	800833e <__gethex+0x12a>
 8008524:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008526:	2b00      	cmp	r3, #0
 8008528:	d1f2      	bne.n	8008510 <__gethex+0x2fc>
 800852a:	e7d8      	b.n	80084de <__gethex+0x2ca>
 800852c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1d5      	bne.n	80084de <__gethex+0x2ca>
 8008532:	e7ed      	b.n	8008510 <__gethex+0x2fc>
 8008534:	1e6f      	subs	r7, r5, #1
 8008536:	f1ba 0f00 	cmp.w	sl, #0
 800853a:	d131      	bne.n	80085a0 <__gethex+0x38c>
 800853c:	b127      	cbz	r7, 8008548 <__gethex+0x334>
 800853e:	4639      	mov	r1, r7
 8008540:	4620      	mov	r0, r4
 8008542:	f000 fe3b 	bl	80091bc <__any_on>
 8008546:	4682      	mov	sl, r0
 8008548:	117b      	asrs	r3, r7, #5
 800854a:	2101      	movs	r1, #1
 800854c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008550:	f007 071f 	and.w	r7, r7, #31
 8008554:	fa01 f707 	lsl.w	r7, r1, r7
 8008558:	421f      	tst	r7, r3
 800855a:	4629      	mov	r1, r5
 800855c:	4620      	mov	r0, r4
 800855e:	bf18      	it	ne
 8008560:	f04a 0a02 	orrne.w	sl, sl, #2
 8008564:	1b76      	subs	r6, r6, r5
 8008566:	f7ff fded 	bl	8008144 <rshift>
 800856a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800856e:	2702      	movs	r7, #2
 8008570:	f1ba 0f00 	cmp.w	sl, #0
 8008574:	d048      	beq.n	8008608 <__gethex+0x3f4>
 8008576:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800857a:	2b02      	cmp	r3, #2
 800857c:	d015      	beq.n	80085aa <__gethex+0x396>
 800857e:	2b03      	cmp	r3, #3
 8008580:	d017      	beq.n	80085b2 <__gethex+0x39e>
 8008582:	2b01      	cmp	r3, #1
 8008584:	d109      	bne.n	800859a <__gethex+0x386>
 8008586:	f01a 0f02 	tst.w	sl, #2
 800858a:	d006      	beq.n	800859a <__gethex+0x386>
 800858c:	f8d9 0000 	ldr.w	r0, [r9]
 8008590:	ea4a 0a00 	orr.w	sl, sl, r0
 8008594:	f01a 0f01 	tst.w	sl, #1
 8008598:	d10e      	bne.n	80085b8 <__gethex+0x3a4>
 800859a:	f047 0710 	orr.w	r7, r7, #16
 800859e:	e033      	b.n	8008608 <__gethex+0x3f4>
 80085a0:	f04f 0a01 	mov.w	sl, #1
 80085a4:	e7d0      	b.n	8008548 <__gethex+0x334>
 80085a6:	2701      	movs	r7, #1
 80085a8:	e7e2      	b.n	8008570 <__gethex+0x35c>
 80085aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085ac:	f1c3 0301 	rsb	r3, r3, #1
 80085b0:	9315      	str	r3, [sp, #84]	; 0x54
 80085b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d0f0      	beq.n	800859a <__gethex+0x386>
 80085b8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80085bc:	f104 0314 	add.w	r3, r4, #20
 80085c0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80085c4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80085c8:	f04f 0c00 	mov.w	ip, #0
 80085cc:	4618      	mov	r0, r3
 80085ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80085d2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80085d6:	d01c      	beq.n	8008612 <__gethex+0x3fe>
 80085d8:	3201      	adds	r2, #1
 80085da:	6002      	str	r2, [r0, #0]
 80085dc:	2f02      	cmp	r7, #2
 80085de:	f104 0314 	add.w	r3, r4, #20
 80085e2:	d13f      	bne.n	8008664 <__gethex+0x450>
 80085e4:	f8d8 2000 	ldr.w	r2, [r8]
 80085e8:	3a01      	subs	r2, #1
 80085ea:	42b2      	cmp	r2, r6
 80085ec:	d10a      	bne.n	8008604 <__gethex+0x3f0>
 80085ee:	1171      	asrs	r1, r6, #5
 80085f0:	2201      	movs	r2, #1
 80085f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80085f6:	f006 061f 	and.w	r6, r6, #31
 80085fa:	fa02 f606 	lsl.w	r6, r2, r6
 80085fe:	421e      	tst	r6, r3
 8008600:	bf18      	it	ne
 8008602:	4617      	movne	r7, r2
 8008604:	f047 0720 	orr.w	r7, r7, #32
 8008608:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800860a:	601c      	str	r4, [r3, #0]
 800860c:	9b04      	ldr	r3, [sp, #16]
 800860e:	601d      	str	r5, [r3, #0]
 8008610:	e695      	b.n	800833e <__gethex+0x12a>
 8008612:	4299      	cmp	r1, r3
 8008614:	f843 cc04 	str.w	ip, [r3, #-4]
 8008618:	d8d8      	bhi.n	80085cc <__gethex+0x3b8>
 800861a:	68a3      	ldr	r3, [r4, #8]
 800861c:	459b      	cmp	fp, r3
 800861e:	db19      	blt.n	8008654 <__gethex+0x440>
 8008620:	6861      	ldr	r1, [r4, #4]
 8008622:	ee18 0a10 	vmov	r0, s16
 8008626:	3101      	adds	r1, #1
 8008628:	f000 f928 	bl	800887c <_Balloc>
 800862c:	4681      	mov	r9, r0
 800862e:	b918      	cbnz	r0, 8008638 <__gethex+0x424>
 8008630:	4b1a      	ldr	r3, [pc, #104]	; (800869c <__gethex+0x488>)
 8008632:	4602      	mov	r2, r0
 8008634:	2184      	movs	r1, #132	; 0x84
 8008636:	e6a8      	b.n	800838a <__gethex+0x176>
 8008638:	6922      	ldr	r2, [r4, #16]
 800863a:	3202      	adds	r2, #2
 800863c:	f104 010c 	add.w	r1, r4, #12
 8008640:	0092      	lsls	r2, r2, #2
 8008642:	300c      	adds	r0, #12
 8008644:	f000 f90c 	bl	8008860 <memcpy>
 8008648:	4621      	mov	r1, r4
 800864a:	ee18 0a10 	vmov	r0, s16
 800864e:	f000 f955 	bl	80088fc <_Bfree>
 8008652:	464c      	mov	r4, r9
 8008654:	6923      	ldr	r3, [r4, #16]
 8008656:	1c5a      	adds	r2, r3, #1
 8008658:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800865c:	6122      	str	r2, [r4, #16]
 800865e:	2201      	movs	r2, #1
 8008660:	615a      	str	r2, [r3, #20]
 8008662:	e7bb      	b.n	80085dc <__gethex+0x3c8>
 8008664:	6922      	ldr	r2, [r4, #16]
 8008666:	455a      	cmp	r2, fp
 8008668:	dd0b      	ble.n	8008682 <__gethex+0x46e>
 800866a:	2101      	movs	r1, #1
 800866c:	4620      	mov	r0, r4
 800866e:	f7ff fd69 	bl	8008144 <rshift>
 8008672:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008676:	3501      	adds	r5, #1
 8008678:	42ab      	cmp	r3, r5
 800867a:	f6ff aed0 	blt.w	800841e <__gethex+0x20a>
 800867e:	2701      	movs	r7, #1
 8008680:	e7c0      	b.n	8008604 <__gethex+0x3f0>
 8008682:	f016 061f 	ands.w	r6, r6, #31
 8008686:	d0fa      	beq.n	800867e <__gethex+0x46a>
 8008688:	4453      	add	r3, sl
 800868a:	f1c6 0620 	rsb	r6, r6, #32
 800868e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008692:	f000 f9e5 	bl	8008a60 <__hi0bits>
 8008696:	42b0      	cmp	r0, r6
 8008698:	dbe7      	blt.n	800866a <__gethex+0x456>
 800869a:	e7f0      	b.n	800867e <__gethex+0x46a>
 800869c:	0800a550 	.word	0x0800a550

080086a0 <L_shift>:
 80086a0:	f1c2 0208 	rsb	r2, r2, #8
 80086a4:	0092      	lsls	r2, r2, #2
 80086a6:	b570      	push	{r4, r5, r6, lr}
 80086a8:	f1c2 0620 	rsb	r6, r2, #32
 80086ac:	6843      	ldr	r3, [r0, #4]
 80086ae:	6804      	ldr	r4, [r0, #0]
 80086b0:	fa03 f506 	lsl.w	r5, r3, r6
 80086b4:	432c      	orrs	r4, r5
 80086b6:	40d3      	lsrs	r3, r2
 80086b8:	6004      	str	r4, [r0, #0]
 80086ba:	f840 3f04 	str.w	r3, [r0, #4]!
 80086be:	4288      	cmp	r0, r1
 80086c0:	d3f4      	bcc.n	80086ac <L_shift+0xc>
 80086c2:	bd70      	pop	{r4, r5, r6, pc}

080086c4 <__match>:
 80086c4:	b530      	push	{r4, r5, lr}
 80086c6:	6803      	ldr	r3, [r0, #0]
 80086c8:	3301      	adds	r3, #1
 80086ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086ce:	b914      	cbnz	r4, 80086d6 <__match+0x12>
 80086d0:	6003      	str	r3, [r0, #0]
 80086d2:	2001      	movs	r0, #1
 80086d4:	bd30      	pop	{r4, r5, pc}
 80086d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086da:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80086de:	2d19      	cmp	r5, #25
 80086e0:	bf98      	it	ls
 80086e2:	3220      	addls	r2, #32
 80086e4:	42a2      	cmp	r2, r4
 80086e6:	d0f0      	beq.n	80086ca <__match+0x6>
 80086e8:	2000      	movs	r0, #0
 80086ea:	e7f3      	b.n	80086d4 <__match+0x10>

080086ec <__hexnan>:
 80086ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086f0:	680b      	ldr	r3, [r1, #0]
 80086f2:	115e      	asrs	r6, r3, #5
 80086f4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80086f8:	f013 031f 	ands.w	r3, r3, #31
 80086fc:	b087      	sub	sp, #28
 80086fe:	bf18      	it	ne
 8008700:	3604      	addne	r6, #4
 8008702:	2500      	movs	r5, #0
 8008704:	1f37      	subs	r7, r6, #4
 8008706:	4690      	mov	r8, r2
 8008708:	6802      	ldr	r2, [r0, #0]
 800870a:	9301      	str	r3, [sp, #4]
 800870c:	4682      	mov	sl, r0
 800870e:	f846 5c04 	str.w	r5, [r6, #-4]
 8008712:	46b9      	mov	r9, r7
 8008714:	463c      	mov	r4, r7
 8008716:	9502      	str	r5, [sp, #8]
 8008718:	46ab      	mov	fp, r5
 800871a:	7851      	ldrb	r1, [r2, #1]
 800871c:	1c53      	adds	r3, r2, #1
 800871e:	9303      	str	r3, [sp, #12]
 8008720:	b341      	cbz	r1, 8008774 <__hexnan+0x88>
 8008722:	4608      	mov	r0, r1
 8008724:	9205      	str	r2, [sp, #20]
 8008726:	9104      	str	r1, [sp, #16]
 8008728:	f7ff fd5e 	bl	80081e8 <__hexdig_fun>
 800872c:	2800      	cmp	r0, #0
 800872e:	d14f      	bne.n	80087d0 <__hexnan+0xe4>
 8008730:	9904      	ldr	r1, [sp, #16]
 8008732:	9a05      	ldr	r2, [sp, #20]
 8008734:	2920      	cmp	r1, #32
 8008736:	d818      	bhi.n	800876a <__hexnan+0x7e>
 8008738:	9b02      	ldr	r3, [sp, #8]
 800873a:	459b      	cmp	fp, r3
 800873c:	dd13      	ble.n	8008766 <__hexnan+0x7a>
 800873e:	454c      	cmp	r4, r9
 8008740:	d206      	bcs.n	8008750 <__hexnan+0x64>
 8008742:	2d07      	cmp	r5, #7
 8008744:	dc04      	bgt.n	8008750 <__hexnan+0x64>
 8008746:	462a      	mov	r2, r5
 8008748:	4649      	mov	r1, r9
 800874a:	4620      	mov	r0, r4
 800874c:	f7ff ffa8 	bl	80086a0 <L_shift>
 8008750:	4544      	cmp	r4, r8
 8008752:	d950      	bls.n	80087f6 <__hexnan+0x10a>
 8008754:	2300      	movs	r3, #0
 8008756:	f1a4 0904 	sub.w	r9, r4, #4
 800875a:	f844 3c04 	str.w	r3, [r4, #-4]
 800875e:	f8cd b008 	str.w	fp, [sp, #8]
 8008762:	464c      	mov	r4, r9
 8008764:	461d      	mov	r5, r3
 8008766:	9a03      	ldr	r2, [sp, #12]
 8008768:	e7d7      	b.n	800871a <__hexnan+0x2e>
 800876a:	2929      	cmp	r1, #41	; 0x29
 800876c:	d156      	bne.n	800881c <__hexnan+0x130>
 800876e:	3202      	adds	r2, #2
 8008770:	f8ca 2000 	str.w	r2, [sl]
 8008774:	f1bb 0f00 	cmp.w	fp, #0
 8008778:	d050      	beq.n	800881c <__hexnan+0x130>
 800877a:	454c      	cmp	r4, r9
 800877c:	d206      	bcs.n	800878c <__hexnan+0xa0>
 800877e:	2d07      	cmp	r5, #7
 8008780:	dc04      	bgt.n	800878c <__hexnan+0xa0>
 8008782:	462a      	mov	r2, r5
 8008784:	4649      	mov	r1, r9
 8008786:	4620      	mov	r0, r4
 8008788:	f7ff ff8a 	bl	80086a0 <L_shift>
 800878c:	4544      	cmp	r4, r8
 800878e:	d934      	bls.n	80087fa <__hexnan+0x10e>
 8008790:	f1a8 0204 	sub.w	r2, r8, #4
 8008794:	4623      	mov	r3, r4
 8008796:	f853 1b04 	ldr.w	r1, [r3], #4
 800879a:	f842 1f04 	str.w	r1, [r2, #4]!
 800879e:	429f      	cmp	r7, r3
 80087a0:	d2f9      	bcs.n	8008796 <__hexnan+0xaa>
 80087a2:	1b3b      	subs	r3, r7, r4
 80087a4:	f023 0303 	bic.w	r3, r3, #3
 80087a8:	3304      	adds	r3, #4
 80087aa:	3401      	adds	r4, #1
 80087ac:	3e03      	subs	r6, #3
 80087ae:	42b4      	cmp	r4, r6
 80087b0:	bf88      	it	hi
 80087b2:	2304      	movhi	r3, #4
 80087b4:	4443      	add	r3, r8
 80087b6:	2200      	movs	r2, #0
 80087b8:	f843 2b04 	str.w	r2, [r3], #4
 80087bc:	429f      	cmp	r7, r3
 80087be:	d2fb      	bcs.n	80087b8 <__hexnan+0xcc>
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	b91b      	cbnz	r3, 80087cc <__hexnan+0xe0>
 80087c4:	4547      	cmp	r7, r8
 80087c6:	d127      	bne.n	8008818 <__hexnan+0x12c>
 80087c8:	2301      	movs	r3, #1
 80087ca:	603b      	str	r3, [r7, #0]
 80087cc:	2005      	movs	r0, #5
 80087ce:	e026      	b.n	800881e <__hexnan+0x132>
 80087d0:	3501      	adds	r5, #1
 80087d2:	2d08      	cmp	r5, #8
 80087d4:	f10b 0b01 	add.w	fp, fp, #1
 80087d8:	dd06      	ble.n	80087e8 <__hexnan+0xfc>
 80087da:	4544      	cmp	r4, r8
 80087dc:	d9c3      	bls.n	8008766 <__hexnan+0x7a>
 80087de:	2300      	movs	r3, #0
 80087e0:	f844 3c04 	str.w	r3, [r4, #-4]
 80087e4:	2501      	movs	r5, #1
 80087e6:	3c04      	subs	r4, #4
 80087e8:	6822      	ldr	r2, [r4, #0]
 80087ea:	f000 000f 	and.w	r0, r0, #15
 80087ee:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80087f2:	6022      	str	r2, [r4, #0]
 80087f4:	e7b7      	b.n	8008766 <__hexnan+0x7a>
 80087f6:	2508      	movs	r5, #8
 80087f8:	e7b5      	b.n	8008766 <__hexnan+0x7a>
 80087fa:	9b01      	ldr	r3, [sp, #4]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d0df      	beq.n	80087c0 <__hexnan+0xd4>
 8008800:	f04f 32ff 	mov.w	r2, #4294967295
 8008804:	f1c3 0320 	rsb	r3, r3, #32
 8008808:	fa22 f303 	lsr.w	r3, r2, r3
 800880c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008810:	401a      	ands	r2, r3
 8008812:	f846 2c04 	str.w	r2, [r6, #-4]
 8008816:	e7d3      	b.n	80087c0 <__hexnan+0xd4>
 8008818:	3f04      	subs	r7, #4
 800881a:	e7d1      	b.n	80087c0 <__hexnan+0xd4>
 800881c:	2004      	movs	r0, #4
 800881e:	b007      	add	sp, #28
 8008820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008824 <_localeconv_r>:
 8008824:	4800      	ldr	r0, [pc, #0]	; (8008828 <_localeconv_r+0x4>)
 8008826:	4770      	bx	lr
 8008828:	20000170 	.word	0x20000170

0800882c <malloc>:
 800882c:	4b02      	ldr	r3, [pc, #8]	; (8008838 <malloc+0xc>)
 800882e:	4601      	mov	r1, r0
 8008830:	6818      	ldr	r0, [r3, #0]
 8008832:	f000 bd67 	b.w	8009304 <_malloc_r>
 8008836:	bf00      	nop
 8008838:	20000018 	.word	0x20000018

0800883c <__ascii_mbtowc>:
 800883c:	b082      	sub	sp, #8
 800883e:	b901      	cbnz	r1, 8008842 <__ascii_mbtowc+0x6>
 8008840:	a901      	add	r1, sp, #4
 8008842:	b142      	cbz	r2, 8008856 <__ascii_mbtowc+0x1a>
 8008844:	b14b      	cbz	r3, 800885a <__ascii_mbtowc+0x1e>
 8008846:	7813      	ldrb	r3, [r2, #0]
 8008848:	600b      	str	r3, [r1, #0]
 800884a:	7812      	ldrb	r2, [r2, #0]
 800884c:	1e10      	subs	r0, r2, #0
 800884e:	bf18      	it	ne
 8008850:	2001      	movne	r0, #1
 8008852:	b002      	add	sp, #8
 8008854:	4770      	bx	lr
 8008856:	4610      	mov	r0, r2
 8008858:	e7fb      	b.n	8008852 <__ascii_mbtowc+0x16>
 800885a:	f06f 0001 	mvn.w	r0, #1
 800885e:	e7f8      	b.n	8008852 <__ascii_mbtowc+0x16>

08008860 <memcpy>:
 8008860:	440a      	add	r2, r1
 8008862:	4291      	cmp	r1, r2
 8008864:	f100 33ff 	add.w	r3, r0, #4294967295
 8008868:	d100      	bne.n	800886c <memcpy+0xc>
 800886a:	4770      	bx	lr
 800886c:	b510      	push	{r4, lr}
 800886e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008872:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008876:	4291      	cmp	r1, r2
 8008878:	d1f9      	bne.n	800886e <memcpy+0xe>
 800887a:	bd10      	pop	{r4, pc}

0800887c <_Balloc>:
 800887c:	b570      	push	{r4, r5, r6, lr}
 800887e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008880:	4604      	mov	r4, r0
 8008882:	460d      	mov	r5, r1
 8008884:	b976      	cbnz	r6, 80088a4 <_Balloc+0x28>
 8008886:	2010      	movs	r0, #16
 8008888:	f7ff ffd0 	bl	800882c <malloc>
 800888c:	4602      	mov	r2, r0
 800888e:	6260      	str	r0, [r4, #36]	; 0x24
 8008890:	b920      	cbnz	r0, 800889c <_Balloc+0x20>
 8008892:	4b18      	ldr	r3, [pc, #96]	; (80088f4 <_Balloc+0x78>)
 8008894:	4818      	ldr	r0, [pc, #96]	; (80088f8 <_Balloc+0x7c>)
 8008896:	2166      	movs	r1, #102	; 0x66
 8008898:	f000 ff40 	bl	800971c <__assert_func>
 800889c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088a0:	6006      	str	r6, [r0, #0]
 80088a2:	60c6      	str	r6, [r0, #12]
 80088a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80088a6:	68f3      	ldr	r3, [r6, #12]
 80088a8:	b183      	cbz	r3, 80088cc <_Balloc+0x50>
 80088aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088ac:	68db      	ldr	r3, [r3, #12]
 80088ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80088b2:	b9b8      	cbnz	r0, 80088e4 <_Balloc+0x68>
 80088b4:	2101      	movs	r1, #1
 80088b6:	fa01 f605 	lsl.w	r6, r1, r5
 80088ba:	1d72      	adds	r2, r6, #5
 80088bc:	0092      	lsls	r2, r2, #2
 80088be:	4620      	mov	r0, r4
 80088c0:	f000 fc9d 	bl	80091fe <_calloc_r>
 80088c4:	b160      	cbz	r0, 80088e0 <_Balloc+0x64>
 80088c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80088ca:	e00e      	b.n	80088ea <_Balloc+0x6e>
 80088cc:	2221      	movs	r2, #33	; 0x21
 80088ce:	2104      	movs	r1, #4
 80088d0:	4620      	mov	r0, r4
 80088d2:	f000 fc94 	bl	80091fe <_calloc_r>
 80088d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088d8:	60f0      	str	r0, [r6, #12]
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d1e4      	bne.n	80088aa <_Balloc+0x2e>
 80088e0:	2000      	movs	r0, #0
 80088e2:	bd70      	pop	{r4, r5, r6, pc}
 80088e4:	6802      	ldr	r2, [r0, #0]
 80088e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80088ea:	2300      	movs	r3, #0
 80088ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80088f0:	e7f7      	b.n	80088e2 <_Balloc+0x66>
 80088f2:	bf00      	nop
 80088f4:	0800a4de 	.word	0x0800a4de
 80088f8:	0800a5dc 	.word	0x0800a5dc

080088fc <_Bfree>:
 80088fc:	b570      	push	{r4, r5, r6, lr}
 80088fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008900:	4605      	mov	r5, r0
 8008902:	460c      	mov	r4, r1
 8008904:	b976      	cbnz	r6, 8008924 <_Bfree+0x28>
 8008906:	2010      	movs	r0, #16
 8008908:	f7ff ff90 	bl	800882c <malloc>
 800890c:	4602      	mov	r2, r0
 800890e:	6268      	str	r0, [r5, #36]	; 0x24
 8008910:	b920      	cbnz	r0, 800891c <_Bfree+0x20>
 8008912:	4b09      	ldr	r3, [pc, #36]	; (8008938 <_Bfree+0x3c>)
 8008914:	4809      	ldr	r0, [pc, #36]	; (800893c <_Bfree+0x40>)
 8008916:	218a      	movs	r1, #138	; 0x8a
 8008918:	f000 ff00 	bl	800971c <__assert_func>
 800891c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008920:	6006      	str	r6, [r0, #0]
 8008922:	60c6      	str	r6, [r0, #12]
 8008924:	b13c      	cbz	r4, 8008936 <_Bfree+0x3a>
 8008926:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008928:	6862      	ldr	r2, [r4, #4]
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008930:	6021      	str	r1, [r4, #0]
 8008932:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008936:	bd70      	pop	{r4, r5, r6, pc}
 8008938:	0800a4de 	.word	0x0800a4de
 800893c:	0800a5dc 	.word	0x0800a5dc

08008940 <__multadd>:
 8008940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008944:	690d      	ldr	r5, [r1, #16]
 8008946:	4607      	mov	r7, r0
 8008948:	460c      	mov	r4, r1
 800894a:	461e      	mov	r6, r3
 800894c:	f101 0c14 	add.w	ip, r1, #20
 8008950:	2000      	movs	r0, #0
 8008952:	f8dc 3000 	ldr.w	r3, [ip]
 8008956:	b299      	uxth	r1, r3
 8008958:	fb02 6101 	mla	r1, r2, r1, r6
 800895c:	0c1e      	lsrs	r6, r3, #16
 800895e:	0c0b      	lsrs	r3, r1, #16
 8008960:	fb02 3306 	mla	r3, r2, r6, r3
 8008964:	b289      	uxth	r1, r1
 8008966:	3001      	adds	r0, #1
 8008968:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800896c:	4285      	cmp	r5, r0
 800896e:	f84c 1b04 	str.w	r1, [ip], #4
 8008972:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008976:	dcec      	bgt.n	8008952 <__multadd+0x12>
 8008978:	b30e      	cbz	r6, 80089be <__multadd+0x7e>
 800897a:	68a3      	ldr	r3, [r4, #8]
 800897c:	42ab      	cmp	r3, r5
 800897e:	dc19      	bgt.n	80089b4 <__multadd+0x74>
 8008980:	6861      	ldr	r1, [r4, #4]
 8008982:	4638      	mov	r0, r7
 8008984:	3101      	adds	r1, #1
 8008986:	f7ff ff79 	bl	800887c <_Balloc>
 800898a:	4680      	mov	r8, r0
 800898c:	b928      	cbnz	r0, 800899a <__multadd+0x5a>
 800898e:	4602      	mov	r2, r0
 8008990:	4b0c      	ldr	r3, [pc, #48]	; (80089c4 <__multadd+0x84>)
 8008992:	480d      	ldr	r0, [pc, #52]	; (80089c8 <__multadd+0x88>)
 8008994:	21b5      	movs	r1, #181	; 0xb5
 8008996:	f000 fec1 	bl	800971c <__assert_func>
 800899a:	6922      	ldr	r2, [r4, #16]
 800899c:	3202      	adds	r2, #2
 800899e:	f104 010c 	add.w	r1, r4, #12
 80089a2:	0092      	lsls	r2, r2, #2
 80089a4:	300c      	adds	r0, #12
 80089a6:	f7ff ff5b 	bl	8008860 <memcpy>
 80089aa:	4621      	mov	r1, r4
 80089ac:	4638      	mov	r0, r7
 80089ae:	f7ff ffa5 	bl	80088fc <_Bfree>
 80089b2:	4644      	mov	r4, r8
 80089b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80089b8:	3501      	adds	r5, #1
 80089ba:	615e      	str	r6, [r3, #20]
 80089bc:	6125      	str	r5, [r4, #16]
 80089be:	4620      	mov	r0, r4
 80089c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089c4:	0800a550 	.word	0x0800a550
 80089c8:	0800a5dc 	.word	0x0800a5dc

080089cc <__s2b>:
 80089cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089d0:	460c      	mov	r4, r1
 80089d2:	4615      	mov	r5, r2
 80089d4:	461f      	mov	r7, r3
 80089d6:	2209      	movs	r2, #9
 80089d8:	3308      	adds	r3, #8
 80089da:	4606      	mov	r6, r0
 80089dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80089e0:	2100      	movs	r1, #0
 80089e2:	2201      	movs	r2, #1
 80089e4:	429a      	cmp	r2, r3
 80089e6:	db09      	blt.n	80089fc <__s2b+0x30>
 80089e8:	4630      	mov	r0, r6
 80089ea:	f7ff ff47 	bl	800887c <_Balloc>
 80089ee:	b940      	cbnz	r0, 8008a02 <__s2b+0x36>
 80089f0:	4602      	mov	r2, r0
 80089f2:	4b19      	ldr	r3, [pc, #100]	; (8008a58 <__s2b+0x8c>)
 80089f4:	4819      	ldr	r0, [pc, #100]	; (8008a5c <__s2b+0x90>)
 80089f6:	21ce      	movs	r1, #206	; 0xce
 80089f8:	f000 fe90 	bl	800971c <__assert_func>
 80089fc:	0052      	lsls	r2, r2, #1
 80089fe:	3101      	adds	r1, #1
 8008a00:	e7f0      	b.n	80089e4 <__s2b+0x18>
 8008a02:	9b08      	ldr	r3, [sp, #32]
 8008a04:	6143      	str	r3, [r0, #20]
 8008a06:	2d09      	cmp	r5, #9
 8008a08:	f04f 0301 	mov.w	r3, #1
 8008a0c:	6103      	str	r3, [r0, #16]
 8008a0e:	dd16      	ble.n	8008a3e <__s2b+0x72>
 8008a10:	f104 0909 	add.w	r9, r4, #9
 8008a14:	46c8      	mov	r8, r9
 8008a16:	442c      	add	r4, r5
 8008a18:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008a1c:	4601      	mov	r1, r0
 8008a1e:	3b30      	subs	r3, #48	; 0x30
 8008a20:	220a      	movs	r2, #10
 8008a22:	4630      	mov	r0, r6
 8008a24:	f7ff ff8c 	bl	8008940 <__multadd>
 8008a28:	45a0      	cmp	r8, r4
 8008a2a:	d1f5      	bne.n	8008a18 <__s2b+0x4c>
 8008a2c:	f1a5 0408 	sub.w	r4, r5, #8
 8008a30:	444c      	add	r4, r9
 8008a32:	1b2d      	subs	r5, r5, r4
 8008a34:	1963      	adds	r3, r4, r5
 8008a36:	42bb      	cmp	r3, r7
 8008a38:	db04      	blt.n	8008a44 <__s2b+0x78>
 8008a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a3e:	340a      	adds	r4, #10
 8008a40:	2509      	movs	r5, #9
 8008a42:	e7f6      	b.n	8008a32 <__s2b+0x66>
 8008a44:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008a48:	4601      	mov	r1, r0
 8008a4a:	3b30      	subs	r3, #48	; 0x30
 8008a4c:	220a      	movs	r2, #10
 8008a4e:	4630      	mov	r0, r6
 8008a50:	f7ff ff76 	bl	8008940 <__multadd>
 8008a54:	e7ee      	b.n	8008a34 <__s2b+0x68>
 8008a56:	bf00      	nop
 8008a58:	0800a550 	.word	0x0800a550
 8008a5c:	0800a5dc 	.word	0x0800a5dc

08008a60 <__hi0bits>:
 8008a60:	0c03      	lsrs	r3, r0, #16
 8008a62:	041b      	lsls	r3, r3, #16
 8008a64:	b9d3      	cbnz	r3, 8008a9c <__hi0bits+0x3c>
 8008a66:	0400      	lsls	r0, r0, #16
 8008a68:	2310      	movs	r3, #16
 8008a6a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008a6e:	bf04      	itt	eq
 8008a70:	0200      	lsleq	r0, r0, #8
 8008a72:	3308      	addeq	r3, #8
 8008a74:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008a78:	bf04      	itt	eq
 8008a7a:	0100      	lsleq	r0, r0, #4
 8008a7c:	3304      	addeq	r3, #4
 8008a7e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008a82:	bf04      	itt	eq
 8008a84:	0080      	lsleq	r0, r0, #2
 8008a86:	3302      	addeq	r3, #2
 8008a88:	2800      	cmp	r0, #0
 8008a8a:	db05      	blt.n	8008a98 <__hi0bits+0x38>
 8008a8c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008a90:	f103 0301 	add.w	r3, r3, #1
 8008a94:	bf08      	it	eq
 8008a96:	2320      	moveq	r3, #32
 8008a98:	4618      	mov	r0, r3
 8008a9a:	4770      	bx	lr
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	e7e4      	b.n	8008a6a <__hi0bits+0xa>

08008aa0 <__lo0bits>:
 8008aa0:	6803      	ldr	r3, [r0, #0]
 8008aa2:	f013 0207 	ands.w	r2, r3, #7
 8008aa6:	4601      	mov	r1, r0
 8008aa8:	d00b      	beq.n	8008ac2 <__lo0bits+0x22>
 8008aaa:	07da      	lsls	r2, r3, #31
 8008aac:	d423      	bmi.n	8008af6 <__lo0bits+0x56>
 8008aae:	0798      	lsls	r0, r3, #30
 8008ab0:	bf49      	itett	mi
 8008ab2:	085b      	lsrmi	r3, r3, #1
 8008ab4:	089b      	lsrpl	r3, r3, #2
 8008ab6:	2001      	movmi	r0, #1
 8008ab8:	600b      	strmi	r3, [r1, #0]
 8008aba:	bf5c      	itt	pl
 8008abc:	600b      	strpl	r3, [r1, #0]
 8008abe:	2002      	movpl	r0, #2
 8008ac0:	4770      	bx	lr
 8008ac2:	b298      	uxth	r0, r3
 8008ac4:	b9a8      	cbnz	r0, 8008af2 <__lo0bits+0x52>
 8008ac6:	0c1b      	lsrs	r3, r3, #16
 8008ac8:	2010      	movs	r0, #16
 8008aca:	b2da      	uxtb	r2, r3
 8008acc:	b90a      	cbnz	r2, 8008ad2 <__lo0bits+0x32>
 8008ace:	3008      	adds	r0, #8
 8008ad0:	0a1b      	lsrs	r3, r3, #8
 8008ad2:	071a      	lsls	r2, r3, #28
 8008ad4:	bf04      	itt	eq
 8008ad6:	091b      	lsreq	r3, r3, #4
 8008ad8:	3004      	addeq	r0, #4
 8008ada:	079a      	lsls	r2, r3, #30
 8008adc:	bf04      	itt	eq
 8008ade:	089b      	lsreq	r3, r3, #2
 8008ae0:	3002      	addeq	r0, #2
 8008ae2:	07da      	lsls	r2, r3, #31
 8008ae4:	d403      	bmi.n	8008aee <__lo0bits+0x4e>
 8008ae6:	085b      	lsrs	r3, r3, #1
 8008ae8:	f100 0001 	add.w	r0, r0, #1
 8008aec:	d005      	beq.n	8008afa <__lo0bits+0x5a>
 8008aee:	600b      	str	r3, [r1, #0]
 8008af0:	4770      	bx	lr
 8008af2:	4610      	mov	r0, r2
 8008af4:	e7e9      	b.n	8008aca <__lo0bits+0x2a>
 8008af6:	2000      	movs	r0, #0
 8008af8:	4770      	bx	lr
 8008afa:	2020      	movs	r0, #32
 8008afc:	4770      	bx	lr
	...

08008b00 <__i2b>:
 8008b00:	b510      	push	{r4, lr}
 8008b02:	460c      	mov	r4, r1
 8008b04:	2101      	movs	r1, #1
 8008b06:	f7ff feb9 	bl	800887c <_Balloc>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	b928      	cbnz	r0, 8008b1a <__i2b+0x1a>
 8008b0e:	4b05      	ldr	r3, [pc, #20]	; (8008b24 <__i2b+0x24>)
 8008b10:	4805      	ldr	r0, [pc, #20]	; (8008b28 <__i2b+0x28>)
 8008b12:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008b16:	f000 fe01 	bl	800971c <__assert_func>
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	6144      	str	r4, [r0, #20]
 8008b1e:	6103      	str	r3, [r0, #16]
 8008b20:	bd10      	pop	{r4, pc}
 8008b22:	bf00      	nop
 8008b24:	0800a550 	.word	0x0800a550
 8008b28:	0800a5dc 	.word	0x0800a5dc

08008b2c <__multiply>:
 8008b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b30:	4691      	mov	r9, r2
 8008b32:	690a      	ldr	r2, [r1, #16]
 8008b34:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	bfb8      	it	lt
 8008b3c:	460b      	movlt	r3, r1
 8008b3e:	460c      	mov	r4, r1
 8008b40:	bfbc      	itt	lt
 8008b42:	464c      	movlt	r4, r9
 8008b44:	4699      	movlt	r9, r3
 8008b46:	6927      	ldr	r7, [r4, #16]
 8008b48:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008b4c:	68a3      	ldr	r3, [r4, #8]
 8008b4e:	6861      	ldr	r1, [r4, #4]
 8008b50:	eb07 060a 	add.w	r6, r7, sl
 8008b54:	42b3      	cmp	r3, r6
 8008b56:	b085      	sub	sp, #20
 8008b58:	bfb8      	it	lt
 8008b5a:	3101      	addlt	r1, #1
 8008b5c:	f7ff fe8e 	bl	800887c <_Balloc>
 8008b60:	b930      	cbnz	r0, 8008b70 <__multiply+0x44>
 8008b62:	4602      	mov	r2, r0
 8008b64:	4b44      	ldr	r3, [pc, #272]	; (8008c78 <__multiply+0x14c>)
 8008b66:	4845      	ldr	r0, [pc, #276]	; (8008c7c <__multiply+0x150>)
 8008b68:	f240 115d 	movw	r1, #349	; 0x15d
 8008b6c:	f000 fdd6 	bl	800971c <__assert_func>
 8008b70:	f100 0514 	add.w	r5, r0, #20
 8008b74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008b78:	462b      	mov	r3, r5
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	4543      	cmp	r3, r8
 8008b7e:	d321      	bcc.n	8008bc4 <__multiply+0x98>
 8008b80:	f104 0314 	add.w	r3, r4, #20
 8008b84:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008b88:	f109 0314 	add.w	r3, r9, #20
 8008b8c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008b90:	9202      	str	r2, [sp, #8]
 8008b92:	1b3a      	subs	r2, r7, r4
 8008b94:	3a15      	subs	r2, #21
 8008b96:	f022 0203 	bic.w	r2, r2, #3
 8008b9a:	3204      	adds	r2, #4
 8008b9c:	f104 0115 	add.w	r1, r4, #21
 8008ba0:	428f      	cmp	r7, r1
 8008ba2:	bf38      	it	cc
 8008ba4:	2204      	movcc	r2, #4
 8008ba6:	9201      	str	r2, [sp, #4]
 8008ba8:	9a02      	ldr	r2, [sp, #8]
 8008baa:	9303      	str	r3, [sp, #12]
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d80c      	bhi.n	8008bca <__multiply+0x9e>
 8008bb0:	2e00      	cmp	r6, #0
 8008bb2:	dd03      	ble.n	8008bbc <__multiply+0x90>
 8008bb4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d05a      	beq.n	8008c72 <__multiply+0x146>
 8008bbc:	6106      	str	r6, [r0, #16]
 8008bbe:	b005      	add	sp, #20
 8008bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bc4:	f843 2b04 	str.w	r2, [r3], #4
 8008bc8:	e7d8      	b.n	8008b7c <__multiply+0x50>
 8008bca:	f8b3 a000 	ldrh.w	sl, [r3]
 8008bce:	f1ba 0f00 	cmp.w	sl, #0
 8008bd2:	d024      	beq.n	8008c1e <__multiply+0xf2>
 8008bd4:	f104 0e14 	add.w	lr, r4, #20
 8008bd8:	46a9      	mov	r9, r5
 8008bda:	f04f 0c00 	mov.w	ip, #0
 8008bde:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008be2:	f8d9 1000 	ldr.w	r1, [r9]
 8008be6:	fa1f fb82 	uxth.w	fp, r2
 8008bea:	b289      	uxth	r1, r1
 8008bec:	fb0a 110b 	mla	r1, sl, fp, r1
 8008bf0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008bf4:	f8d9 2000 	ldr.w	r2, [r9]
 8008bf8:	4461      	add	r1, ip
 8008bfa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008bfe:	fb0a c20b 	mla	r2, sl, fp, ip
 8008c02:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008c06:	b289      	uxth	r1, r1
 8008c08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008c0c:	4577      	cmp	r7, lr
 8008c0e:	f849 1b04 	str.w	r1, [r9], #4
 8008c12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008c16:	d8e2      	bhi.n	8008bde <__multiply+0xb2>
 8008c18:	9a01      	ldr	r2, [sp, #4]
 8008c1a:	f845 c002 	str.w	ip, [r5, r2]
 8008c1e:	9a03      	ldr	r2, [sp, #12]
 8008c20:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008c24:	3304      	adds	r3, #4
 8008c26:	f1b9 0f00 	cmp.w	r9, #0
 8008c2a:	d020      	beq.n	8008c6e <__multiply+0x142>
 8008c2c:	6829      	ldr	r1, [r5, #0]
 8008c2e:	f104 0c14 	add.w	ip, r4, #20
 8008c32:	46ae      	mov	lr, r5
 8008c34:	f04f 0a00 	mov.w	sl, #0
 8008c38:	f8bc b000 	ldrh.w	fp, [ip]
 8008c3c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008c40:	fb09 220b 	mla	r2, r9, fp, r2
 8008c44:	4492      	add	sl, r2
 8008c46:	b289      	uxth	r1, r1
 8008c48:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008c4c:	f84e 1b04 	str.w	r1, [lr], #4
 8008c50:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008c54:	f8be 1000 	ldrh.w	r1, [lr]
 8008c58:	0c12      	lsrs	r2, r2, #16
 8008c5a:	fb09 1102 	mla	r1, r9, r2, r1
 8008c5e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008c62:	4567      	cmp	r7, ip
 8008c64:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008c68:	d8e6      	bhi.n	8008c38 <__multiply+0x10c>
 8008c6a:	9a01      	ldr	r2, [sp, #4]
 8008c6c:	50a9      	str	r1, [r5, r2]
 8008c6e:	3504      	adds	r5, #4
 8008c70:	e79a      	b.n	8008ba8 <__multiply+0x7c>
 8008c72:	3e01      	subs	r6, #1
 8008c74:	e79c      	b.n	8008bb0 <__multiply+0x84>
 8008c76:	bf00      	nop
 8008c78:	0800a550 	.word	0x0800a550
 8008c7c:	0800a5dc 	.word	0x0800a5dc

08008c80 <__pow5mult>:
 8008c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c84:	4615      	mov	r5, r2
 8008c86:	f012 0203 	ands.w	r2, r2, #3
 8008c8a:	4606      	mov	r6, r0
 8008c8c:	460f      	mov	r7, r1
 8008c8e:	d007      	beq.n	8008ca0 <__pow5mult+0x20>
 8008c90:	4c25      	ldr	r4, [pc, #148]	; (8008d28 <__pow5mult+0xa8>)
 8008c92:	3a01      	subs	r2, #1
 8008c94:	2300      	movs	r3, #0
 8008c96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c9a:	f7ff fe51 	bl	8008940 <__multadd>
 8008c9e:	4607      	mov	r7, r0
 8008ca0:	10ad      	asrs	r5, r5, #2
 8008ca2:	d03d      	beq.n	8008d20 <__pow5mult+0xa0>
 8008ca4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008ca6:	b97c      	cbnz	r4, 8008cc8 <__pow5mult+0x48>
 8008ca8:	2010      	movs	r0, #16
 8008caa:	f7ff fdbf 	bl	800882c <malloc>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	6270      	str	r0, [r6, #36]	; 0x24
 8008cb2:	b928      	cbnz	r0, 8008cc0 <__pow5mult+0x40>
 8008cb4:	4b1d      	ldr	r3, [pc, #116]	; (8008d2c <__pow5mult+0xac>)
 8008cb6:	481e      	ldr	r0, [pc, #120]	; (8008d30 <__pow5mult+0xb0>)
 8008cb8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008cbc:	f000 fd2e 	bl	800971c <__assert_func>
 8008cc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008cc4:	6004      	str	r4, [r0, #0]
 8008cc6:	60c4      	str	r4, [r0, #12]
 8008cc8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008ccc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008cd0:	b94c      	cbnz	r4, 8008ce6 <__pow5mult+0x66>
 8008cd2:	f240 2171 	movw	r1, #625	; 0x271
 8008cd6:	4630      	mov	r0, r6
 8008cd8:	f7ff ff12 	bl	8008b00 <__i2b>
 8008cdc:	2300      	movs	r3, #0
 8008cde:	f8c8 0008 	str.w	r0, [r8, #8]
 8008ce2:	4604      	mov	r4, r0
 8008ce4:	6003      	str	r3, [r0, #0]
 8008ce6:	f04f 0900 	mov.w	r9, #0
 8008cea:	07eb      	lsls	r3, r5, #31
 8008cec:	d50a      	bpl.n	8008d04 <__pow5mult+0x84>
 8008cee:	4639      	mov	r1, r7
 8008cf0:	4622      	mov	r2, r4
 8008cf2:	4630      	mov	r0, r6
 8008cf4:	f7ff ff1a 	bl	8008b2c <__multiply>
 8008cf8:	4639      	mov	r1, r7
 8008cfa:	4680      	mov	r8, r0
 8008cfc:	4630      	mov	r0, r6
 8008cfe:	f7ff fdfd 	bl	80088fc <_Bfree>
 8008d02:	4647      	mov	r7, r8
 8008d04:	106d      	asrs	r5, r5, #1
 8008d06:	d00b      	beq.n	8008d20 <__pow5mult+0xa0>
 8008d08:	6820      	ldr	r0, [r4, #0]
 8008d0a:	b938      	cbnz	r0, 8008d1c <__pow5mult+0x9c>
 8008d0c:	4622      	mov	r2, r4
 8008d0e:	4621      	mov	r1, r4
 8008d10:	4630      	mov	r0, r6
 8008d12:	f7ff ff0b 	bl	8008b2c <__multiply>
 8008d16:	6020      	str	r0, [r4, #0]
 8008d18:	f8c0 9000 	str.w	r9, [r0]
 8008d1c:	4604      	mov	r4, r0
 8008d1e:	e7e4      	b.n	8008cea <__pow5mult+0x6a>
 8008d20:	4638      	mov	r0, r7
 8008d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d26:	bf00      	nop
 8008d28:	0800a728 	.word	0x0800a728
 8008d2c:	0800a4de 	.word	0x0800a4de
 8008d30:	0800a5dc 	.word	0x0800a5dc

08008d34 <__lshift>:
 8008d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d38:	460c      	mov	r4, r1
 8008d3a:	6849      	ldr	r1, [r1, #4]
 8008d3c:	6923      	ldr	r3, [r4, #16]
 8008d3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008d42:	68a3      	ldr	r3, [r4, #8]
 8008d44:	4607      	mov	r7, r0
 8008d46:	4691      	mov	r9, r2
 8008d48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d4c:	f108 0601 	add.w	r6, r8, #1
 8008d50:	42b3      	cmp	r3, r6
 8008d52:	db0b      	blt.n	8008d6c <__lshift+0x38>
 8008d54:	4638      	mov	r0, r7
 8008d56:	f7ff fd91 	bl	800887c <_Balloc>
 8008d5a:	4605      	mov	r5, r0
 8008d5c:	b948      	cbnz	r0, 8008d72 <__lshift+0x3e>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	4b2a      	ldr	r3, [pc, #168]	; (8008e0c <__lshift+0xd8>)
 8008d62:	482b      	ldr	r0, [pc, #172]	; (8008e10 <__lshift+0xdc>)
 8008d64:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008d68:	f000 fcd8 	bl	800971c <__assert_func>
 8008d6c:	3101      	adds	r1, #1
 8008d6e:	005b      	lsls	r3, r3, #1
 8008d70:	e7ee      	b.n	8008d50 <__lshift+0x1c>
 8008d72:	2300      	movs	r3, #0
 8008d74:	f100 0114 	add.w	r1, r0, #20
 8008d78:	f100 0210 	add.w	r2, r0, #16
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	4553      	cmp	r3, sl
 8008d80:	db37      	blt.n	8008df2 <__lshift+0xbe>
 8008d82:	6920      	ldr	r0, [r4, #16]
 8008d84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d88:	f104 0314 	add.w	r3, r4, #20
 8008d8c:	f019 091f 	ands.w	r9, r9, #31
 8008d90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d94:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008d98:	d02f      	beq.n	8008dfa <__lshift+0xc6>
 8008d9a:	f1c9 0e20 	rsb	lr, r9, #32
 8008d9e:	468a      	mov	sl, r1
 8008da0:	f04f 0c00 	mov.w	ip, #0
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	fa02 f209 	lsl.w	r2, r2, r9
 8008daa:	ea42 020c 	orr.w	r2, r2, ip
 8008dae:	f84a 2b04 	str.w	r2, [sl], #4
 8008db2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008db6:	4298      	cmp	r0, r3
 8008db8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008dbc:	d8f2      	bhi.n	8008da4 <__lshift+0x70>
 8008dbe:	1b03      	subs	r3, r0, r4
 8008dc0:	3b15      	subs	r3, #21
 8008dc2:	f023 0303 	bic.w	r3, r3, #3
 8008dc6:	3304      	adds	r3, #4
 8008dc8:	f104 0215 	add.w	r2, r4, #21
 8008dcc:	4290      	cmp	r0, r2
 8008dce:	bf38      	it	cc
 8008dd0:	2304      	movcc	r3, #4
 8008dd2:	f841 c003 	str.w	ip, [r1, r3]
 8008dd6:	f1bc 0f00 	cmp.w	ip, #0
 8008dda:	d001      	beq.n	8008de0 <__lshift+0xac>
 8008ddc:	f108 0602 	add.w	r6, r8, #2
 8008de0:	3e01      	subs	r6, #1
 8008de2:	4638      	mov	r0, r7
 8008de4:	612e      	str	r6, [r5, #16]
 8008de6:	4621      	mov	r1, r4
 8008de8:	f7ff fd88 	bl	80088fc <_Bfree>
 8008dec:	4628      	mov	r0, r5
 8008dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008df2:	f842 0f04 	str.w	r0, [r2, #4]!
 8008df6:	3301      	adds	r3, #1
 8008df8:	e7c1      	b.n	8008d7e <__lshift+0x4a>
 8008dfa:	3904      	subs	r1, #4
 8008dfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e00:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e04:	4298      	cmp	r0, r3
 8008e06:	d8f9      	bhi.n	8008dfc <__lshift+0xc8>
 8008e08:	e7ea      	b.n	8008de0 <__lshift+0xac>
 8008e0a:	bf00      	nop
 8008e0c:	0800a550 	.word	0x0800a550
 8008e10:	0800a5dc 	.word	0x0800a5dc

08008e14 <__mcmp>:
 8008e14:	b530      	push	{r4, r5, lr}
 8008e16:	6902      	ldr	r2, [r0, #16]
 8008e18:	690c      	ldr	r4, [r1, #16]
 8008e1a:	1b12      	subs	r2, r2, r4
 8008e1c:	d10e      	bne.n	8008e3c <__mcmp+0x28>
 8008e1e:	f100 0314 	add.w	r3, r0, #20
 8008e22:	3114      	adds	r1, #20
 8008e24:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008e28:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008e2c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008e30:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008e34:	42a5      	cmp	r5, r4
 8008e36:	d003      	beq.n	8008e40 <__mcmp+0x2c>
 8008e38:	d305      	bcc.n	8008e46 <__mcmp+0x32>
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	4610      	mov	r0, r2
 8008e3e:	bd30      	pop	{r4, r5, pc}
 8008e40:	4283      	cmp	r3, r0
 8008e42:	d3f3      	bcc.n	8008e2c <__mcmp+0x18>
 8008e44:	e7fa      	b.n	8008e3c <__mcmp+0x28>
 8008e46:	f04f 32ff 	mov.w	r2, #4294967295
 8008e4a:	e7f7      	b.n	8008e3c <__mcmp+0x28>

08008e4c <__mdiff>:
 8008e4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e50:	460c      	mov	r4, r1
 8008e52:	4606      	mov	r6, r0
 8008e54:	4611      	mov	r1, r2
 8008e56:	4620      	mov	r0, r4
 8008e58:	4690      	mov	r8, r2
 8008e5a:	f7ff ffdb 	bl	8008e14 <__mcmp>
 8008e5e:	1e05      	subs	r5, r0, #0
 8008e60:	d110      	bne.n	8008e84 <__mdiff+0x38>
 8008e62:	4629      	mov	r1, r5
 8008e64:	4630      	mov	r0, r6
 8008e66:	f7ff fd09 	bl	800887c <_Balloc>
 8008e6a:	b930      	cbnz	r0, 8008e7a <__mdiff+0x2e>
 8008e6c:	4b3a      	ldr	r3, [pc, #232]	; (8008f58 <__mdiff+0x10c>)
 8008e6e:	4602      	mov	r2, r0
 8008e70:	f240 2132 	movw	r1, #562	; 0x232
 8008e74:	4839      	ldr	r0, [pc, #228]	; (8008f5c <__mdiff+0x110>)
 8008e76:	f000 fc51 	bl	800971c <__assert_func>
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008e80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e84:	bfa4      	itt	ge
 8008e86:	4643      	movge	r3, r8
 8008e88:	46a0      	movge	r8, r4
 8008e8a:	4630      	mov	r0, r6
 8008e8c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008e90:	bfa6      	itte	ge
 8008e92:	461c      	movge	r4, r3
 8008e94:	2500      	movge	r5, #0
 8008e96:	2501      	movlt	r5, #1
 8008e98:	f7ff fcf0 	bl	800887c <_Balloc>
 8008e9c:	b920      	cbnz	r0, 8008ea8 <__mdiff+0x5c>
 8008e9e:	4b2e      	ldr	r3, [pc, #184]	; (8008f58 <__mdiff+0x10c>)
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008ea6:	e7e5      	b.n	8008e74 <__mdiff+0x28>
 8008ea8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008eac:	6926      	ldr	r6, [r4, #16]
 8008eae:	60c5      	str	r5, [r0, #12]
 8008eb0:	f104 0914 	add.w	r9, r4, #20
 8008eb4:	f108 0514 	add.w	r5, r8, #20
 8008eb8:	f100 0e14 	add.w	lr, r0, #20
 8008ebc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008ec0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008ec4:	f108 0210 	add.w	r2, r8, #16
 8008ec8:	46f2      	mov	sl, lr
 8008eca:	2100      	movs	r1, #0
 8008ecc:	f859 3b04 	ldr.w	r3, [r9], #4
 8008ed0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008ed4:	fa1f f883 	uxth.w	r8, r3
 8008ed8:	fa11 f18b 	uxtah	r1, r1, fp
 8008edc:	0c1b      	lsrs	r3, r3, #16
 8008ede:	eba1 0808 	sub.w	r8, r1, r8
 8008ee2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008ee6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008eea:	fa1f f888 	uxth.w	r8, r8
 8008eee:	1419      	asrs	r1, r3, #16
 8008ef0:	454e      	cmp	r6, r9
 8008ef2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008ef6:	f84a 3b04 	str.w	r3, [sl], #4
 8008efa:	d8e7      	bhi.n	8008ecc <__mdiff+0x80>
 8008efc:	1b33      	subs	r3, r6, r4
 8008efe:	3b15      	subs	r3, #21
 8008f00:	f023 0303 	bic.w	r3, r3, #3
 8008f04:	3304      	adds	r3, #4
 8008f06:	3415      	adds	r4, #21
 8008f08:	42a6      	cmp	r6, r4
 8008f0a:	bf38      	it	cc
 8008f0c:	2304      	movcc	r3, #4
 8008f0e:	441d      	add	r5, r3
 8008f10:	4473      	add	r3, lr
 8008f12:	469e      	mov	lr, r3
 8008f14:	462e      	mov	r6, r5
 8008f16:	4566      	cmp	r6, ip
 8008f18:	d30e      	bcc.n	8008f38 <__mdiff+0xec>
 8008f1a:	f10c 0203 	add.w	r2, ip, #3
 8008f1e:	1b52      	subs	r2, r2, r5
 8008f20:	f022 0203 	bic.w	r2, r2, #3
 8008f24:	3d03      	subs	r5, #3
 8008f26:	45ac      	cmp	ip, r5
 8008f28:	bf38      	it	cc
 8008f2a:	2200      	movcc	r2, #0
 8008f2c:	441a      	add	r2, r3
 8008f2e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008f32:	b17b      	cbz	r3, 8008f54 <__mdiff+0x108>
 8008f34:	6107      	str	r7, [r0, #16]
 8008f36:	e7a3      	b.n	8008e80 <__mdiff+0x34>
 8008f38:	f856 8b04 	ldr.w	r8, [r6], #4
 8008f3c:	fa11 f288 	uxtah	r2, r1, r8
 8008f40:	1414      	asrs	r4, r2, #16
 8008f42:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008f46:	b292      	uxth	r2, r2
 8008f48:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008f4c:	f84e 2b04 	str.w	r2, [lr], #4
 8008f50:	1421      	asrs	r1, r4, #16
 8008f52:	e7e0      	b.n	8008f16 <__mdiff+0xca>
 8008f54:	3f01      	subs	r7, #1
 8008f56:	e7ea      	b.n	8008f2e <__mdiff+0xe2>
 8008f58:	0800a550 	.word	0x0800a550
 8008f5c:	0800a5dc 	.word	0x0800a5dc

08008f60 <__ulp>:
 8008f60:	b082      	sub	sp, #8
 8008f62:	ed8d 0b00 	vstr	d0, [sp]
 8008f66:	9b01      	ldr	r3, [sp, #4]
 8008f68:	4912      	ldr	r1, [pc, #72]	; (8008fb4 <__ulp+0x54>)
 8008f6a:	4019      	ands	r1, r3
 8008f6c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008f70:	2900      	cmp	r1, #0
 8008f72:	dd05      	ble.n	8008f80 <__ulp+0x20>
 8008f74:	2200      	movs	r2, #0
 8008f76:	460b      	mov	r3, r1
 8008f78:	ec43 2b10 	vmov	d0, r2, r3
 8008f7c:	b002      	add	sp, #8
 8008f7e:	4770      	bx	lr
 8008f80:	4249      	negs	r1, r1
 8008f82:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008f86:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008f8a:	f04f 0200 	mov.w	r2, #0
 8008f8e:	f04f 0300 	mov.w	r3, #0
 8008f92:	da04      	bge.n	8008f9e <__ulp+0x3e>
 8008f94:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008f98:	fa41 f300 	asr.w	r3, r1, r0
 8008f9c:	e7ec      	b.n	8008f78 <__ulp+0x18>
 8008f9e:	f1a0 0114 	sub.w	r1, r0, #20
 8008fa2:	291e      	cmp	r1, #30
 8008fa4:	bfda      	itte	le
 8008fa6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008faa:	fa20 f101 	lsrle.w	r1, r0, r1
 8008fae:	2101      	movgt	r1, #1
 8008fb0:	460a      	mov	r2, r1
 8008fb2:	e7e1      	b.n	8008f78 <__ulp+0x18>
 8008fb4:	7ff00000 	.word	0x7ff00000

08008fb8 <__b2d>:
 8008fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fba:	6905      	ldr	r5, [r0, #16]
 8008fbc:	f100 0714 	add.w	r7, r0, #20
 8008fc0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008fc4:	1f2e      	subs	r6, r5, #4
 8008fc6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008fca:	4620      	mov	r0, r4
 8008fcc:	f7ff fd48 	bl	8008a60 <__hi0bits>
 8008fd0:	f1c0 0320 	rsb	r3, r0, #32
 8008fd4:	280a      	cmp	r0, #10
 8008fd6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009054 <__b2d+0x9c>
 8008fda:	600b      	str	r3, [r1, #0]
 8008fdc:	dc14      	bgt.n	8009008 <__b2d+0x50>
 8008fde:	f1c0 0e0b 	rsb	lr, r0, #11
 8008fe2:	fa24 f10e 	lsr.w	r1, r4, lr
 8008fe6:	42b7      	cmp	r7, r6
 8008fe8:	ea41 030c 	orr.w	r3, r1, ip
 8008fec:	bf34      	ite	cc
 8008fee:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008ff2:	2100      	movcs	r1, #0
 8008ff4:	3015      	adds	r0, #21
 8008ff6:	fa04 f000 	lsl.w	r0, r4, r0
 8008ffa:	fa21 f10e 	lsr.w	r1, r1, lr
 8008ffe:	ea40 0201 	orr.w	r2, r0, r1
 8009002:	ec43 2b10 	vmov	d0, r2, r3
 8009006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009008:	42b7      	cmp	r7, r6
 800900a:	bf3a      	itte	cc
 800900c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009010:	f1a5 0608 	subcc.w	r6, r5, #8
 8009014:	2100      	movcs	r1, #0
 8009016:	380b      	subs	r0, #11
 8009018:	d017      	beq.n	800904a <__b2d+0x92>
 800901a:	f1c0 0c20 	rsb	ip, r0, #32
 800901e:	fa04 f500 	lsl.w	r5, r4, r0
 8009022:	42be      	cmp	r6, r7
 8009024:	fa21 f40c 	lsr.w	r4, r1, ip
 8009028:	ea45 0504 	orr.w	r5, r5, r4
 800902c:	bf8c      	ite	hi
 800902e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009032:	2400      	movls	r4, #0
 8009034:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009038:	fa01 f000 	lsl.w	r0, r1, r0
 800903c:	fa24 f40c 	lsr.w	r4, r4, ip
 8009040:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009044:	ea40 0204 	orr.w	r2, r0, r4
 8009048:	e7db      	b.n	8009002 <__b2d+0x4a>
 800904a:	ea44 030c 	orr.w	r3, r4, ip
 800904e:	460a      	mov	r2, r1
 8009050:	e7d7      	b.n	8009002 <__b2d+0x4a>
 8009052:	bf00      	nop
 8009054:	3ff00000 	.word	0x3ff00000

08009058 <__d2b>:
 8009058:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800905c:	4689      	mov	r9, r1
 800905e:	2101      	movs	r1, #1
 8009060:	ec57 6b10 	vmov	r6, r7, d0
 8009064:	4690      	mov	r8, r2
 8009066:	f7ff fc09 	bl	800887c <_Balloc>
 800906a:	4604      	mov	r4, r0
 800906c:	b930      	cbnz	r0, 800907c <__d2b+0x24>
 800906e:	4602      	mov	r2, r0
 8009070:	4b25      	ldr	r3, [pc, #148]	; (8009108 <__d2b+0xb0>)
 8009072:	4826      	ldr	r0, [pc, #152]	; (800910c <__d2b+0xb4>)
 8009074:	f240 310a 	movw	r1, #778	; 0x30a
 8009078:	f000 fb50 	bl	800971c <__assert_func>
 800907c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009080:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009084:	bb35      	cbnz	r5, 80090d4 <__d2b+0x7c>
 8009086:	2e00      	cmp	r6, #0
 8009088:	9301      	str	r3, [sp, #4]
 800908a:	d028      	beq.n	80090de <__d2b+0x86>
 800908c:	4668      	mov	r0, sp
 800908e:	9600      	str	r6, [sp, #0]
 8009090:	f7ff fd06 	bl	8008aa0 <__lo0bits>
 8009094:	9900      	ldr	r1, [sp, #0]
 8009096:	b300      	cbz	r0, 80090da <__d2b+0x82>
 8009098:	9a01      	ldr	r2, [sp, #4]
 800909a:	f1c0 0320 	rsb	r3, r0, #32
 800909e:	fa02 f303 	lsl.w	r3, r2, r3
 80090a2:	430b      	orrs	r3, r1
 80090a4:	40c2      	lsrs	r2, r0
 80090a6:	6163      	str	r3, [r4, #20]
 80090a8:	9201      	str	r2, [sp, #4]
 80090aa:	9b01      	ldr	r3, [sp, #4]
 80090ac:	61a3      	str	r3, [r4, #24]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	bf14      	ite	ne
 80090b2:	2202      	movne	r2, #2
 80090b4:	2201      	moveq	r2, #1
 80090b6:	6122      	str	r2, [r4, #16]
 80090b8:	b1d5      	cbz	r5, 80090f0 <__d2b+0x98>
 80090ba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80090be:	4405      	add	r5, r0
 80090c0:	f8c9 5000 	str.w	r5, [r9]
 80090c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80090c8:	f8c8 0000 	str.w	r0, [r8]
 80090cc:	4620      	mov	r0, r4
 80090ce:	b003      	add	sp, #12
 80090d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090d8:	e7d5      	b.n	8009086 <__d2b+0x2e>
 80090da:	6161      	str	r1, [r4, #20]
 80090dc:	e7e5      	b.n	80090aa <__d2b+0x52>
 80090de:	a801      	add	r0, sp, #4
 80090e0:	f7ff fcde 	bl	8008aa0 <__lo0bits>
 80090e4:	9b01      	ldr	r3, [sp, #4]
 80090e6:	6163      	str	r3, [r4, #20]
 80090e8:	2201      	movs	r2, #1
 80090ea:	6122      	str	r2, [r4, #16]
 80090ec:	3020      	adds	r0, #32
 80090ee:	e7e3      	b.n	80090b8 <__d2b+0x60>
 80090f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80090f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80090f8:	f8c9 0000 	str.w	r0, [r9]
 80090fc:	6918      	ldr	r0, [r3, #16]
 80090fe:	f7ff fcaf 	bl	8008a60 <__hi0bits>
 8009102:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009106:	e7df      	b.n	80090c8 <__d2b+0x70>
 8009108:	0800a550 	.word	0x0800a550
 800910c:	0800a5dc 	.word	0x0800a5dc

08009110 <__ratio>:
 8009110:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009114:	4688      	mov	r8, r1
 8009116:	4669      	mov	r1, sp
 8009118:	4681      	mov	r9, r0
 800911a:	f7ff ff4d 	bl	8008fb8 <__b2d>
 800911e:	a901      	add	r1, sp, #4
 8009120:	4640      	mov	r0, r8
 8009122:	ec55 4b10 	vmov	r4, r5, d0
 8009126:	f7ff ff47 	bl	8008fb8 <__b2d>
 800912a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800912e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009132:	eba3 0c02 	sub.w	ip, r3, r2
 8009136:	e9dd 3200 	ldrd	r3, r2, [sp]
 800913a:	1a9b      	subs	r3, r3, r2
 800913c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009140:	ec51 0b10 	vmov	r0, r1, d0
 8009144:	2b00      	cmp	r3, #0
 8009146:	bfd6      	itet	le
 8009148:	460a      	movle	r2, r1
 800914a:	462a      	movgt	r2, r5
 800914c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009150:	468b      	mov	fp, r1
 8009152:	462f      	mov	r7, r5
 8009154:	bfd4      	ite	le
 8009156:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800915a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800915e:	4620      	mov	r0, r4
 8009160:	ee10 2a10 	vmov	r2, s0
 8009164:	465b      	mov	r3, fp
 8009166:	4639      	mov	r1, r7
 8009168:	f7f7 fb90 	bl	800088c <__aeabi_ddiv>
 800916c:	ec41 0b10 	vmov	d0, r0, r1
 8009170:	b003      	add	sp, #12
 8009172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009176 <__copybits>:
 8009176:	3901      	subs	r1, #1
 8009178:	b570      	push	{r4, r5, r6, lr}
 800917a:	1149      	asrs	r1, r1, #5
 800917c:	6914      	ldr	r4, [r2, #16]
 800917e:	3101      	adds	r1, #1
 8009180:	f102 0314 	add.w	r3, r2, #20
 8009184:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009188:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800918c:	1f05      	subs	r5, r0, #4
 800918e:	42a3      	cmp	r3, r4
 8009190:	d30c      	bcc.n	80091ac <__copybits+0x36>
 8009192:	1aa3      	subs	r3, r4, r2
 8009194:	3b11      	subs	r3, #17
 8009196:	f023 0303 	bic.w	r3, r3, #3
 800919a:	3211      	adds	r2, #17
 800919c:	42a2      	cmp	r2, r4
 800919e:	bf88      	it	hi
 80091a0:	2300      	movhi	r3, #0
 80091a2:	4418      	add	r0, r3
 80091a4:	2300      	movs	r3, #0
 80091a6:	4288      	cmp	r0, r1
 80091a8:	d305      	bcc.n	80091b6 <__copybits+0x40>
 80091aa:	bd70      	pop	{r4, r5, r6, pc}
 80091ac:	f853 6b04 	ldr.w	r6, [r3], #4
 80091b0:	f845 6f04 	str.w	r6, [r5, #4]!
 80091b4:	e7eb      	b.n	800918e <__copybits+0x18>
 80091b6:	f840 3b04 	str.w	r3, [r0], #4
 80091ba:	e7f4      	b.n	80091a6 <__copybits+0x30>

080091bc <__any_on>:
 80091bc:	f100 0214 	add.w	r2, r0, #20
 80091c0:	6900      	ldr	r0, [r0, #16]
 80091c2:	114b      	asrs	r3, r1, #5
 80091c4:	4298      	cmp	r0, r3
 80091c6:	b510      	push	{r4, lr}
 80091c8:	db11      	blt.n	80091ee <__any_on+0x32>
 80091ca:	dd0a      	ble.n	80091e2 <__any_on+0x26>
 80091cc:	f011 011f 	ands.w	r1, r1, #31
 80091d0:	d007      	beq.n	80091e2 <__any_on+0x26>
 80091d2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80091d6:	fa24 f001 	lsr.w	r0, r4, r1
 80091da:	fa00 f101 	lsl.w	r1, r0, r1
 80091de:	428c      	cmp	r4, r1
 80091e0:	d10b      	bne.n	80091fa <__any_on+0x3e>
 80091e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d803      	bhi.n	80091f2 <__any_on+0x36>
 80091ea:	2000      	movs	r0, #0
 80091ec:	bd10      	pop	{r4, pc}
 80091ee:	4603      	mov	r3, r0
 80091f0:	e7f7      	b.n	80091e2 <__any_on+0x26>
 80091f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80091f6:	2900      	cmp	r1, #0
 80091f8:	d0f5      	beq.n	80091e6 <__any_on+0x2a>
 80091fa:	2001      	movs	r0, #1
 80091fc:	e7f6      	b.n	80091ec <__any_on+0x30>

080091fe <_calloc_r>:
 80091fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009200:	fba1 2402 	umull	r2, r4, r1, r2
 8009204:	b94c      	cbnz	r4, 800921a <_calloc_r+0x1c>
 8009206:	4611      	mov	r1, r2
 8009208:	9201      	str	r2, [sp, #4]
 800920a:	f000 f87b 	bl	8009304 <_malloc_r>
 800920e:	9a01      	ldr	r2, [sp, #4]
 8009210:	4605      	mov	r5, r0
 8009212:	b930      	cbnz	r0, 8009222 <_calloc_r+0x24>
 8009214:	4628      	mov	r0, r5
 8009216:	b003      	add	sp, #12
 8009218:	bd30      	pop	{r4, r5, pc}
 800921a:	220c      	movs	r2, #12
 800921c:	6002      	str	r2, [r0, #0]
 800921e:	2500      	movs	r5, #0
 8009220:	e7f8      	b.n	8009214 <_calloc_r+0x16>
 8009222:	4621      	mov	r1, r4
 8009224:	f7fc fbc0 	bl	80059a8 <memset>
 8009228:	e7f4      	b.n	8009214 <_calloc_r+0x16>
	...

0800922c <_free_r>:
 800922c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800922e:	2900      	cmp	r1, #0
 8009230:	d044      	beq.n	80092bc <_free_r+0x90>
 8009232:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009236:	9001      	str	r0, [sp, #4]
 8009238:	2b00      	cmp	r3, #0
 800923a:	f1a1 0404 	sub.w	r4, r1, #4
 800923e:	bfb8      	it	lt
 8009240:	18e4      	addlt	r4, r4, r3
 8009242:	f000 fab5 	bl	80097b0 <__malloc_lock>
 8009246:	4a1e      	ldr	r2, [pc, #120]	; (80092c0 <_free_r+0x94>)
 8009248:	9801      	ldr	r0, [sp, #4]
 800924a:	6813      	ldr	r3, [r2, #0]
 800924c:	b933      	cbnz	r3, 800925c <_free_r+0x30>
 800924e:	6063      	str	r3, [r4, #4]
 8009250:	6014      	str	r4, [r2, #0]
 8009252:	b003      	add	sp, #12
 8009254:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009258:	f000 bab0 	b.w	80097bc <__malloc_unlock>
 800925c:	42a3      	cmp	r3, r4
 800925e:	d908      	bls.n	8009272 <_free_r+0x46>
 8009260:	6825      	ldr	r5, [r4, #0]
 8009262:	1961      	adds	r1, r4, r5
 8009264:	428b      	cmp	r3, r1
 8009266:	bf01      	itttt	eq
 8009268:	6819      	ldreq	r1, [r3, #0]
 800926a:	685b      	ldreq	r3, [r3, #4]
 800926c:	1949      	addeq	r1, r1, r5
 800926e:	6021      	streq	r1, [r4, #0]
 8009270:	e7ed      	b.n	800924e <_free_r+0x22>
 8009272:	461a      	mov	r2, r3
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	b10b      	cbz	r3, 800927c <_free_r+0x50>
 8009278:	42a3      	cmp	r3, r4
 800927a:	d9fa      	bls.n	8009272 <_free_r+0x46>
 800927c:	6811      	ldr	r1, [r2, #0]
 800927e:	1855      	adds	r5, r2, r1
 8009280:	42a5      	cmp	r5, r4
 8009282:	d10b      	bne.n	800929c <_free_r+0x70>
 8009284:	6824      	ldr	r4, [r4, #0]
 8009286:	4421      	add	r1, r4
 8009288:	1854      	adds	r4, r2, r1
 800928a:	42a3      	cmp	r3, r4
 800928c:	6011      	str	r1, [r2, #0]
 800928e:	d1e0      	bne.n	8009252 <_free_r+0x26>
 8009290:	681c      	ldr	r4, [r3, #0]
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	6053      	str	r3, [r2, #4]
 8009296:	4421      	add	r1, r4
 8009298:	6011      	str	r1, [r2, #0]
 800929a:	e7da      	b.n	8009252 <_free_r+0x26>
 800929c:	d902      	bls.n	80092a4 <_free_r+0x78>
 800929e:	230c      	movs	r3, #12
 80092a0:	6003      	str	r3, [r0, #0]
 80092a2:	e7d6      	b.n	8009252 <_free_r+0x26>
 80092a4:	6825      	ldr	r5, [r4, #0]
 80092a6:	1961      	adds	r1, r4, r5
 80092a8:	428b      	cmp	r3, r1
 80092aa:	bf04      	itt	eq
 80092ac:	6819      	ldreq	r1, [r3, #0]
 80092ae:	685b      	ldreq	r3, [r3, #4]
 80092b0:	6063      	str	r3, [r4, #4]
 80092b2:	bf04      	itt	eq
 80092b4:	1949      	addeq	r1, r1, r5
 80092b6:	6021      	streq	r1, [r4, #0]
 80092b8:	6054      	str	r4, [r2, #4]
 80092ba:	e7ca      	b.n	8009252 <_free_r+0x26>
 80092bc:	b003      	add	sp, #12
 80092be:	bd30      	pop	{r4, r5, pc}
 80092c0:	20000370 	.word	0x20000370

080092c4 <sbrk_aligned>:
 80092c4:	b570      	push	{r4, r5, r6, lr}
 80092c6:	4e0e      	ldr	r6, [pc, #56]	; (8009300 <sbrk_aligned+0x3c>)
 80092c8:	460c      	mov	r4, r1
 80092ca:	6831      	ldr	r1, [r6, #0]
 80092cc:	4605      	mov	r5, r0
 80092ce:	b911      	cbnz	r1, 80092d6 <sbrk_aligned+0x12>
 80092d0:	f000 f9f2 	bl	80096b8 <_sbrk_r>
 80092d4:	6030      	str	r0, [r6, #0]
 80092d6:	4621      	mov	r1, r4
 80092d8:	4628      	mov	r0, r5
 80092da:	f000 f9ed 	bl	80096b8 <_sbrk_r>
 80092de:	1c43      	adds	r3, r0, #1
 80092e0:	d00a      	beq.n	80092f8 <sbrk_aligned+0x34>
 80092e2:	1cc4      	adds	r4, r0, #3
 80092e4:	f024 0403 	bic.w	r4, r4, #3
 80092e8:	42a0      	cmp	r0, r4
 80092ea:	d007      	beq.n	80092fc <sbrk_aligned+0x38>
 80092ec:	1a21      	subs	r1, r4, r0
 80092ee:	4628      	mov	r0, r5
 80092f0:	f000 f9e2 	bl	80096b8 <_sbrk_r>
 80092f4:	3001      	adds	r0, #1
 80092f6:	d101      	bne.n	80092fc <sbrk_aligned+0x38>
 80092f8:	f04f 34ff 	mov.w	r4, #4294967295
 80092fc:	4620      	mov	r0, r4
 80092fe:	bd70      	pop	{r4, r5, r6, pc}
 8009300:	20000374 	.word	0x20000374

08009304 <_malloc_r>:
 8009304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009308:	1ccd      	adds	r5, r1, #3
 800930a:	f025 0503 	bic.w	r5, r5, #3
 800930e:	3508      	adds	r5, #8
 8009310:	2d0c      	cmp	r5, #12
 8009312:	bf38      	it	cc
 8009314:	250c      	movcc	r5, #12
 8009316:	2d00      	cmp	r5, #0
 8009318:	4607      	mov	r7, r0
 800931a:	db01      	blt.n	8009320 <_malloc_r+0x1c>
 800931c:	42a9      	cmp	r1, r5
 800931e:	d905      	bls.n	800932c <_malloc_r+0x28>
 8009320:	230c      	movs	r3, #12
 8009322:	603b      	str	r3, [r7, #0]
 8009324:	2600      	movs	r6, #0
 8009326:	4630      	mov	r0, r6
 8009328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800932c:	4e2e      	ldr	r6, [pc, #184]	; (80093e8 <_malloc_r+0xe4>)
 800932e:	f000 fa3f 	bl	80097b0 <__malloc_lock>
 8009332:	6833      	ldr	r3, [r6, #0]
 8009334:	461c      	mov	r4, r3
 8009336:	bb34      	cbnz	r4, 8009386 <_malloc_r+0x82>
 8009338:	4629      	mov	r1, r5
 800933a:	4638      	mov	r0, r7
 800933c:	f7ff ffc2 	bl	80092c4 <sbrk_aligned>
 8009340:	1c43      	adds	r3, r0, #1
 8009342:	4604      	mov	r4, r0
 8009344:	d14d      	bne.n	80093e2 <_malloc_r+0xde>
 8009346:	6834      	ldr	r4, [r6, #0]
 8009348:	4626      	mov	r6, r4
 800934a:	2e00      	cmp	r6, #0
 800934c:	d140      	bne.n	80093d0 <_malloc_r+0xcc>
 800934e:	6823      	ldr	r3, [r4, #0]
 8009350:	4631      	mov	r1, r6
 8009352:	4638      	mov	r0, r7
 8009354:	eb04 0803 	add.w	r8, r4, r3
 8009358:	f000 f9ae 	bl	80096b8 <_sbrk_r>
 800935c:	4580      	cmp	r8, r0
 800935e:	d13a      	bne.n	80093d6 <_malloc_r+0xd2>
 8009360:	6821      	ldr	r1, [r4, #0]
 8009362:	3503      	adds	r5, #3
 8009364:	1a6d      	subs	r5, r5, r1
 8009366:	f025 0503 	bic.w	r5, r5, #3
 800936a:	3508      	adds	r5, #8
 800936c:	2d0c      	cmp	r5, #12
 800936e:	bf38      	it	cc
 8009370:	250c      	movcc	r5, #12
 8009372:	4629      	mov	r1, r5
 8009374:	4638      	mov	r0, r7
 8009376:	f7ff ffa5 	bl	80092c4 <sbrk_aligned>
 800937a:	3001      	adds	r0, #1
 800937c:	d02b      	beq.n	80093d6 <_malloc_r+0xd2>
 800937e:	6823      	ldr	r3, [r4, #0]
 8009380:	442b      	add	r3, r5
 8009382:	6023      	str	r3, [r4, #0]
 8009384:	e00e      	b.n	80093a4 <_malloc_r+0xa0>
 8009386:	6822      	ldr	r2, [r4, #0]
 8009388:	1b52      	subs	r2, r2, r5
 800938a:	d41e      	bmi.n	80093ca <_malloc_r+0xc6>
 800938c:	2a0b      	cmp	r2, #11
 800938e:	d916      	bls.n	80093be <_malloc_r+0xba>
 8009390:	1961      	adds	r1, r4, r5
 8009392:	42a3      	cmp	r3, r4
 8009394:	6025      	str	r5, [r4, #0]
 8009396:	bf18      	it	ne
 8009398:	6059      	strne	r1, [r3, #4]
 800939a:	6863      	ldr	r3, [r4, #4]
 800939c:	bf08      	it	eq
 800939e:	6031      	streq	r1, [r6, #0]
 80093a0:	5162      	str	r2, [r4, r5]
 80093a2:	604b      	str	r3, [r1, #4]
 80093a4:	4638      	mov	r0, r7
 80093a6:	f104 060b 	add.w	r6, r4, #11
 80093aa:	f000 fa07 	bl	80097bc <__malloc_unlock>
 80093ae:	f026 0607 	bic.w	r6, r6, #7
 80093b2:	1d23      	adds	r3, r4, #4
 80093b4:	1af2      	subs	r2, r6, r3
 80093b6:	d0b6      	beq.n	8009326 <_malloc_r+0x22>
 80093b8:	1b9b      	subs	r3, r3, r6
 80093ba:	50a3      	str	r3, [r4, r2]
 80093bc:	e7b3      	b.n	8009326 <_malloc_r+0x22>
 80093be:	6862      	ldr	r2, [r4, #4]
 80093c0:	42a3      	cmp	r3, r4
 80093c2:	bf0c      	ite	eq
 80093c4:	6032      	streq	r2, [r6, #0]
 80093c6:	605a      	strne	r2, [r3, #4]
 80093c8:	e7ec      	b.n	80093a4 <_malloc_r+0xa0>
 80093ca:	4623      	mov	r3, r4
 80093cc:	6864      	ldr	r4, [r4, #4]
 80093ce:	e7b2      	b.n	8009336 <_malloc_r+0x32>
 80093d0:	4634      	mov	r4, r6
 80093d2:	6876      	ldr	r6, [r6, #4]
 80093d4:	e7b9      	b.n	800934a <_malloc_r+0x46>
 80093d6:	230c      	movs	r3, #12
 80093d8:	603b      	str	r3, [r7, #0]
 80093da:	4638      	mov	r0, r7
 80093dc:	f000 f9ee 	bl	80097bc <__malloc_unlock>
 80093e0:	e7a1      	b.n	8009326 <_malloc_r+0x22>
 80093e2:	6025      	str	r5, [r4, #0]
 80093e4:	e7de      	b.n	80093a4 <_malloc_r+0xa0>
 80093e6:	bf00      	nop
 80093e8:	20000370 	.word	0x20000370

080093ec <__ssputs_r>:
 80093ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093f0:	688e      	ldr	r6, [r1, #8]
 80093f2:	429e      	cmp	r6, r3
 80093f4:	4682      	mov	sl, r0
 80093f6:	460c      	mov	r4, r1
 80093f8:	4690      	mov	r8, r2
 80093fa:	461f      	mov	r7, r3
 80093fc:	d838      	bhi.n	8009470 <__ssputs_r+0x84>
 80093fe:	898a      	ldrh	r2, [r1, #12]
 8009400:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009404:	d032      	beq.n	800946c <__ssputs_r+0x80>
 8009406:	6825      	ldr	r5, [r4, #0]
 8009408:	6909      	ldr	r1, [r1, #16]
 800940a:	eba5 0901 	sub.w	r9, r5, r1
 800940e:	6965      	ldr	r5, [r4, #20]
 8009410:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009414:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009418:	3301      	adds	r3, #1
 800941a:	444b      	add	r3, r9
 800941c:	106d      	asrs	r5, r5, #1
 800941e:	429d      	cmp	r5, r3
 8009420:	bf38      	it	cc
 8009422:	461d      	movcc	r5, r3
 8009424:	0553      	lsls	r3, r2, #21
 8009426:	d531      	bpl.n	800948c <__ssputs_r+0xa0>
 8009428:	4629      	mov	r1, r5
 800942a:	f7ff ff6b 	bl	8009304 <_malloc_r>
 800942e:	4606      	mov	r6, r0
 8009430:	b950      	cbnz	r0, 8009448 <__ssputs_r+0x5c>
 8009432:	230c      	movs	r3, #12
 8009434:	f8ca 3000 	str.w	r3, [sl]
 8009438:	89a3      	ldrh	r3, [r4, #12]
 800943a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800943e:	81a3      	strh	r3, [r4, #12]
 8009440:	f04f 30ff 	mov.w	r0, #4294967295
 8009444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009448:	6921      	ldr	r1, [r4, #16]
 800944a:	464a      	mov	r2, r9
 800944c:	f7ff fa08 	bl	8008860 <memcpy>
 8009450:	89a3      	ldrh	r3, [r4, #12]
 8009452:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800945a:	81a3      	strh	r3, [r4, #12]
 800945c:	6126      	str	r6, [r4, #16]
 800945e:	6165      	str	r5, [r4, #20]
 8009460:	444e      	add	r6, r9
 8009462:	eba5 0509 	sub.w	r5, r5, r9
 8009466:	6026      	str	r6, [r4, #0]
 8009468:	60a5      	str	r5, [r4, #8]
 800946a:	463e      	mov	r6, r7
 800946c:	42be      	cmp	r6, r7
 800946e:	d900      	bls.n	8009472 <__ssputs_r+0x86>
 8009470:	463e      	mov	r6, r7
 8009472:	6820      	ldr	r0, [r4, #0]
 8009474:	4632      	mov	r2, r6
 8009476:	4641      	mov	r1, r8
 8009478:	f000 f980 	bl	800977c <memmove>
 800947c:	68a3      	ldr	r3, [r4, #8]
 800947e:	1b9b      	subs	r3, r3, r6
 8009480:	60a3      	str	r3, [r4, #8]
 8009482:	6823      	ldr	r3, [r4, #0]
 8009484:	4433      	add	r3, r6
 8009486:	6023      	str	r3, [r4, #0]
 8009488:	2000      	movs	r0, #0
 800948a:	e7db      	b.n	8009444 <__ssputs_r+0x58>
 800948c:	462a      	mov	r2, r5
 800948e:	f000 f99b 	bl	80097c8 <_realloc_r>
 8009492:	4606      	mov	r6, r0
 8009494:	2800      	cmp	r0, #0
 8009496:	d1e1      	bne.n	800945c <__ssputs_r+0x70>
 8009498:	6921      	ldr	r1, [r4, #16]
 800949a:	4650      	mov	r0, sl
 800949c:	f7ff fec6 	bl	800922c <_free_r>
 80094a0:	e7c7      	b.n	8009432 <__ssputs_r+0x46>
	...

080094a4 <_svfiprintf_r>:
 80094a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094a8:	4698      	mov	r8, r3
 80094aa:	898b      	ldrh	r3, [r1, #12]
 80094ac:	061b      	lsls	r3, r3, #24
 80094ae:	b09d      	sub	sp, #116	; 0x74
 80094b0:	4607      	mov	r7, r0
 80094b2:	460d      	mov	r5, r1
 80094b4:	4614      	mov	r4, r2
 80094b6:	d50e      	bpl.n	80094d6 <_svfiprintf_r+0x32>
 80094b8:	690b      	ldr	r3, [r1, #16]
 80094ba:	b963      	cbnz	r3, 80094d6 <_svfiprintf_r+0x32>
 80094bc:	2140      	movs	r1, #64	; 0x40
 80094be:	f7ff ff21 	bl	8009304 <_malloc_r>
 80094c2:	6028      	str	r0, [r5, #0]
 80094c4:	6128      	str	r0, [r5, #16]
 80094c6:	b920      	cbnz	r0, 80094d2 <_svfiprintf_r+0x2e>
 80094c8:	230c      	movs	r3, #12
 80094ca:	603b      	str	r3, [r7, #0]
 80094cc:	f04f 30ff 	mov.w	r0, #4294967295
 80094d0:	e0d1      	b.n	8009676 <_svfiprintf_r+0x1d2>
 80094d2:	2340      	movs	r3, #64	; 0x40
 80094d4:	616b      	str	r3, [r5, #20]
 80094d6:	2300      	movs	r3, #0
 80094d8:	9309      	str	r3, [sp, #36]	; 0x24
 80094da:	2320      	movs	r3, #32
 80094dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80094e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80094e4:	2330      	movs	r3, #48	; 0x30
 80094e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009690 <_svfiprintf_r+0x1ec>
 80094ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80094ee:	f04f 0901 	mov.w	r9, #1
 80094f2:	4623      	mov	r3, r4
 80094f4:	469a      	mov	sl, r3
 80094f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094fa:	b10a      	cbz	r2, 8009500 <_svfiprintf_r+0x5c>
 80094fc:	2a25      	cmp	r2, #37	; 0x25
 80094fe:	d1f9      	bne.n	80094f4 <_svfiprintf_r+0x50>
 8009500:	ebba 0b04 	subs.w	fp, sl, r4
 8009504:	d00b      	beq.n	800951e <_svfiprintf_r+0x7a>
 8009506:	465b      	mov	r3, fp
 8009508:	4622      	mov	r2, r4
 800950a:	4629      	mov	r1, r5
 800950c:	4638      	mov	r0, r7
 800950e:	f7ff ff6d 	bl	80093ec <__ssputs_r>
 8009512:	3001      	adds	r0, #1
 8009514:	f000 80aa 	beq.w	800966c <_svfiprintf_r+0x1c8>
 8009518:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800951a:	445a      	add	r2, fp
 800951c:	9209      	str	r2, [sp, #36]	; 0x24
 800951e:	f89a 3000 	ldrb.w	r3, [sl]
 8009522:	2b00      	cmp	r3, #0
 8009524:	f000 80a2 	beq.w	800966c <_svfiprintf_r+0x1c8>
 8009528:	2300      	movs	r3, #0
 800952a:	f04f 32ff 	mov.w	r2, #4294967295
 800952e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009532:	f10a 0a01 	add.w	sl, sl, #1
 8009536:	9304      	str	r3, [sp, #16]
 8009538:	9307      	str	r3, [sp, #28]
 800953a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800953e:	931a      	str	r3, [sp, #104]	; 0x68
 8009540:	4654      	mov	r4, sl
 8009542:	2205      	movs	r2, #5
 8009544:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009548:	4851      	ldr	r0, [pc, #324]	; (8009690 <_svfiprintf_r+0x1ec>)
 800954a:	f7f6 fe69 	bl	8000220 <memchr>
 800954e:	9a04      	ldr	r2, [sp, #16]
 8009550:	b9d8      	cbnz	r0, 800958a <_svfiprintf_r+0xe6>
 8009552:	06d0      	lsls	r0, r2, #27
 8009554:	bf44      	itt	mi
 8009556:	2320      	movmi	r3, #32
 8009558:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800955c:	0711      	lsls	r1, r2, #28
 800955e:	bf44      	itt	mi
 8009560:	232b      	movmi	r3, #43	; 0x2b
 8009562:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009566:	f89a 3000 	ldrb.w	r3, [sl]
 800956a:	2b2a      	cmp	r3, #42	; 0x2a
 800956c:	d015      	beq.n	800959a <_svfiprintf_r+0xf6>
 800956e:	9a07      	ldr	r2, [sp, #28]
 8009570:	4654      	mov	r4, sl
 8009572:	2000      	movs	r0, #0
 8009574:	f04f 0c0a 	mov.w	ip, #10
 8009578:	4621      	mov	r1, r4
 800957a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800957e:	3b30      	subs	r3, #48	; 0x30
 8009580:	2b09      	cmp	r3, #9
 8009582:	d94e      	bls.n	8009622 <_svfiprintf_r+0x17e>
 8009584:	b1b0      	cbz	r0, 80095b4 <_svfiprintf_r+0x110>
 8009586:	9207      	str	r2, [sp, #28]
 8009588:	e014      	b.n	80095b4 <_svfiprintf_r+0x110>
 800958a:	eba0 0308 	sub.w	r3, r0, r8
 800958e:	fa09 f303 	lsl.w	r3, r9, r3
 8009592:	4313      	orrs	r3, r2
 8009594:	9304      	str	r3, [sp, #16]
 8009596:	46a2      	mov	sl, r4
 8009598:	e7d2      	b.n	8009540 <_svfiprintf_r+0x9c>
 800959a:	9b03      	ldr	r3, [sp, #12]
 800959c:	1d19      	adds	r1, r3, #4
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	9103      	str	r1, [sp, #12]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	bfbb      	ittet	lt
 80095a6:	425b      	neglt	r3, r3
 80095a8:	f042 0202 	orrlt.w	r2, r2, #2
 80095ac:	9307      	strge	r3, [sp, #28]
 80095ae:	9307      	strlt	r3, [sp, #28]
 80095b0:	bfb8      	it	lt
 80095b2:	9204      	strlt	r2, [sp, #16]
 80095b4:	7823      	ldrb	r3, [r4, #0]
 80095b6:	2b2e      	cmp	r3, #46	; 0x2e
 80095b8:	d10c      	bne.n	80095d4 <_svfiprintf_r+0x130>
 80095ba:	7863      	ldrb	r3, [r4, #1]
 80095bc:	2b2a      	cmp	r3, #42	; 0x2a
 80095be:	d135      	bne.n	800962c <_svfiprintf_r+0x188>
 80095c0:	9b03      	ldr	r3, [sp, #12]
 80095c2:	1d1a      	adds	r2, r3, #4
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	9203      	str	r2, [sp, #12]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	bfb8      	it	lt
 80095cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80095d0:	3402      	adds	r4, #2
 80095d2:	9305      	str	r3, [sp, #20]
 80095d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80096a0 <_svfiprintf_r+0x1fc>
 80095d8:	7821      	ldrb	r1, [r4, #0]
 80095da:	2203      	movs	r2, #3
 80095dc:	4650      	mov	r0, sl
 80095de:	f7f6 fe1f 	bl	8000220 <memchr>
 80095e2:	b140      	cbz	r0, 80095f6 <_svfiprintf_r+0x152>
 80095e4:	2340      	movs	r3, #64	; 0x40
 80095e6:	eba0 000a 	sub.w	r0, r0, sl
 80095ea:	fa03 f000 	lsl.w	r0, r3, r0
 80095ee:	9b04      	ldr	r3, [sp, #16]
 80095f0:	4303      	orrs	r3, r0
 80095f2:	3401      	adds	r4, #1
 80095f4:	9304      	str	r3, [sp, #16]
 80095f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095fa:	4826      	ldr	r0, [pc, #152]	; (8009694 <_svfiprintf_r+0x1f0>)
 80095fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009600:	2206      	movs	r2, #6
 8009602:	f7f6 fe0d 	bl	8000220 <memchr>
 8009606:	2800      	cmp	r0, #0
 8009608:	d038      	beq.n	800967c <_svfiprintf_r+0x1d8>
 800960a:	4b23      	ldr	r3, [pc, #140]	; (8009698 <_svfiprintf_r+0x1f4>)
 800960c:	bb1b      	cbnz	r3, 8009656 <_svfiprintf_r+0x1b2>
 800960e:	9b03      	ldr	r3, [sp, #12]
 8009610:	3307      	adds	r3, #7
 8009612:	f023 0307 	bic.w	r3, r3, #7
 8009616:	3308      	adds	r3, #8
 8009618:	9303      	str	r3, [sp, #12]
 800961a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800961c:	4433      	add	r3, r6
 800961e:	9309      	str	r3, [sp, #36]	; 0x24
 8009620:	e767      	b.n	80094f2 <_svfiprintf_r+0x4e>
 8009622:	fb0c 3202 	mla	r2, ip, r2, r3
 8009626:	460c      	mov	r4, r1
 8009628:	2001      	movs	r0, #1
 800962a:	e7a5      	b.n	8009578 <_svfiprintf_r+0xd4>
 800962c:	2300      	movs	r3, #0
 800962e:	3401      	adds	r4, #1
 8009630:	9305      	str	r3, [sp, #20]
 8009632:	4619      	mov	r1, r3
 8009634:	f04f 0c0a 	mov.w	ip, #10
 8009638:	4620      	mov	r0, r4
 800963a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800963e:	3a30      	subs	r2, #48	; 0x30
 8009640:	2a09      	cmp	r2, #9
 8009642:	d903      	bls.n	800964c <_svfiprintf_r+0x1a8>
 8009644:	2b00      	cmp	r3, #0
 8009646:	d0c5      	beq.n	80095d4 <_svfiprintf_r+0x130>
 8009648:	9105      	str	r1, [sp, #20]
 800964a:	e7c3      	b.n	80095d4 <_svfiprintf_r+0x130>
 800964c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009650:	4604      	mov	r4, r0
 8009652:	2301      	movs	r3, #1
 8009654:	e7f0      	b.n	8009638 <_svfiprintf_r+0x194>
 8009656:	ab03      	add	r3, sp, #12
 8009658:	9300      	str	r3, [sp, #0]
 800965a:	462a      	mov	r2, r5
 800965c:	4b0f      	ldr	r3, [pc, #60]	; (800969c <_svfiprintf_r+0x1f8>)
 800965e:	a904      	add	r1, sp, #16
 8009660:	4638      	mov	r0, r7
 8009662:	f7fc fa49 	bl	8005af8 <_printf_float>
 8009666:	1c42      	adds	r2, r0, #1
 8009668:	4606      	mov	r6, r0
 800966a:	d1d6      	bne.n	800961a <_svfiprintf_r+0x176>
 800966c:	89ab      	ldrh	r3, [r5, #12]
 800966e:	065b      	lsls	r3, r3, #25
 8009670:	f53f af2c 	bmi.w	80094cc <_svfiprintf_r+0x28>
 8009674:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009676:	b01d      	add	sp, #116	; 0x74
 8009678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800967c:	ab03      	add	r3, sp, #12
 800967e:	9300      	str	r3, [sp, #0]
 8009680:	462a      	mov	r2, r5
 8009682:	4b06      	ldr	r3, [pc, #24]	; (800969c <_svfiprintf_r+0x1f8>)
 8009684:	a904      	add	r1, sp, #16
 8009686:	4638      	mov	r0, r7
 8009688:	f7fc fcda 	bl	8006040 <_printf_i>
 800968c:	e7eb      	b.n	8009666 <_svfiprintf_r+0x1c2>
 800968e:	bf00      	nop
 8009690:	0800a734 	.word	0x0800a734
 8009694:	0800a73e 	.word	0x0800a73e
 8009698:	08005af9 	.word	0x08005af9
 800969c:	080093ed 	.word	0x080093ed
 80096a0:	0800a73a 	.word	0x0800a73a
 80096a4:	00000000 	.word	0x00000000

080096a8 <nan>:
 80096a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80096b0 <nan+0x8>
 80096ac:	4770      	bx	lr
 80096ae:	bf00      	nop
 80096b0:	00000000 	.word	0x00000000
 80096b4:	7ff80000 	.word	0x7ff80000

080096b8 <_sbrk_r>:
 80096b8:	b538      	push	{r3, r4, r5, lr}
 80096ba:	4d06      	ldr	r5, [pc, #24]	; (80096d4 <_sbrk_r+0x1c>)
 80096bc:	2300      	movs	r3, #0
 80096be:	4604      	mov	r4, r0
 80096c0:	4608      	mov	r0, r1
 80096c2:	602b      	str	r3, [r5, #0]
 80096c4:	f7f8 f892 	bl	80017ec <_sbrk>
 80096c8:	1c43      	adds	r3, r0, #1
 80096ca:	d102      	bne.n	80096d2 <_sbrk_r+0x1a>
 80096cc:	682b      	ldr	r3, [r5, #0]
 80096ce:	b103      	cbz	r3, 80096d2 <_sbrk_r+0x1a>
 80096d0:	6023      	str	r3, [r4, #0]
 80096d2:	bd38      	pop	{r3, r4, r5, pc}
 80096d4:	20000378 	.word	0x20000378

080096d8 <strncmp>:
 80096d8:	b510      	push	{r4, lr}
 80096da:	b17a      	cbz	r2, 80096fc <strncmp+0x24>
 80096dc:	4603      	mov	r3, r0
 80096de:	3901      	subs	r1, #1
 80096e0:	1884      	adds	r4, r0, r2
 80096e2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80096e6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80096ea:	4290      	cmp	r0, r2
 80096ec:	d101      	bne.n	80096f2 <strncmp+0x1a>
 80096ee:	42a3      	cmp	r3, r4
 80096f0:	d101      	bne.n	80096f6 <strncmp+0x1e>
 80096f2:	1a80      	subs	r0, r0, r2
 80096f4:	bd10      	pop	{r4, pc}
 80096f6:	2800      	cmp	r0, #0
 80096f8:	d1f3      	bne.n	80096e2 <strncmp+0xa>
 80096fa:	e7fa      	b.n	80096f2 <strncmp+0x1a>
 80096fc:	4610      	mov	r0, r2
 80096fe:	e7f9      	b.n	80096f4 <strncmp+0x1c>

08009700 <__ascii_wctomb>:
 8009700:	b149      	cbz	r1, 8009716 <__ascii_wctomb+0x16>
 8009702:	2aff      	cmp	r2, #255	; 0xff
 8009704:	bf85      	ittet	hi
 8009706:	238a      	movhi	r3, #138	; 0x8a
 8009708:	6003      	strhi	r3, [r0, #0]
 800970a:	700a      	strbls	r2, [r1, #0]
 800970c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009710:	bf98      	it	ls
 8009712:	2001      	movls	r0, #1
 8009714:	4770      	bx	lr
 8009716:	4608      	mov	r0, r1
 8009718:	4770      	bx	lr
	...

0800971c <__assert_func>:
 800971c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800971e:	4614      	mov	r4, r2
 8009720:	461a      	mov	r2, r3
 8009722:	4b09      	ldr	r3, [pc, #36]	; (8009748 <__assert_func+0x2c>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4605      	mov	r5, r0
 8009728:	68d8      	ldr	r0, [r3, #12]
 800972a:	b14c      	cbz	r4, 8009740 <__assert_func+0x24>
 800972c:	4b07      	ldr	r3, [pc, #28]	; (800974c <__assert_func+0x30>)
 800972e:	9100      	str	r1, [sp, #0]
 8009730:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009734:	4906      	ldr	r1, [pc, #24]	; (8009750 <__assert_func+0x34>)
 8009736:	462b      	mov	r3, r5
 8009738:	f000 f80e 	bl	8009758 <fiprintf>
 800973c:	f000 fa8c 	bl	8009c58 <abort>
 8009740:	4b04      	ldr	r3, [pc, #16]	; (8009754 <__assert_func+0x38>)
 8009742:	461c      	mov	r4, r3
 8009744:	e7f3      	b.n	800972e <__assert_func+0x12>
 8009746:	bf00      	nop
 8009748:	20000018 	.word	0x20000018
 800974c:	0800a745 	.word	0x0800a745
 8009750:	0800a752 	.word	0x0800a752
 8009754:	0800a780 	.word	0x0800a780

08009758 <fiprintf>:
 8009758:	b40e      	push	{r1, r2, r3}
 800975a:	b503      	push	{r0, r1, lr}
 800975c:	4601      	mov	r1, r0
 800975e:	ab03      	add	r3, sp, #12
 8009760:	4805      	ldr	r0, [pc, #20]	; (8009778 <fiprintf+0x20>)
 8009762:	f853 2b04 	ldr.w	r2, [r3], #4
 8009766:	6800      	ldr	r0, [r0, #0]
 8009768:	9301      	str	r3, [sp, #4]
 800976a:	f000 f885 	bl	8009878 <_vfiprintf_r>
 800976e:	b002      	add	sp, #8
 8009770:	f85d eb04 	ldr.w	lr, [sp], #4
 8009774:	b003      	add	sp, #12
 8009776:	4770      	bx	lr
 8009778:	20000018 	.word	0x20000018

0800977c <memmove>:
 800977c:	4288      	cmp	r0, r1
 800977e:	b510      	push	{r4, lr}
 8009780:	eb01 0402 	add.w	r4, r1, r2
 8009784:	d902      	bls.n	800978c <memmove+0x10>
 8009786:	4284      	cmp	r4, r0
 8009788:	4623      	mov	r3, r4
 800978a:	d807      	bhi.n	800979c <memmove+0x20>
 800978c:	1e43      	subs	r3, r0, #1
 800978e:	42a1      	cmp	r1, r4
 8009790:	d008      	beq.n	80097a4 <memmove+0x28>
 8009792:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009796:	f803 2f01 	strb.w	r2, [r3, #1]!
 800979a:	e7f8      	b.n	800978e <memmove+0x12>
 800979c:	4402      	add	r2, r0
 800979e:	4601      	mov	r1, r0
 80097a0:	428a      	cmp	r2, r1
 80097a2:	d100      	bne.n	80097a6 <memmove+0x2a>
 80097a4:	bd10      	pop	{r4, pc}
 80097a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80097aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80097ae:	e7f7      	b.n	80097a0 <memmove+0x24>

080097b0 <__malloc_lock>:
 80097b0:	4801      	ldr	r0, [pc, #4]	; (80097b8 <__malloc_lock+0x8>)
 80097b2:	f000 bc11 	b.w	8009fd8 <__retarget_lock_acquire_recursive>
 80097b6:	bf00      	nop
 80097b8:	2000037c 	.word	0x2000037c

080097bc <__malloc_unlock>:
 80097bc:	4801      	ldr	r0, [pc, #4]	; (80097c4 <__malloc_unlock+0x8>)
 80097be:	f000 bc0c 	b.w	8009fda <__retarget_lock_release_recursive>
 80097c2:	bf00      	nop
 80097c4:	2000037c 	.word	0x2000037c

080097c8 <_realloc_r>:
 80097c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097cc:	4680      	mov	r8, r0
 80097ce:	4614      	mov	r4, r2
 80097d0:	460e      	mov	r6, r1
 80097d2:	b921      	cbnz	r1, 80097de <_realloc_r+0x16>
 80097d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097d8:	4611      	mov	r1, r2
 80097da:	f7ff bd93 	b.w	8009304 <_malloc_r>
 80097de:	b92a      	cbnz	r2, 80097ec <_realloc_r+0x24>
 80097e0:	f7ff fd24 	bl	800922c <_free_r>
 80097e4:	4625      	mov	r5, r4
 80097e6:	4628      	mov	r0, r5
 80097e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097ec:	f000 fc5c 	bl	800a0a8 <_malloc_usable_size_r>
 80097f0:	4284      	cmp	r4, r0
 80097f2:	4607      	mov	r7, r0
 80097f4:	d802      	bhi.n	80097fc <_realloc_r+0x34>
 80097f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80097fa:	d812      	bhi.n	8009822 <_realloc_r+0x5a>
 80097fc:	4621      	mov	r1, r4
 80097fe:	4640      	mov	r0, r8
 8009800:	f7ff fd80 	bl	8009304 <_malloc_r>
 8009804:	4605      	mov	r5, r0
 8009806:	2800      	cmp	r0, #0
 8009808:	d0ed      	beq.n	80097e6 <_realloc_r+0x1e>
 800980a:	42bc      	cmp	r4, r7
 800980c:	4622      	mov	r2, r4
 800980e:	4631      	mov	r1, r6
 8009810:	bf28      	it	cs
 8009812:	463a      	movcs	r2, r7
 8009814:	f7ff f824 	bl	8008860 <memcpy>
 8009818:	4631      	mov	r1, r6
 800981a:	4640      	mov	r0, r8
 800981c:	f7ff fd06 	bl	800922c <_free_r>
 8009820:	e7e1      	b.n	80097e6 <_realloc_r+0x1e>
 8009822:	4635      	mov	r5, r6
 8009824:	e7df      	b.n	80097e6 <_realloc_r+0x1e>

08009826 <__sfputc_r>:
 8009826:	6893      	ldr	r3, [r2, #8]
 8009828:	3b01      	subs	r3, #1
 800982a:	2b00      	cmp	r3, #0
 800982c:	b410      	push	{r4}
 800982e:	6093      	str	r3, [r2, #8]
 8009830:	da08      	bge.n	8009844 <__sfputc_r+0x1e>
 8009832:	6994      	ldr	r4, [r2, #24]
 8009834:	42a3      	cmp	r3, r4
 8009836:	db01      	blt.n	800983c <__sfputc_r+0x16>
 8009838:	290a      	cmp	r1, #10
 800983a:	d103      	bne.n	8009844 <__sfputc_r+0x1e>
 800983c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009840:	f000 b94a 	b.w	8009ad8 <__swbuf_r>
 8009844:	6813      	ldr	r3, [r2, #0]
 8009846:	1c58      	adds	r0, r3, #1
 8009848:	6010      	str	r0, [r2, #0]
 800984a:	7019      	strb	r1, [r3, #0]
 800984c:	4608      	mov	r0, r1
 800984e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009852:	4770      	bx	lr

08009854 <__sfputs_r>:
 8009854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009856:	4606      	mov	r6, r0
 8009858:	460f      	mov	r7, r1
 800985a:	4614      	mov	r4, r2
 800985c:	18d5      	adds	r5, r2, r3
 800985e:	42ac      	cmp	r4, r5
 8009860:	d101      	bne.n	8009866 <__sfputs_r+0x12>
 8009862:	2000      	movs	r0, #0
 8009864:	e007      	b.n	8009876 <__sfputs_r+0x22>
 8009866:	f814 1b01 	ldrb.w	r1, [r4], #1
 800986a:	463a      	mov	r2, r7
 800986c:	4630      	mov	r0, r6
 800986e:	f7ff ffda 	bl	8009826 <__sfputc_r>
 8009872:	1c43      	adds	r3, r0, #1
 8009874:	d1f3      	bne.n	800985e <__sfputs_r+0xa>
 8009876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009878 <_vfiprintf_r>:
 8009878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800987c:	460d      	mov	r5, r1
 800987e:	b09d      	sub	sp, #116	; 0x74
 8009880:	4614      	mov	r4, r2
 8009882:	4698      	mov	r8, r3
 8009884:	4606      	mov	r6, r0
 8009886:	b118      	cbz	r0, 8009890 <_vfiprintf_r+0x18>
 8009888:	6983      	ldr	r3, [r0, #24]
 800988a:	b90b      	cbnz	r3, 8009890 <_vfiprintf_r+0x18>
 800988c:	f000 fb06 	bl	8009e9c <__sinit>
 8009890:	4b89      	ldr	r3, [pc, #548]	; (8009ab8 <_vfiprintf_r+0x240>)
 8009892:	429d      	cmp	r5, r3
 8009894:	d11b      	bne.n	80098ce <_vfiprintf_r+0x56>
 8009896:	6875      	ldr	r5, [r6, #4]
 8009898:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800989a:	07d9      	lsls	r1, r3, #31
 800989c:	d405      	bmi.n	80098aa <_vfiprintf_r+0x32>
 800989e:	89ab      	ldrh	r3, [r5, #12]
 80098a0:	059a      	lsls	r2, r3, #22
 80098a2:	d402      	bmi.n	80098aa <_vfiprintf_r+0x32>
 80098a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098a6:	f000 fb97 	bl	8009fd8 <__retarget_lock_acquire_recursive>
 80098aa:	89ab      	ldrh	r3, [r5, #12]
 80098ac:	071b      	lsls	r3, r3, #28
 80098ae:	d501      	bpl.n	80098b4 <_vfiprintf_r+0x3c>
 80098b0:	692b      	ldr	r3, [r5, #16]
 80098b2:	b9eb      	cbnz	r3, 80098f0 <_vfiprintf_r+0x78>
 80098b4:	4629      	mov	r1, r5
 80098b6:	4630      	mov	r0, r6
 80098b8:	f000 f960 	bl	8009b7c <__swsetup_r>
 80098bc:	b1c0      	cbz	r0, 80098f0 <_vfiprintf_r+0x78>
 80098be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098c0:	07dc      	lsls	r4, r3, #31
 80098c2:	d50e      	bpl.n	80098e2 <_vfiprintf_r+0x6a>
 80098c4:	f04f 30ff 	mov.w	r0, #4294967295
 80098c8:	b01d      	add	sp, #116	; 0x74
 80098ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ce:	4b7b      	ldr	r3, [pc, #492]	; (8009abc <_vfiprintf_r+0x244>)
 80098d0:	429d      	cmp	r5, r3
 80098d2:	d101      	bne.n	80098d8 <_vfiprintf_r+0x60>
 80098d4:	68b5      	ldr	r5, [r6, #8]
 80098d6:	e7df      	b.n	8009898 <_vfiprintf_r+0x20>
 80098d8:	4b79      	ldr	r3, [pc, #484]	; (8009ac0 <_vfiprintf_r+0x248>)
 80098da:	429d      	cmp	r5, r3
 80098dc:	bf08      	it	eq
 80098de:	68f5      	ldreq	r5, [r6, #12]
 80098e0:	e7da      	b.n	8009898 <_vfiprintf_r+0x20>
 80098e2:	89ab      	ldrh	r3, [r5, #12]
 80098e4:	0598      	lsls	r0, r3, #22
 80098e6:	d4ed      	bmi.n	80098c4 <_vfiprintf_r+0x4c>
 80098e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098ea:	f000 fb76 	bl	8009fda <__retarget_lock_release_recursive>
 80098ee:	e7e9      	b.n	80098c4 <_vfiprintf_r+0x4c>
 80098f0:	2300      	movs	r3, #0
 80098f2:	9309      	str	r3, [sp, #36]	; 0x24
 80098f4:	2320      	movs	r3, #32
 80098f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80098fe:	2330      	movs	r3, #48	; 0x30
 8009900:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009ac4 <_vfiprintf_r+0x24c>
 8009904:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009908:	f04f 0901 	mov.w	r9, #1
 800990c:	4623      	mov	r3, r4
 800990e:	469a      	mov	sl, r3
 8009910:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009914:	b10a      	cbz	r2, 800991a <_vfiprintf_r+0xa2>
 8009916:	2a25      	cmp	r2, #37	; 0x25
 8009918:	d1f9      	bne.n	800990e <_vfiprintf_r+0x96>
 800991a:	ebba 0b04 	subs.w	fp, sl, r4
 800991e:	d00b      	beq.n	8009938 <_vfiprintf_r+0xc0>
 8009920:	465b      	mov	r3, fp
 8009922:	4622      	mov	r2, r4
 8009924:	4629      	mov	r1, r5
 8009926:	4630      	mov	r0, r6
 8009928:	f7ff ff94 	bl	8009854 <__sfputs_r>
 800992c:	3001      	adds	r0, #1
 800992e:	f000 80aa 	beq.w	8009a86 <_vfiprintf_r+0x20e>
 8009932:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009934:	445a      	add	r2, fp
 8009936:	9209      	str	r2, [sp, #36]	; 0x24
 8009938:	f89a 3000 	ldrb.w	r3, [sl]
 800993c:	2b00      	cmp	r3, #0
 800993e:	f000 80a2 	beq.w	8009a86 <_vfiprintf_r+0x20e>
 8009942:	2300      	movs	r3, #0
 8009944:	f04f 32ff 	mov.w	r2, #4294967295
 8009948:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800994c:	f10a 0a01 	add.w	sl, sl, #1
 8009950:	9304      	str	r3, [sp, #16]
 8009952:	9307      	str	r3, [sp, #28]
 8009954:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009958:	931a      	str	r3, [sp, #104]	; 0x68
 800995a:	4654      	mov	r4, sl
 800995c:	2205      	movs	r2, #5
 800995e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009962:	4858      	ldr	r0, [pc, #352]	; (8009ac4 <_vfiprintf_r+0x24c>)
 8009964:	f7f6 fc5c 	bl	8000220 <memchr>
 8009968:	9a04      	ldr	r2, [sp, #16]
 800996a:	b9d8      	cbnz	r0, 80099a4 <_vfiprintf_r+0x12c>
 800996c:	06d1      	lsls	r1, r2, #27
 800996e:	bf44      	itt	mi
 8009970:	2320      	movmi	r3, #32
 8009972:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009976:	0713      	lsls	r3, r2, #28
 8009978:	bf44      	itt	mi
 800997a:	232b      	movmi	r3, #43	; 0x2b
 800997c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009980:	f89a 3000 	ldrb.w	r3, [sl]
 8009984:	2b2a      	cmp	r3, #42	; 0x2a
 8009986:	d015      	beq.n	80099b4 <_vfiprintf_r+0x13c>
 8009988:	9a07      	ldr	r2, [sp, #28]
 800998a:	4654      	mov	r4, sl
 800998c:	2000      	movs	r0, #0
 800998e:	f04f 0c0a 	mov.w	ip, #10
 8009992:	4621      	mov	r1, r4
 8009994:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009998:	3b30      	subs	r3, #48	; 0x30
 800999a:	2b09      	cmp	r3, #9
 800999c:	d94e      	bls.n	8009a3c <_vfiprintf_r+0x1c4>
 800999e:	b1b0      	cbz	r0, 80099ce <_vfiprintf_r+0x156>
 80099a0:	9207      	str	r2, [sp, #28]
 80099a2:	e014      	b.n	80099ce <_vfiprintf_r+0x156>
 80099a4:	eba0 0308 	sub.w	r3, r0, r8
 80099a8:	fa09 f303 	lsl.w	r3, r9, r3
 80099ac:	4313      	orrs	r3, r2
 80099ae:	9304      	str	r3, [sp, #16]
 80099b0:	46a2      	mov	sl, r4
 80099b2:	e7d2      	b.n	800995a <_vfiprintf_r+0xe2>
 80099b4:	9b03      	ldr	r3, [sp, #12]
 80099b6:	1d19      	adds	r1, r3, #4
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	9103      	str	r1, [sp, #12]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	bfbb      	ittet	lt
 80099c0:	425b      	neglt	r3, r3
 80099c2:	f042 0202 	orrlt.w	r2, r2, #2
 80099c6:	9307      	strge	r3, [sp, #28]
 80099c8:	9307      	strlt	r3, [sp, #28]
 80099ca:	bfb8      	it	lt
 80099cc:	9204      	strlt	r2, [sp, #16]
 80099ce:	7823      	ldrb	r3, [r4, #0]
 80099d0:	2b2e      	cmp	r3, #46	; 0x2e
 80099d2:	d10c      	bne.n	80099ee <_vfiprintf_r+0x176>
 80099d4:	7863      	ldrb	r3, [r4, #1]
 80099d6:	2b2a      	cmp	r3, #42	; 0x2a
 80099d8:	d135      	bne.n	8009a46 <_vfiprintf_r+0x1ce>
 80099da:	9b03      	ldr	r3, [sp, #12]
 80099dc:	1d1a      	adds	r2, r3, #4
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	9203      	str	r2, [sp, #12]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	bfb8      	it	lt
 80099e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80099ea:	3402      	adds	r4, #2
 80099ec:	9305      	str	r3, [sp, #20]
 80099ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009ad4 <_vfiprintf_r+0x25c>
 80099f2:	7821      	ldrb	r1, [r4, #0]
 80099f4:	2203      	movs	r2, #3
 80099f6:	4650      	mov	r0, sl
 80099f8:	f7f6 fc12 	bl	8000220 <memchr>
 80099fc:	b140      	cbz	r0, 8009a10 <_vfiprintf_r+0x198>
 80099fe:	2340      	movs	r3, #64	; 0x40
 8009a00:	eba0 000a 	sub.w	r0, r0, sl
 8009a04:	fa03 f000 	lsl.w	r0, r3, r0
 8009a08:	9b04      	ldr	r3, [sp, #16]
 8009a0a:	4303      	orrs	r3, r0
 8009a0c:	3401      	adds	r4, #1
 8009a0e:	9304      	str	r3, [sp, #16]
 8009a10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a14:	482c      	ldr	r0, [pc, #176]	; (8009ac8 <_vfiprintf_r+0x250>)
 8009a16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a1a:	2206      	movs	r2, #6
 8009a1c:	f7f6 fc00 	bl	8000220 <memchr>
 8009a20:	2800      	cmp	r0, #0
 8009a22:	d03f      	beq.n	8009aa4 <_vfiprintf_r+0x22c>
 8009a24:	4b29      	ldr	r3, [pc, #164]	; (8009acc <_vfiprintf_r+0x254>)
 8009a26:	bb1b      	cbnz	r3, 8009a70 <_vfiprintf_r+0x1f8>
 8009a28:	9b03      	ldr	r3, [sp, #12]
 8009a2a:	3307      	adds	r3, #7
 8009a2c:	f023 0307 	bic.w	r3, r3, #7
 8009a30:	3308      	adds	r3, #8
 8009a32:	9303      	str	r3, [sp, #12]
 8009a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a36:	443b      	add	r3, r7
 8009a38:	9309      	str	r3, [sp, #36]	; 0x24
 8009a3a:	e767      	b.n	800990c <_vfiprintf_r+0x94>
 8009a3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a40:	460c      	mov	r4, r1
 8009a42:	2001      	movs	r0, #1
 8009a44:	e7a5      	b.n	8009992 <_vfiprintf_r+0x11a>
 8009a46:	2300      	movs	r3, #0
 8009a48:	3401      	adds	r4, #1
 8009a4a:	9305      	str	r3, [sp, #20]
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	f04f 0c0a 	mov.w	ip, #10
 8009a52:	4620      	mov	r0, r4
 8009a54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a58:	3a30      	subs	r2, #48	; 0x30
 8009a5a:	2a09      	cmp	r2, #9
 8009a5c:	d903      	bls.n	8009a66 <_vfiprintf_r+0x1ee>
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d0c5      	beq.n	80099ee <_vfiprintf_r+0x176>
 8009a62:	9105      	str	r1, [sp, #20]
 8009a64:	e7c3      	b.n	80099ee <_vfiprintf_r+0x176>
 8009a66:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a6a:	4604      	mov	r4, r0
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	e7f0      	b.n	8009a52 <_vfiprintf_r+0x1da>
 8009a70:	ab03      	add	r3, sp, #12
 8009a72:	9300      	str	r3, [sp, #0]
 8009a74:	462a      	mov	r2, r5
 8009a76:	4b16      	ldr	r3, [pc, #88]	; (8009ad0 <_vfiprintf_r+0x258>)
 8009a78:	a904      	add	r1, sp, #16
 8009a7a:	4630      	mov	r0, r6
 8009a7c:	f7fc f83c 	bl	8005af8 <_printf_float>
 8009a80:	4607      	mov	r7, r0
 8009a82:	1c78      	adds	r0, r7, #1
 8009a84:	d1d6      	bne.n	8009a34 <_vfiprintf_r+0x1bc>
 8009a86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a88:	07d9      	lsls	r1, r3, #31
 8009a8a:	d405      	bmi.n	8009a98 <_vfiprintf_r+0x220>
 8009a8c:	89ab      	ldrh	r3, [r5, #12]
 8009a8e:	059a      	lsls	r2, r3, #22
 8009a90:	d402      	bmi.n	8009a98 <_vfiprintf_r+0x220>
 8009a92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a94:	f000 faa1 	bl	8009fda <__retarget_lock_release_recursive>
 8009a98:	89ab      	ldrh	r3, [r5, #12]
 8009a9a:	065b      	lsls	r3, r3, #25
 8009a9c:	f53f af12 	bmi.w	80098c4 <_vfiprintf_r+0x4c>
 8009aa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009aa2:	e711      	b.n	80098c8 <_vfiprintf_r+0x50>
 8009aa4:	ab03      	add	r3, sp, #12
 8009aa6:	9300      	str	r3, [sp, #0]
 8009aa8:	462a      	mov	r2, r5
 8009aaa:	4b09      	ldr	r3, [pc, #36]	; (8009ad0 <_vfiprintf_r+0x258>)
 8009aac:	a904      	add	r1, sp, #16
 8009aae:	4630      	mov	r0, r6
 8009ab0:	f7fc fac6 	bl	8006040 <_printf_i>
 8009ab4:	e7e4      	b.n	8009a80 <_vfiprintf_r+0x208>
 8009ab6:	bf00      	nop
 8009ab8:	0800a7a4 	.word	0x0800a7a4
 8009abc:	0800a7c4 	.word	0x0800a7c4
 8009ac0:	0800a784 	.word	0x0800a784
 8009ac4:	0800a734 	.word	0x0800a734
 8009ac8:	0800a73e 	.word	0x0800a73e
 8009acc:	08005af9 	.word	0x08005af9
 8009ad0:	08009855 	.word	0x08009855
 8009ad4:	0800a73a 	.word	0x0800a73a

08009ad8 <__swbuf_r>:
 8009ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ada:	460e      	mov	r6, r1
 8009adc:	4614      	mov	r4, r2
 8009ade:	4605      	mov	r5, r0
 8009ae0:	b118      	cbz	r0, 8009aea <__swbuf_r+0x12>
 8009ae2:	6983      	ldr	r3, [r0, #24]
 8009ae4:	b90b      	cbnz	r3, 8009aea <__swbuf_r+0x12>
 8009ae6:	f000 f9d9 	bl	8009e9c <__sinit>
 8009aea:	4b21      	ldr	r3, [pc, #132]	; (8009b70 <__swbuf_r+0x98>)
 8009aec:	429c      	cmp	r4, r3
 8009aee:	d12b      	bne.n	8009b48 <__swbuf_r+0x70>
 8009af0:	686c      	ldr	r4, [r5, #4]
 8009af2:	69a3      	ldr	r3, [r4, #24]
 8009af4:	60a3      	str	r3, [r4, #8]
 8009af6:	89a3      	ldrh	r3, [r4, #12]
 8009af8:	071a      	lsls	r2, r3, #28
 8009afa:	d52f      	bpl.n	8009b5c <__swbuf_r+0x84>
 8009afc:	6923      	ldr	r3, [r4, #16]
 8009afe:	b36b      	cbz	r3, 8009b5c <__swbuf_r+0x84>
 8009b00:	6923      	ldr	r3, [r4, #16]
 8009b02:	6820      	ldr	r0, [r4, #0]
 8009b04:	1ac0      	subs	r0, r0, r3
 8009b06:	6963      	ldr	r3, [r4, #20]
 8009b08:	b2f6      	uxtb	r6, r6
 8009b0a:	4283      	cmp	r3, r0
 8009b0c:	4637      	mov	r7, r6
 8009b0e:	dc04      	bgt.n	8009b1a <__swbuf_r+0x42>
 8009b10:	4621      	mov	r1, r4
 8009b12:	4628      	mov	r0, r5
 8009b14:	f000 f92e 	bl	8009d74 <_fflush_r>
 8009b18:	bb30      	cbnz	r0, 8009b68 <__swbuf_r+0x90>
 8009b1a:	68a3      	ldr	r3, [r4, #8]
 8009b1c:	3b01      	subs	r3, #1
 8009b1e:	60a3      	str	r3, [r4, #8]
 8009b20:	6823      	ldr	r3, [r4, #0]
 8009b22:	1c5a      	adds	r2, r3, #1
 8009b24:	6022      	str	r2, [r4, #0]
 8009b26:	701e      	strb	r6, [r3, #0]
 8009b28:	6963      	ldr	r3, [r4, #20]
 8009b2a:	3001      	adds	r0, #1
 8009b2c:	4283      	cmp	r3, r0
 8009b2e:	d004      	beq.n	8009b3a <__swbuf_r+0x62>
 8009b30:	89a3      	ldrh	r3, [r4, #12]
 8009b32:	07db      	lsls	r3, r3, #31
 8009b34:	d506      	bpl.n	8009b44 <__swbuf_r+0x6c>
 8009b36:	2e0a      	cmp	r6, #10
 8009b38:	d104      	bne.n	8009b44 <__swbuf_r+0x6c>
 8009b3a:	4621      	mov	r1, r4
 8009b3c:	4628      	mov	r0, r5
 8009b3e:	f000 f919 	bl	8009d74 <_fflush_r>
 8009b42:	b988      	cbnz	r0, 8009b68 <__swbuf_r+0x90>
 8009b44:	4638      	mov	r0, r7
 8009b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b48:	4b0a      	ldr	r3, [pc, #40]	; (8009b74 <__swbuf_r+0x9c>)
 8009b4a:	429c      	cmp	r4, r3
 8009b4c:	d101      	bne.n	8009b52 <__swbuf_r+0x7a>
 8009b4e:	68ac      	ldr	r4, [r5, #8]
 8009b50:	e7cf      	b.n	8009af2 <__swbuf_r+0x1a>
 8009b52:	4b09      	ldr	r3, [pc, #36]	; (8009b78 <__swbuf_r+0xa0>)
 8009b54:	429c      	cmp	r4, r3
 8009b56:	bf08      	it	eq
 8009b58:	68ec      	ldreq	r4, [r5, #12]
 8009b5a:	e7ca      	b.n	8009af2 <__swbuf_r+0x1a>
 8009b5c:	4621      	mov	r1, r4
 8009b5e:	4628      	mov	r0, r5
 8009b60:	f000 f80c 	bl	8009b7c <__swsetup_r>
 8009b64:	2800      	cmp	r0, #0
 8009b66:	d0cb      	beq.n	8009b00 <__swbuf_r+0x28>
 8009b68:	f04f 37ff 	mov.w	r7, #4294967295
 8009b6c:	e7ea      	b.n	8009b44 <__swbuf_r+0x6c>
 8009b6e:	bf00      	nop
 8009b70:	0800a7a4 	.word	0x0800a7a4
 8009b74:	0800a7c4 	.word	0x0800a7c4
 8009b78:	0800a784 	.word	0x0800a784

08009b7c <__swsetup_r>:
 8009b7c:	4b32      	ldr	r3, [pc, #200]	; (8009c48 <__swsetup_r+0xcc>)
 8009b7e:	b570      	push	{r4, r5, r6, lr}
 8009b80:	681d      	ldr	r5, [r3, #0]
 8009b82:	4606      	mov	r6, r0
 8009b84:	460c      	mov	r4, r1
 8009b86:	b125      	cbz	r5, 8009b92 <__swsetup_r+0x16>
 8009b88:	69ab      	ldr	r3, [r5, #24]
 8009b8a:	b913      	cbnz	r3, 8009b92 <__swsetup_r+0x16>
 8009b8c:	4628      	mov	r0, r5
 8009b8e:	f000 f985 	bl	8009e9c <__sinit>
 8009b92:	4b2e      	ldr	r3, [pc, #184]	; (8009c4c <__swsetup_r+0xd0>)
 8009b94:	429c      	cmp	r4, r3
 8009b96:	d10f      	bne.n	8009bb8 <__swsetup_r+0x3c>
 8009b98:	686c      	ldr	r4, [r5, #4]
 8009b9a:	89a3      	ldrh	r3, [r4, #12]
 8009b9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ba0:	0719      	lsls	r1, r3, #28
 8009ba2:	d42c      	bmi.n	8009bfe <__swsetup_r+0x82>
 8009ba4:	06dd      	lsls	r5, r3, #27
 8009ba6:	d411      	bmi.n	8009bcc <__swsetup_r+0x50>
 8009ba8:	2309      	movs	r3, #9
 8009baa:	6033      	str	r3, [r6, #0]
 8009bac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009bb0:	81a3      	strh	r3, [r4, #12]
 8009bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8009bb6:	e03e      	b.n	8009c36 <__swsetup_r+0xba>
 8009bb8:	4b25      	ldr	r3, [pc, #148]	; (8009c50 <__swsetup_r+0xd4>)
 8009bba:	429c      	cmp	r4, r3
 8009bbc:	d101      	bne.n	8009bc2 <__swsetup_r+0x46>
 8009bbe:	68ac      	ldr	r4, [r5, #8]
 8009bc0:	e7eb      	b.n	8009b9a <__swsetup_r+0x1e>
 8009bc2:	4b24      	ldr	r3, [pc, #144]	; (8009c54 <__swsetup_r+0xd8>)
 8009bc4:	429c      	cmp	r4, r3
 8009bc6:	bf08      	it	eq
 8009bc8:	68ec      	ldreq	r4, [r5, #12]
 8009bca:	e7e6      	b.n	8009b9a <__swsetup_r+0x1e>
 8009bcc:	0758      	lsls	r0, r3, #29
 8009bce:	d512      	bpl.n	8009bf6 <__swsetup_r+0x7a>
 8009bd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bd2:	b141      	cbz	r1, 8009be6 <__swsetup_r+0x6a>
 8009bd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bd8:	4299      	cmp	r1, r3
 8009bda:	d002      	beq.n	8009be2 <__swsetup_r+0x66>
 8009bdc:	4630      	mov	r0, r6
 8009bde:	f7ff fb25 	bl	800922c <_free_r>
 8009be2:	2300      	movs	r3, #0
 8009be4:	6363      	str	r3, [r4, #52]	; 0x34
 8009be6:	89a3      	ldrh	r3, [r4, #12]
 8009be8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009bec:	81a3      	strh	r3, [r4, #12]
 8009bee:	2300      	movs	r3, #0
 8009bf0:	6063      	str	r3, [r4, #4]
 8009bf2:	6923      	ldr	r3, [r4, #16]
 8009bf4:	6023      	str	r3, [r4, #0]
 8009bf6:	89a3      	ldrh	r3, [r4, #12]
 8009bf8:	f043 0308 	orr.w	r3, r3, #8
 8009bfc:	81a3      	strh	r3, [r4, #12]
 8009bfe:	6923      	ldr	r3, [r4, #16]
 8009c00:	b94b      	cbnz	r3, 8009c16 <__swsetup_r+0x9a>
 8009c02:	89a3      	ldrh	r3, [r4, #12]
 8009c04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009c08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c0c:	d003      	beq.n	8009c16 <__swsetup_r+0x9a>
 8009c0e:	4621      	mov	r1, r4
 8009c10:	4630      	mov	r0, r6
 8009c12:	f000 fa09 	bl	800a028 <__smakebuf_r>
 8009c16:	89a0      	ldrh	r0, [r4, #12]
 8009c18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c1c:	f010 0301 	ands.w	r3, r0, #1
 8009c20:	d00a      	beq.n	8009c38 <__swsetup_r+0xbc>
 8009c22:	2300      	movs	r3, #0
 8009c24:	60a3      	str	r3, [r4, #8]
 8009c26:	6963      	ldr	r3, [r4, #20]
 8009c28:	425b      	negs	r3, r3
 8009c2a:	61a3      	str	r3, [r4, #24]
 8009c2c:	6923      	ldr	r3, [r4, #16]
 8009c2e:	b943      	cbnz	r3, 8009c42 <__swsetup_r+0xc6>
 8009c30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009c34:	d1ba      	bne.n	8009bac <__swsetup_r+0x30>
 8009c36:	bd70      	pop	{r4, r5, r6, pc}
 8009c38:	0781      	lsls	r1, r0, #30
 8009c3a:	bf58      	it	pl
 8009c3c:	6963      	ldrpl	r3, [r4, #20]
 8009c3e:	60a3      	str	r3, [r4, #8]
 8009c40:	e7f4      	b.n	8009c2c <__swsetup_r+0xb0>
 8009c42:	2000      	movs	r0, #0
 8009c44:	e7f7      	b.n	8009c36 <__swsetup_r+0xba>
 8009c46:	bf00      	nop
 8009c48:	20000018 	.word	0x20000018
 8009c4c:	0800a7a4 	.word	0x0800a7a4
 8009c50:	0800a7c4 	.word	0x0800a7c4
 8009c54:	0800a784 	.word	0x0800a784

08009c58 <abort>:
 8009c58:	b508      	push	{r3, lr}
 8009c5a:	2006      	movs	r0, #6
 8009c5c:	f000 fa54 	bl	800a108 <raise>
 8009c60:	2001      	movs	r0, #1
 8009c62:	f7f7 fd4b 	bl	80016fc <_exit>
	...

08009c68 <__sflush_r>:
 8009c68:	898a      	ldrh	r2, [r1, #12]
 8009c6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c6e:	4605      	mov	r5, r0
 8009c70:	0710      	lsls	r0, r2, #28
 8009c72:	460c      	mov	r4, r1
 8009c74:	d458      	bmi.n	8009d28 <__sflush_r+0xc0>
 8009c76:	684b      	ldr	r3, [r1, #4]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	dc05      	bgt.n	8009c88 <__sflush_r+0x20>
 8009c7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	dc02      	bgt.n	8009c88 <__sflush_r+0x20>
 8009c82:	2000      	movs	r0, #0
 8009c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c8a:	2e00      	cmp	r6, #0
 8009c8c:	d0f9      	beq.n	8009c82 <__sflush_r+0x1a>
 8009c8e:	2300      	movs	r3, #0
 8009c90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009c94:	682f      	ldr	r7, [r5, #0]
 8009c96:	602b      	str	r3, [r5, #0]
 8009c98:	d032      	beq.n	8009d00 <__sflush_r+0x98>
 8009c9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009c9c:	89a3      	ldrh	r3, [r4, #12]
 8009c9e:	075a      	lsls	r2, r3, #29
 8009ca0:	d505      	bpl.n	8009cae <__sflush_r+0x46>
 8009ca2:	6863      	ldr	r3, [r4, #4]
 8009ca4:	1ac0      	subs	r0, r0, r3
 8009ca6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ca8:	b10b      	cbz	r3, 8009cae <__sflush_r+0x46>
 8009caa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009cac:	1ac0      	subs	r0, r0, r3
 8009cae:	2300      	movs	r3, #0
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cb4:	6a21      	ldr	r1, [r4, #32]
 8009cb6:	4628      	mov	r0, r5
 8009cb8:	47b0      	blx	r6
 8009cba:	1c43      	adds	r3, r0, #1
 8009cbc:	89a3      	ldrh	r3, [r4, #12]
 8009cbe:	d106      	bne.n	8009cce <__sflush_r+0x66>
 8009cc0:	6829      	ldr	r1, [r5, #0]
 8009cc2:	291d      	cmp	r1, #29
 8009cc4:	d82c      	bhi.n	8009d20 <__sflush_r+0xb8>
 8009cc6:	4a2a      	ldr	r2, [pc, #168]	; (8009d70 <__sflush_r+0x108>)
 8009cc8:	40ca      	lsrs	r2, r1
 8009cca:	07d6      	lsls	r6, r2, #31
 8009ccc:	d528      	bpl.n	8009d20 <__sflush_r+0xb8>
 8009cce:	2200      	movs	r2, #0
 8009cd0:	6062      	str	r2, [r4, #4]
 8009cd2:	04d9      	lsls	r1, r3, #19
 8009cd4:	6922      	ldr	r2, [r4, #16]
 8009cd6:	6022      	str	r2, [r4, #0]
 8009cd8:	d504      	bpl.n	8009ce4 <__sflush_r+0x7c>
 8009cda:	1c42      	adds	r2, r0, #1
 8009cdc:	d101      	bne.n	8009ce2 <__sflush_r+0x7a>
 8009cde:	682b      	ldr	r3, [r5, #0]
 8009ce0:	b903      	cbnz	r3, 8009ce4 <__sflush_r+0x7c>
 8009ce2:	6560      	str	r0, [r4, #84]	; 0x54
 8009ce4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ce6:	602f      	str	r7, [r5, #0]
 8009ce8:	2900      	cmp	r1, #0
 8009cea:	d0ca      	beq.n	8009c82 <__sflush_r+0x1a>
 8009cec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009cf0:	4299      	cmp	r1, r3
 8009cf2:	d002      	beq.n	8009cfa <__sflush_r+0x92>
 8009cf4:	4628      	mov	r0, r5
 8009cf6:	f7ff fa99 	bl	800922c <_free_r>
 8009cfa:	2000      	movs	r0, #0
 8009cfc:	6360      	str	r0, [r4, #52]	; 0x34
 8009cfe:	e7c1      	b.n	8009c84 <__sflush_r+0x1c>
 8009d00:	6a21      	ldr	r1, [r4, #32]
 8009d02:	2301      	movs	r3, #1
 8009d04:	4628      	mov	r0, r5
 8009d06:	47b0      	blx	r6
 8009d08:	1c41      	adds	r1, r0, #1
 8009d0a:	d1c7      	bne.n	8009c9c <__sflush_r+0x34>
 8009d0c:	682b      	ldr	r3, [r5, #0]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d0c4      	beq.n	8009c9c <__sflush_r+0x34>
 8009d12:	2b1d      	cmp	r3, #29
 8009d14:	d001      	beq.n	8009d1a <__sflush_r+0xb2>
 8009d16:	2b16      	cmp	r3, #22
 8009d18:	d101      	bne.n	8009d1e <__sflush_r+0xb6>
 8009d1a:	602f      	str	r7, [r5, #0]
 8009d1c:	e7b1      	b.n	8009c82 <__sflush_r+0x1a>
 8009d1e:	89a3      	ldrh	r3, [r4, #12]
 8009d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d24:	81a3      	strh	r3, [r4, #12]
 8009d26:	e7ad      	b.n	8009c84 <__sflush_r+0x1c>
 8009d28:	690f      	ldr	r7, [r1, #16]
 8009d2a:	2f00      	cmp	r7, #0
 8009d2c:	d0a9      	beq.n	8009c82 <__sflush_r+0x1a>
 8009d2e:	0793      	lsls	r3, r2, #30
 8009d30:	680e      	ldr	r6, [r1, #0]
 8009d32:	bf08      	it	eq
 8009d34:	694b      	ldreq	r3, [r1, #20]
 8009d36:	600f      	str	r7, [r1, #0]
 8009d38:	bf18      	it	ne
 8009d3a:	2300      	movne	r3, #0
 8009d3c:	eba6 0807 	sub.w	r8, r6, r7
 8009d40:	608b      	str	r3, [r1, #8]
 8009d42:	f1b8 0f00 	cmp.w	r8, #0
 8009d46:	dd9c      	ble.n	8009c82 <__sflush_r+0x1a>
 8009d48:	6a21      	ldr	r1, [r4, #32]
 8009d4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009d4c:	4643      	mov	r3, r8
 8009d4e:	463a      	mov	r2, r7
 8009d50:	4628      	mov	r0, r5
 8009d52:	47b0      	blx	r6
 8009d54:	2800      	cmp	r0, #0
 8009d56:	dc06      	bgt.n	8009d66 <__sflush_r+0xfe>
 8009d58:	89a3      	ldrh	r3, [r4, #12]
 8009d5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d5e:	81a3      	strh	r3, [r4, #12]
 8009d60:	f04f 30ff 	mov.w	r0, #4294967295
 8009d64:	e78e      	b.n	8009c84 <__sflush_r+0x1c>
 8009d66:	4407      	add	r7, r0
 8009d68:	eba8 0800 	sub.w	r8, r8, r0
 8009d6c:	e7e9      	b.n	8009d42 <__sflush_r+0xda>
 8009d6e:	bf00      	nop
 8009d70:	20400001 	.word	0x20400001

08009d74 <_fflush_r>:
 8009d74:	b538      	push	{r3, r4, r5, lr}
 8009d76:	690b      	ldr	r3, [r1, #16]
 8009d78:	4605      	mov	r5, r0
 8009d7a:	460c      	mov	r4, r1
 8009d7c:	b913      	cbnz	r3, 8009d84 <_fflush_r+0x10>
 8009d7e:	2500      	movs	r5, #0
 8009d80:	4628      	mov	r0, r5
 8009d82:	bd38      	pop	{r3, r4, r5, pc}
 8009d84:	b118      	cbz	r0, 8009d8e <_fflush_r+0x1a>
 8009d86:	6983      	ldr	r3, [r0, #24]
 8009d88:	b90b      	cbnz	r3, 8009d8e <_fflush_r+0x1a>
 8009d8a:	f000 f887 	bl	8009e9c <__sinit>
 8009d8e:	4b14      	ldr	r3, [pc, #80]	; (8009de0 <_fflush_r+0x6c>)
 8009d90:	429c      	cmp	r4, r3
 8009d92:	d11b      	bne.n	8009dcc <_fflush_r+0x58>
 8009d94:	686c      	ldr	r4, [r5, #4]
 8009d96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d0ef      	beq.n	8009d7e <_fflush_r+0xa>
 8009d9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009da0:	07d0      	lsls	r0, r2, #31
 8009da2:	d404      	bmi.n	8009dae <_fflush_r+0x3a>
 8009da4:	0599      	lsls	r1, r3, #22
 8009da6:	d402      	bmi.n	8009dae <_fflush_r+0x3a>
 8009da8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009daa:	f000 f915 	bl	8009fd8 <__retarget_lock_acquire_recursive>
 8009dae:	4628      	mov	r0, r5
 8009db0:	4621      	mov	r1, r4
 8009db2:	f7ff ff59 	bl	8009c68 <__sflush_r>
 8009db6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009db8:	07da      	lsls	r2, r3, #31
 8009dba:	4605      	mov	r5, r0
 8009dbc:	d4e0      	bmi.n	8009d80 <_fflush_r+0xc>
 8009dbe:	89a3      	ldrh	r3, [r4, #12]
 8009dc0:	059b      	lsls	r3, r3, #22
 8009dc2:	d4dd      	bmi.n	8009d80 <_fflush_r+0xc>
 8009dc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dc6:	f000 f908 	bl	8009fda <__retarget_lock_release_recursive>
 8009dca:	e7d9      	b.n	8009d80 <_fflush_r+0xc>
 8009dcc:	4b05      	ldr	r3, [pc, #20]	; (8009de4 <_fflush_r+0x70>)
 8009dce:	429c      	cmp	r4, r3
 8009dd0:	d101      	bne.n	8009dd6 <_fflush_r+0x62>
 8009dd2:	68ac      	ldr	r4, [r5, #8]
 8009dd4:	e7df      	b.n	8009d96 <_fflush_r+0x22>
 8009dd6:	4b04      	ldr	r3, [pc, #16]	; (8009de8 <_fflush_r+0x74>)
 8009dd8:	429c      	cmp	r4, r3
 8009dda:	bf08      	it	eq
 8009ddc:	68ec      	ldreq	r4, [r5, #12]
 8009dde:	e7da      	b.n	8009d96 <_fflush_r+0x22>
 8009de0:	0800a7a4 	.word	0x0800a7a4
 8009de4:	0800a7c4 	.word	0x0800a7c4
 8009de8:	0800a784 	.word	0x0800a784

08009dec <std>:
 8009dec:	2300      	movs	r3, #0
 8009dee:	b510      	push	{r4, lr}
 8009df0:	4604      	mov	r4, r0
 8009df2:	e9c0 3300 	strd	r3, r3, [r0]
 8009df6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009dfa:	6083      	str	r3, [r0, #8]
 8009dfc:	8181      	strh	r1, [r0, #12]
 8009dfe:	6643      	str	r3, [r0, #100]	; 0x64
 8009e00:	81c2      	strh	r2, [r0, #14]
 8009e02:	6183      	str	r3, [r0, #24]
 8009e04:	4619      	mov	r1, r3
 8009e06:	2208      	movs	r2, #8
 8009e08:	305c      	adds	r0, #92	; 0x5c
 8009e0a:	f7fb fdcd 	bl	80059a8 <memset>
 8009e0e:	4b05      	ldr	r3, [pc, #20]	; (8009e24 <std+0x38>)
 8009e10:	6263      	str	r3, [r4, #36]	; 0x24
 8009e12:	4b05      	ldr	r3, [pc, #20]	; (8009e28 <std+0x3c>)
 8009e14:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e16:	4b05      	ldr	r3, [pc, #20]	; (8009e2c <std+0x40>)
 8009e18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e1a:	4b05      	ldr	r3, [pc, #20]	; (8009e30 <std+0x44>)
 8009e1c:	6224      	str	r4, [r4, #32]
 8009e1e:	6323      	str	r3, [r4, #48]	; 0x30
 8009e20:	bd10      	pop	{r4, pc}
 8009e22:	bf00      	nop
 8009e24:	0800a141 	.word	0x0800a141
 8009e28:	0800a163 	.word	0x0800a163
 8009e2c:	0800a19b 	.word	0x0800a19b
 8009e30:	0800a1bf 	.word	0x0800a1bf

08009e34 <_cleanup_r>:
 8009e34:	4901      	ldr	r1, [pc, #4]	; (8009e3c <_cleanup_r+0x8>)
 8009e36:	f000 b8af 	b.w	8009f98 <_fwalk_reent>
 8009e3a:	bf00      	nop
 8009e3c:	08009d75 	.word	0x08009d75

08009e40 <__sfmoreglue>:
 8009e40:	b570      	push	{r4, r5, r6, lr}
 8009e42:	2268      	movs	r2, #104	; 0x68
 8009e44:	1e4d      	subs	r5, r1, #1
 8009e46:	4355      	muls	r5, r2
 8009e48:	460e      	mov	r6, r1
 8009e4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009e4e:	f7ff fa59 	bl	8009304 <_malloc_r>
 8009e52:	4604      	mov	r4, r0
 8009e54:	b140      	cbz	r0, 8009e68 <__sfmoreglue+0x28>
 8009e56:	2100      	movs	r1, #0
 8009e58:	e9c0 1600 	strd	r1, r6, [r0]
 8009e5c:	300c      	adds	r0, #12
 8009e5e:	60a0      	str	r0, [r4, #8]
 8009e60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009e64:	f7fb fda0 	bl	80059a8 <memset>
 8009e68:	4620      	mov	r0, r4
 8009e6a:	bd70      	pop	{r4, r5, r6, pc}

08009e6c <__sfp_lock_acquire>:
 8009e6c:	4801      	ldr	r0, [pc, #4]	; (8009e74 <__sfp_lock_acquire+0x8>)
 8009e6e:	f000 b8b3 	b.w	8009fd8 <__retarget_lock_acquire_recursive>
 8009e72:	bf00      	nop
 8009e74:	2000037d 	.word	0x2000037d

08009e78 <__sfp_lock_release>:
 8009e78:	4801      	ldr	r0, [pc, #4]	; (8009e80 <__sfp_lock_release+0x8>)
 8009e7a:	f000 b8ae 	b.w	8009fda <__retarget_lock_release_recursive>
 8009e7e:	bf00      	nop
 8009e80:	2000037d 	.word	0x2000037d

08009e84 <__sinit_lock_acquire>:
 8009e84:	4801      	ldr	r0, [pc, #4]	; (8009e8c <__sinit_lock_acquire+0x8>)
 8009e86:	f000 b8a7 	b.w	8009fd8 <__retarget_lock_acquire_recursive>
 8009e8a:	bf00      	nop
 8009e8c:	2000037e 	.word	0x2000037e

08009e90 <__sinit_lock_release>:
 8009e90:	4801      	ldr	r0, [pc, #4]	; (8009e98 <__sinit_lock_release+0x8>)
 8009e92:	f000 b8a2 	b.w	8009fda <__retarget_lock_release_recursive>
 8009e96:	bf00      	nop
 8009e98:	2000037e 	.word	0x2000037e

08009e9c <__sinit>:
 8009e9c:	b510      	push	{r4, lr}
 8009e9e:	4604      	mov	r4, r0
 8009ea0:	f7ff fff0 	bl	8009e84 <__sinit_lock_acquire>
 8009ea4:	69a3      	ldr	r3, [r4, #24]
 8009ea6:	b11b      	cbz	r3, 8009eb0 <__sinit+0x14>
 8009ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009eac:	f7ff bff0 	b.w	8009e90 <__sinit_lock_release>
 8009eb0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009eb4:	6523      	str	r3, [r4, #80]	; 0x50
 8009eb6:	4b13      	ldr	r3, [pc, #76]	; (8009f04 <__sinit+0x68>)
 8009eb8:	4a13      	ldr	r2, [pc, #76]	; (8009f08 <__sinit+0x6c>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	62a2      	str	r2, [r4, #40]	; 0x28
 8009ebe:	42a3      	cmp	r3, r4
 8009ec0:	bf04      	itt	eq
 8009ec2:	2301      	moveq	r3, #1
 8009ec4:	61a3      	streq	r3, [r4, #24]
 8009ec6:	4620      	mov	r0, r4
 8009ec8:	f000 f820 	bl	8009f0c <__sfp>
 8009ecc:	6060      	str	r0, [r4, #4]
 8009ece:	4620      	mov	r0, r4
 8009ed0:	f000 f81c 	bl	8009f0c <__sfp>
 8009ed4:	60a0      	str	r0, [r4, #8]
 8009ed6:	4620      	mov	r0, r4
 8009ed8:	f000 f818 	bl	8009f0c <__sfp>
 8009edc:	2200      	movs	r2, #0
 8009ede:	60e0      	str	r0, [r4, #12]
 8009ee0:	2104      	movs	r1, #4
 8009ee2:	6860      	ldr	r0, [r4, #4]
 8009ee4:	f7ff ff82 	bl	8009dec <std>
 8009ee8:	68a0      	ldr	r0, [r4, #8]
 8009eea:	2201      	movs	r2, #1
 8009eec:	2109      	movs	r1, #9
 8009eee:	f7ff ff7d 	bl	8009dec <std>
 8009ef2:	68e0      	ldr	r0, [r4, #12]
 8009ef4:	2202      	movs	r2, #2
 8009ef6:	2112      	movs	r1, #18
 8009ef8:	f7ff ff78 	bl	8009dec <std>
 8009efc:	2301      	movs	r3, #1
 8009efe:	61a3      	str	r3, [r4, #24]
 8009f00:	e7d2      	b.n	8009ea8 <__sinit+0xc>
 8009f02:	bf00      	nop
 8009f04:	0800a33c 	.word	0x0800a33c
 8009f08:	08009e35 	.word	0x08009e35

08009f0c <__sfp>:
 8009f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f0e:	4607      	mov	r7, r0
 8009f10:	f7ff ffac 	bl	8009e6c <__sfp_lock_acquire>
 8009f14:	4b1e      	ldr	r3, [pc, #120]	; (8009f90 <__sfp+0x84>)
 8009f16:	681e      	ldr	r6, [r3, #0]
 8009f18:	69b3      	ldr	r3, [r6, #24]
 8009f1a:	b913      	cbnz	r3, 8009f22 <__sfp+0x16>
 8009f1c:	4630      	mov	r0, r6
 8009f1e:	f7ff ffbd 	bl	8009e9c <__sinit>
 8009f22:	3648      	adds	r6, #72	; 0x48
 8009f24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009f28:	3b01      	subs	r3, #1
 8009f2a:	d503      	bpl.n	8009f34 <__sfp+0x28>
 8009f2c:	6833      	ldr	r3, [r6, #0]
 8009f2e:	b30b      	cbz	r3, 8009f74 <__sfp+0x68>
 8009f30:	6836      	ldr	r6, [r6, #0]
 8009f32:	e7f7      	b.n	8009f24 <__sfp+0x18>
 8009f34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009f38:	b9d5      	cbnz	r5, 8009f70 <__sfp+0x64>
 8009f3a:	4b16      	ldr	r3, [pc, #88]	; (8009f94 <__sfp+0x88>)
 8009f3c:	60e3      	str	r3, [r4, #12]
 8009f3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009f42:	6665      	str	r5, [r4, #100]	; 0x64
 8009f44:	f000 f847 	bl	8009fd6 <__retarget_lock_init_recursive>
 8009f48:	f7ff ff96 	bl	8009e78 <__sfp_lock_release>
 8009f4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009f50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009f54:	6025      	str	r5, [r4, #0]
 8009f56:	61a5      	str	r5, [r4, #24]
 8009f58:	2208      	movs	r2, #8
 8009f5a:	4629      	mov	r1, r5
 8009f5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009f60:	f7fb fd22 	bl	80059a8 <memset>
 8009f64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009f68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009f6c:	4620      	mov	r0, r4
 8009f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f70:	3468      	adds	r4, #104	; 0x68
 8009f72:	e7d9      	b.n	8009f28 <__sfp+0x1c>
 8009f74:	2104      	movs	r1, #4
 8009f76:	4638      	mov	r0, r7
 8009f78:	f7ff ff62 	bl	8009e40 <__sfmoreglue>
 8009f7c:	4604      	mov	r4, r0
 8009f7e:	6030      	str	r0, [r6, #0]
 8009f80:	2800      	cmp	r0, #0
 8009f82:	d1d5      	bne.n	8009f30 <__sfp+0x24>
 8009f84:	f7ff ff78 	bl	8009e78 <__sfp_lock_release>
 8009f88:	230c      	movs	r3, #12
 8009f8a:	603b      	str	r3, [r7, #0]
 8009f8c:	e7ee      	b.n	8009f6c <__sfp+0x60>
 8009f8e:	bf00      	nop
 8009f90:	0800a33c 	.word	0x0800a33c
 8009f94:	ffff0001 	.word	0xffff0001

08009f98 <_fwalk_reent>:
 8009f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f9c:	4606      	mov	r6, r0
 8009f9e:	4688      	mov	r8, r1
 8009fa0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009fa4:	2700      	movs	r7, #0
 8009fa6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009faa:	f1b9 0901 	subs.w	r9, r9, #1
 8009fae:	d505      	bpl.n	8009fbc <_fwalk_reent+0x24>
 8009fb0:	6824      	ldr	r4, [r4, #0]
 8009fb2:	2c00      	cmp	r4, #0
 8009fb4:	d1f7      	bne.n	8009fa6 <_fwalk_reent+0xe>
 8009fb6:	4638      	mov	r0, r7
 8009fb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fbc:	89ab      	ldrh	r3, [r5, #12]
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d907      	bls.n	8009fd2 <_fwalk_reent+0x3a>
 8009fc2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	d003      	beq.n	8009fd2 <_fwalk_reent+0x3a>
 8009fca:	4629      	mov	r1, r5
 8009fcc:	4630      	mov	r0, r6
 8009fce:	47c0      	blx	r8
 8009fd0:	4307      	orrs	r7, r0
 8009fd2:	3568      	adds	r5, #104	; 0x68
 8009fd4:	e7e9      	b.n	8009faa <_fwalk_reent+0x12>

08009fd6 <__retarget_lock_init_recursive>:
 8009fd6:	4770      	bx	lr

08009fd8 <__retarget_lock_acquire_recursive>:
 8009fd8:	4770      	bx	lr

08009fda <__retarget_lock_release_recursive>:
 8009fda:	4770      	bx	lr

08009fdc <__swhatbuf_r>:
 8009fdc:	b570      	push	{r4, r5, r6, lr}
 8009fde:	460e      	mov	r6, r1
 8009fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fe4:	2900      	cmp	r1, #0
 8009fe6:	b096      	sub	sp, #88	; 0x58
 8009fe8:	4614      	mov	r4, r2
 8009fea:	461d      	mov	r5, r3
 8009fec:	da08      	bge.n	800a000 <__swhatbuf_r+0x24>
 8009fee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	602a      	str	r2, [r5, #0]
 8009ff6:	061a      	lsls	r2, r3, #24
 8009ff8:	d410      	bmi.n	800a01c <__swhatbuf_r+0x40>
 8009ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ffe:	e00e      	b.n	800a01e <__swhatbuf_r+0x42>
 800a000:	466a      	mov	r2, sp
 800a002:	f000 f903 	bl	800a20c <_fstat_r>
 800a006:	2800      	cmp	r0, #0
 800a008:	dbf1      	blt.n	8009fee <__swhatbuf_r+0x12>
 800a00a:	9a01      	ldr	r2, [sp, #4]
 800a00c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a010:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a014:	425a      	negs	r2, r3
 800a016:	415a      	adcs	r2, r3
 800a018:	602a      	str	r2, [r5, #0]
 800a01a:	e7ee      	b.n	8009ffa <__swhatbuf_r+0x1e>
 800a01c:	2340      	movs	r3, #64	; 0x40
 800a01e:	2000      	movs	r0, #0
 800a020:	6023      	str	r3, [r4, #0]
 800a022:	b016      	add	sp, #88	; 0x58
 800a024:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a028 <__smakebuf_r>:
 800a028:	898b      	ldrh	r3, [r1, #12]
 800a02a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a02c:	079d      	lsls	r5, r3, #30
 800a02e:	4606      	mov	r6, r0
 800a030:	460c      	mov	r4, r1
 800a032:	d507      	bpl.n	800a044 <__smakebuf_r+0x1c>
 800a034:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a038:	6023      	str	r3, [r4, #0]
 800a03a:	6123      	str	r3, [r4, #16]
 800a03c:	2301      	movs	r3, #1
 800a03e:	6163      	str	r3, [r4, #20]
 800a040:	b002      	add	sp, #8
 800a042:	bd70      	pop	{r4, r5, r6, pc}
 800a044:	ab01      	add	r3, sp, #4
 800a046:	466a      	mov	r2, sp
 800a048:	f7ff ffc8 	bl	8009fdc <__swhatbuf_r>
 800a04c:	9900      	ldr	r1, [sp, #0]
 800a04e:	4605      	mov	r5, r0
 800a050:	4630      	mov	r0, r6
 800a052:	f7ff f957 	bl	8009304 <_malloc_r>
 800a056:	b948      	cbnz	r0, 800a06c <__smakebuf_r+0x44>
 800a058:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a05c:	059a      	lsls	r2, r3, #22
 800a05e:	d4ef      	bmi.n	800a040 <__smakebuf_r+0x18>
 800a060:	f023 0303 	bic.w	r3, r3, #3
 800a064:	f043 0302 	orr.w	r3, r3, #2
 800a068:	81a3      	strh	r3, [r4, #12]
 800a06a:	e7e3      	b.n	800a034 <__smakebuf_r+0xc>
 800a06c:	4b0d      	ldr	r3, [pc, #52]	; (800a0a4 <__smakebuf_r+0x7c>)
 800a06e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a070:	89a3      	ldrh	r3, [r4, #12]
 800a072:	6020      	str	r0, [r4, #0]
 800a074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a078:	81a3      	strh	r3, [r4, #12]
 800a07a:	9b00      	ldr	r3, [sp, #0]
 800a07c:	6163      	str	r3, [r4, #20]
 800a07e:	9b01      	ldr	r3, [sp, #4]
 800a080:	6120      	str	r0, [r4, #16]
 800a082:	b15b      	cbz	r3, 800a09c <__smakebuf_r+0x74>
 800a084:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a088:	4630      	mov	r0, r6
 800a08a:	f000 f8d1 	bl	800a230 <_isatty_r>
 800a08e:	b128      	cbz	r0, 800a09c <__smakebuf_r+0x74>
 800a090:	89a3      	ldrh	r3, [r4, #12]
 800a092:	f023 0303 	bic.w	r3, r3, #3
 800a096:	f043 0301 	orr.w	r3, r3, #1
 800a09a:	81a3      	strh	r3, [r4, #12]
 800a09c:	89a0      	ldrh	r0, [r4, #12]
 800a09e:	4305      	orrs	r5, r0
 800a0a0:	81a5      	strh	r5, [r4, #12]
 800a0a2:	e7cd      	b.n	800a040 <__smakebuf_r+0x18>
 800a0a4:	08009e35 	.word	0x08009e35

0800a0a8 <_malloc_usable_size_r>:
 800a0a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0ac:	1f18      	subs	r0, r3, #4
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	bfbc      	itt	lt
 800a0b2:	580b      	ldrlt	r3, [r1, r0]
 800a0b4:	18c0      	addlt	r0, r0, r3
 800a0b6:	4770      	bx	lr

0800a0b8 <_raise_r>:
 800a0b8:	291f      	cmp	r1, #31
 800a0ba:	b538      	push	{r3, r4, r5, lr}
 800a0bc:	4604      	mov	r4, r0
 800a0be:	460d      	mov	r5, r1
 800a0c0:	d904      	bls.n	800a0cc <_raise_r+0x14>
 800a0c2:	2316      	movs	r3, #22
 800a0c4:	6003      	str	r3, [r0, #0]
 800a0c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a0ca:	bd38      	pop	{r3, r4, r5, pc}
 800a0cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a0ce:	b112      	cbz	r2, 800a0d6 <_raise_r+0x1e>
 800a0d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a0d4:	b94b      	cbnz	r3, 800a0ea <_raise_r+0x32>
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	f000 f830 	bl	800a13c <_getpid_r>
 800a0dc:	462a      	mov	r2, r5
 800a0de:	4601      	mov	r1, r0
 800a0e0:	4620      	mov	r0, r4
 800a0e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0e6:	f000 b817 	b.w	800a118 <_kill_r>
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d00a      	beq.n	800a104 <_raise_r+0x4c>
 800a0ee:	1c59      	adds	r1, r3, #1
 800a0f0:	d103      	bne.n	800a0fa <_raise_r+0x42>
 800a0f2:	2316      	movs	r3, #22
 800a0f4:	6003      	str	r3, [r0, #0]
 800a0f6:	2001      	movs	r0, #1
 800a0f8:	e7e7      	b.n	800a0ca <_raise_r+0x12>
 800a0fa:	2400      	movs	r4, #0
 800a0fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a100:	4628      	mov	r0, r5
 800a102:	4798      	blx	r3
 800a104:	2000      	movs	r0, #0
 800a106:	e7e0      	b.n	800a0ca <_raise_r+0x12>

0800a108 <raise>:
 800a108:	4b02      	ldr	r3, [pc, #8]	; (800a114 <raise+0xc>)
 800a10a:	4601      	mov	r1, r0
 800a10c:	6818      	ldr	r0, [r3, #0]
 800a10e:	f7ff bfd3 	b.w	800a0b8 <_raise_r>
 800a112:	bf00      	nop
 800a114:	20000018 	.word	0x20000018

0800a118 <_kill_r>:
 800a118:	b538      	push	{r3, r4, r5, lr}
 800a11a:	4d07      	ldr	r5, [pc, #28]	; (800a138 <_kill_r+0x20>)
 800a11c:	2300      	movs	r3, #0
 800a11e:	4604      	mov	r4, r0
 800a120:	4608      	mov	r0, r1
 800a122:	4611      	mov	r1, r2
 800a124:	602b      	str	r3, [r5, #0]
 800a126:	f7f7 fad9 	bl	80016dc <_kill>
 800a12a:	1c43      	adds	r3, r0, #1
 800a12c:	d102      	bne.n	800a134 <_kill_r+0x1c>
 800a12e:	682b      	ldr	r3, [r5, #0]
 800a130:	b103      	cbz	r3, 800a134 <_kill_r+0x1c>
 800a132:	6023      	str	r3, [r4, #0]
 800a134:	bd38      	pop	{r3, r4, r5, pc}
 800a136:	bf00      	nop
 800a138:	20000378 	.word	0x20000378

0800a13c <_getpid_r>:
 800a13c:	f7f7 bac6 	b.w	80016cc <_getpid>

0800a140 <__sread>:
 800a140:	b510      	push	{r4, lr}
 800a142:	460c      	mov	r4, r1
 800a144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a148:	f000 f894 	bl	800a274 <_read_r>
 800a14c:	2800      	cmp	r0, #0
 800a14e:	bfab      	itete	ge
 800a150:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a152:	89a3      	ldrhlt	r3, [r4, #12]
 800a154:	181b      	addge	r3, r3, r0
 800a156:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a15a:	bfac      	ite	ge
 800a15c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a15e:	81a3      	strhlt	r3, [r4, #12]
 800a160:	bd10      	pop	{r4, pc}

0800a162 <__swrite>:
 800a162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a166:	461f      	mov	r7, r3
 800a168:	898b      	ldrh	r3, [r1, #12]
 800a16a:	05db      	lsls	r3, r3, #23
 800a16c:	4605      	mov	r5, r0
 800a16e:	460c      	mov	r4, r1
 800a170:	4616      	mov	r6, r2
 800a172:	d505      	bpl.n	800a180 <__swrite+0x1e>
 800a174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a178:	2302      	movs	r3, #2
 800a17a:	2200      	movs	r2, #0
 800a17c:	f000 f868 	bl	800a250 <_lseek_r>
 800a180:	89a3      	ldrh	r3, [r4, #12]
 800a182:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a186:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a18a:	81a3      	strh	r3, [r4, #12]
 800a18c:	4632      	mov	r2, r6
 800a18e:	463b      	mov	r3, r7
 800a190:	4628      	mov	r0, r5
 800a192:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a196:	f000 b817 	b.w	800a1c8 <_write_r>

0800a19a <__sseek>:
 800a19a:	b510      	push	{r4, lr}
 800a19c:	460c      	mov	r4, r1
 800a19e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1a2:	f000 f855 	bl	800a250 <_lseek_r>
 800a1a6:	1c43      	adds	r3, r0, #1
 800a1a8:	89a3      	ldrh	r3, [r4, #12]
 800a1aa:	bf15      	itete	ne
 800a1ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800a1ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a1b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a1b6:	81a3      	strheq	r3, [r4, #12]
 800a1b8:	bf18      	it	ne
 800a1ba:	81a3      	strhne	r3, [r4, #12]
 800a1bc:	bd10      	pop	{r4, pc}

0800a1be <__sclose>:
 800a1be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1c2:	f000 b813 	b.w	800a1ec <_close_r>
	...

0800a1c8 <_write_r>:
 800a1c8:	b538      	push	{r3, r4, r5, lr}
 800a1ca:	4d07      	ldr	r5, [pc, #28]	; (800a1e8 <_write_r+0x20>)
 800a1cc:	4604      	mov	r4, r0
 800a1ce:	4608      	mov	r0, r1
 800a1d0:	4611      	mov	r1, r2
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	602a      	str	r2, [r5, #0]
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	f7f7 fab7 	bl	800174a <_write>
 800a1dc:	1c43      	adds	r3, r0, #1
 800a1de:	d102      	bne.n	800a1e6 <_write_r+0x1e>
 800a1e0:	682b      	ldr	r3, [r5, #0]
 800a1e2:	b103      	cbz	r3, 800a1e6 <_write_r+0x1e>
 800a1e4:	6023      	str	r3, [r4, #0]
 800a1e6:	bd38      	pop	{r3, r4, r5, pc}
 800a1e8:	20000378 	.word	0x20000378

0800a1ec <_close_r>:
 800a1ec:	b538      	push	{r3, r4, r5, lr}
 800a1ee:	4d06      	ldr	r5, [pc, #24]	; (800a208 <_close_r+0x1c>)
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	4604      	mov	r4, r0
 800a1f4:	4608      	mov	r0, r1
 800a1f6:	602b      	str	r3, [r5, #0]
 800a1f8:	f7f7 fac3 	bl	8001782 <_close>
 800a1fc:	1c43      	adds	r3, r0, #1
 800a1fe:	d102      	bne.n	800a206 <_close_r+0x1a>
 800a200:	682b      	ldr	r3, [r5, #0]
 800a202:	b103      	cbz	r3, 800a206 <_close_r+0x1a>
 800a204:	6023      	str	r3, [r4, #0]
 800a206:	bd38      	pop	{r3, r4, r5, pc}
 800a208:	20000378 	.word	0x20000378

0800a20c <_fstat_r>:
 800a20c:	b538      	push	{r3, r4, r5, lr}
 800a20e:	4d07      	ldr	r5, [pc, #28]	; (800a22c <_fstat_r+0x20>)
 800a210:	2300      	movs	r3, #0
 800a212:	4604      	mov	r4, r0
 800a214:	4608      	mov	r0, r1
 800a216:	4611      	mov	r1, r2
 800a218:	602b      	str	r3, [r5, #0]
 800a21a:	f7f7 fabe 	bl	800179a <_fstat>
 800a21e:	1c43      	adds	r3, r0, #1
 800a220:	d102      	bne.n	800a228 <_fstat_r+0x1c>
 800a222:	682b      	ldr	r3, [r5, #0]
 800a224:	b103      	cbz	r3, 800a228 <_fstat_r+0x1c>
 800a226:	6023      	str	r3, [r4, #0]
 800a228:	bd38      	pop	{r3, r4, r5, pc}
 800a22a:	bf00      	nop
 800a22c:	20000378 	.word	0x20000378

0800a230 <_isatty_r>:
 800a230:	b538      	push	{r3, r4, r5, lr}
 800a232:	4d06      	ldr	r5, [pc, #24]	; (800a24c <_isatty_r+0x1c>)
 800a234:	2300      	movs	r3, #0
 800a236:	4604      	mov	r4, r0
 800a238:	4608      	mov	r0, r1
 800a23a:	602b      	str	r3, [r5, #0]
 800a23c:	f7f7 fabd 	bl	80017ba <_isatty>
 800a240:	1c43      	adds	r3, r0, #1
 800a242:	d102      	bne.n	800a24a <_isatty_r+0x1a>
 800a244:	682b      	ldr	r3, [r5, #0]
 800a246:	b103      	cbz	r3, 800a24a <_isatty_r+0x1a>
 800a248:	6023      	str	r3, [r4, #0]
 800a24a:	bd38      	pop	{r3, r4, r5, pc}
 800a24c:	20000378 	.word	0x20000378

0800a250 <_lseek_r>:
 800a250:	b538      	push	{r3, r4, r5, lr}
 800a252:	4d07      	ldr	r5, [pc, #28]	; (800a270 <_lseek_r+0x20>)
 800a254:	4604      	mov	r4, r0
 800a256:	4608      	mov	r0, r1
 800a258:	4611      	mov	r1, r2
 800a25a:	2200      	movs	r2, #0
 800a25c:	602a      	str	r2, [r5, #0]
 800a25e:	461a      	mov	r2, r3
 800a260:	f7f7 fab6 	bl	80017d0 <_lseek>
 800a264:	1c43      	adds	r3, r0, #1
 800a266:	d102      	bne.n	800a26e <_lseek_r+0x1e>
 800a268:	682b      	ldr	r3, [r5, #0]
 800a26a:	b103      	cbz	r3, 800a26e <_lseek_r+0x1e>
 800a26c:	6023      	str	r3, [r4, #0]
 800a26e:	bd38      	pop	{r3, r4, r5, pc}
 800a270:	20000378 	.word	0x20000378

0800a274 <_read_r>:
 800a274:	b538      	push	{r3, r4, r5, lr}
 800a276:	4d07      	ldr	r5, [pc, #28]	; (800a294 <_read_r+0x20>)
 800a278:	4604      	mov	r4, r0
 800a27a:	4608      	mov	r0, r1
 800a27c:	4611      	mov	r1, r2
 800a27e:	2200      	movs	r2, #0
 800a280:	602a      	str	r2, [r5, #0]
 800a282:	461a      	mov	r2, r3
 800a284:	f7f7 fa44 	bl	8001710 <_read>
 800a288:	1c43      	adds	r3, r0, #1
 800a28a:	d102      	bne.n	800a292 <_read_r+0x1e>
 800a28c:	682b      	ldr	r3, [r5, #0]
 800a28e:	b103      	cbz	r3, 800a292 <_read_r+0x1e>
 800a290:	6023      	str	r3, [r4, #0]
 800a292:	bd38      	pop	{r3, r4, r5, pc}
 800a294:	20000378 	.word	0x20000378

0800a298 <_init>:
 800a298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a29a:	bf00      	nop
 800a29c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a29e:	bc08      	pop	{r3}
 800a2a0:	469e      	mov	lr, r3
 800a2a2:	4770      	bx	lr

0800a2a4 <_fini>:
 800a2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2a6:	bf00      	nop
 800a2a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2aa:	bc08      	pop	{r3}
 800a2ac:	469e      	mov	lr, r3
 800a2ae:	4770      	bx	lr
